% -*- mode: Noweb; noweb-code-mode: perl-mode; tab-width: 4 -*-
\documentclass[11pt]{article}
%
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%        1         2         3         4         5         6         7         8
%
% # $Id: Human_Chromosome_21.nw,v 1.8 2001-12-24 12:17:12 gparra Exp $ 
%
% THIS FILE WAS GENERATED WITH THE FOLOWING COMMAND:
% ~jabril/bin/deploy Human_Chromosome_21  /home/ug/jabril/development/softjabril/deploy/data/report.nw
\usepackage{noweb}
\usepackage[a4paper,offset={0pt,0pt},hmargin={2cm,2cm},vmargin={1cm,1cm}]{geometry}
\usepackage{graphics}
\usepackage[dvips]{graphicx}
%% pstricks
\usepackage[dvips]{pstcol}
\usepackage{pstricks}
%\usepackage{pst-node}
%\usepackage{pst-char}
%\usepackage{pst-grad}
%% bibliography
\usepackage{natbib}
%% latex2html
\usepackage{url}
\usepackage{html}     
\usepackage{htmllist} 
%% tables    
\usepackage{dcolumn}
%\usepackage{colortbl}
%\usepackage{multirow}
%\usepackage{hhline}
%\usepackage{tabularx}
%% seminar
%\usepackage{semcolor,semlayer,semrot,semhelv,sem-page,slidesec}
%% draft watermark
%\usepackage[all,dvips]{draftcopy}
%\draftcopySetGrey{0.9}
%\draftcopyName{CONFIDENTIAL}{100}
%% layout
\usepackage{fancyhdr} % Do not use \usepackage{fancybox} -> TOCs disappear
%\usepackage{lscape}
\usepackage{rotating}
%\usepackage{multicol}
%% fonts
\usepackage{times}\fontfamily{ptm}\selectfont
\usepackage{t1enc}

% noweb options
\noweboptions{smallcode}
\def\nwendcode{\endtrivlist \endgroup} % relax page breaking scheme
\let\nwdocspar=\par                    %

\input defs.tex % from <LaTeX new definitions> chunk

%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\begin{document}
%
<<HIDE: LaTeX new definitions>>=
%%%%% Colors for gff2ps
\input ColorDefs.tex

%%%%% New Commands are defined here
\newcommand{\sctn}[1]{\section{#1}}
\newcommand{\subsctn}[1]{\subsection{#1}}
\newcommand{\subsubsctn}[1]{\subsubsection{#1}}
\newcommand{\desc}[1]{\item[#1] \ \\}
\newcommand{\todo}[1]{
  \vskip 3ex
  \hspace{-0.75cm}
   \psframebox[framearc=0.2,linecolor=darkred,linewidth=1pt,
              fillstyle=solid,fillcolor=verylightyellow,framesep=2ex]{
     \begin{minipage}[t]{16cm}
     \vskip -4.75ex
     \hspace{-1.25cm}
       \psframebox[framearc=1,linecolor=darkred,linewidth=1.25pt,
               fillstyle=solid,fillcolor=verylightorange,framesep=5pt]{
               \textcolor{darkred}{\textbf{\hspace{2ex}TO DO\hspace{2ex}}}
         } % psframebox
      \begin{itemize}\setlength{\itemsep}{-0.5ex} #1 \end{itemize}
     \end{minipage}
     } % psframebox
  \vskip 1.5ex
} % newcommand todo
\newcommand{\todoitem}[2]{
  \item[$\triangleright$] [\textit{Section}~\ref{#2}, 
                           \textit{page}~\pageref{#2}]\\ {#1}
} % newcommand todoitem
<<HIDE: new LaTeX commands>>

%%%%% PSTRICKs definitions
\pslongbox{ExFrame}{\psframebox}
\newcommand{\cln}[1]{\fcolorbox{black}{#1}{\textcolor{#1}{\rule[-.3ex]{1cm}{1ex}}}}
\newpsobject{showgrid}{psgrid}{subgriddiv=0,griddots=1,gridlabels=6pt}
% \pscharpath[fillstyle=solid, fillcolor=verydarkcyan, linecolor=black, linewidth=1pt]{\sffamily\scshape\bfseries\veryHuge #1 }
<<HIDE: new LaTeX pstricks>>

%%%%% global urls
% \newcommand{\getpsf}[1]{\html{(\htmladdnormallink{Get PostScript file}{./Psfiles/#1})}}   
<<HIDE: new LaTeX urls>>

%%%%% defs
\def\noweb{\textsc{noweb}}
\def\ps{\textsc{PostScript}}
<<HIDE: new LaTeX definitions>>

%%%%% TODO defs
<<HIDE: new defs TODO>>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\def\genomelab{\textbf{Genome Informatics Research Lab}}
\def\progname{Human\_Chromosome\_21}
\def\tit{\textsc{\progname}}
%
\def\mtauthor{
 \htmladdnormallink{\texttt{author@imim.es}}
                   {MAILTO:author@imim.es?subject=[Human_Chromosome_21]}
 } % def mtauthor
%
\def\authorslist{
 The Author/s {\mdseries\small\dotfill \mtauthor } \\
 % Other authors here...\\
 } % def authorslist
\def\authorshort{
 Abril, JF; Parra, G; Guig\'o, R
 } % def authorshort
%
\def\license{GNU General Public License (GNU-GPL)}
%
\def\progdesc{
Short description of your program here !!!
 } % def progdesc
%
\def\showaffiliation{
\scalebox{0.9 1}{\Large\textsl{\genomelab}}\\
Grup de Recerca en Infom\`atica Biom\`edica\\
Institut Municipal d'Investigaci\'o M\`edica\\
Universitat Pompeu Fabra\\[2ex]
 } % def showaffiliation
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Setting text for footers and headers
\fancyhead{} % clear all fields
\fancyfoot{} % clear all fields
\fancyhead[RO,LE]{\thepage}
\fancyhead[LO,RE]{\tit\quad\rightmark}
\fancyfoot[LO,LE]{\small\textbf{\genomelab}}
\fancyfoot[CO,CE]{\small\textsl{\authorshort}}
\fancyfoot[RO,RE]{\small\textbf{\today}}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
%
@

<<HIDE: new LaTeX commands>>=
@ 
<<HIDE: new LaTeX pstricks>>=
@ 
<<HIDE: new LaTeX urls>>=
@ 
<<HIDE: new LaTeX definitions>>=
\def\biop{\textsc{BioPerl}}
\def\rptm{\textsc{RepeatMasker}}
\def\bl{\textsc{Blast}}
\def\bn{\textsc{blastn}}
\def\bx{\textsc{blastx}}
\def\bp{\textsc{blastp}}
\def\tbn{\textsc{tblastn}}
\def\tbx{\textsc{tblastx}}
\def\pb{\texttt{parseblast}}
\def\ps{\textsc{PostScript}}
\def\gnid{\texttt{geneid}}
\def\gnsc{\texttt{genscan}}
\def\twsc{\texttt{twinscan}}
\def\slam{\textsc{slam}}
\def\sgp{\textsc{sgp}}
\def\gps{\texttt{gff2ps}}
\def\aps{\texttt{aplot}}
\def\data{\textbf{Chromosome 21 Dataset}}
\def\chr{\textbf{Chromosome 21}}
@ 
<<HIDE: new defs TODO>>=
@ 

\thispagestyle{empty}

\begin{titlepage}

\ \vfill
\begin{center}
\textbf{\Huge \progname}\\[5ex]

% \textbf{\Large Authors List Here}\\[1ex]
\textbf{\Large Josep F. Abril}\\[1ex]
\textbf{\Large Gen\'{\i}s Parra}\\[1ex]
\textbf{\Large Roderic Guig\'o}\\[5ex] % \raisebox{0.85ex}{\footnotesize$\,\dag$        % \raisebox{0.85ex}{\footnotesize$\,\dag$}\\[0.5ex]

\textbf{\large --- \today ---}\\[10ex]

\begin{abstract}
\begin{center}
\parbox{0.75\linewidth}{
\progdesc
} % parbox
\end{center}
\end{abstract}

\vfill

\begin{raggedleft}
\showaffiliation
\raisebox{0.85ex}{\footnotesize$\dag\,$}{\large e-mail: \mtauthor}\\
\end{raggedleft}
\end{center}

\end{titlepage} %'

%
%%%%%%%%%%%%%%%%%%%% FRONTMATTER

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\pagenumbering{roman}
\setcounter{page}{1}
\pagestyle{fancy}
% Marks redefinition must go here because pagestyle 
% resets the values to the default ones.
\renewcommand{\sectionmark}[1]{\markboth{}{\thesection.\ #1}}
\renewcommand{\subsectionmark}[1]{\markboth{}{\thesubsection.\ \textsl{#1}}}

\tableofcontents
\listoftables
\listoffigures

\vfill
\begin{center}
{\small$<$ \verb$Id: Human_Chromosome_21.nw,v 1.8 2001-12-24 12:17:12 gparra Exp $$>$ }
\end{center}

%%%%%%%%%%%%%%%%%%%% MAINMATTER

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pagenumbering{arabic}
\setcounter{page}{1}

\sctn{Introduction}
The goal of this project is to generate as fast as posible {\sgp} predictions of chromosome 21. {\gnid} and {\sgp} using hsp must be run, evaluated, and analized in three days.
\sctn{Precition on chr21}

\subsctn{Working on data}

The following data is required :
\begin{itemize}
\item {\tbx} result from running chr21 Golden path april01 against WGS
\item chr21 Golden path april01 masked sequence
\item Ensenmbl annotation coordinates from Goldenpath.
\end{itemize}

<<BASH commands>>=
# Generating the datasets directory 
mkdir $DATASETS \
      $DATASETS/annotation/ $DATASETS/fasta/ $DATASETS/_tmp/ $DATASETS/_docs/ \
      $DATASETS/annotation/ensembl/ \
      $DATASETS/fasta/masked/ \
# Filling up the directories
# Annotations
grep chr21 \
   /seq/genomes/H.sapiens/releases/golden_path-01apr2001/database/ensGene.txt \
   > $DATASETS/annotation/ensembl/ensGene.chr21.txt
# Parsing the annotations
# Exons
sed 's/,/ /g' $DATASETS/annotation/ensembl/ensGene.chr21.txt | \
    gawk 'BEGIN{OFS="\t"}{num_exons=$8;for (cont=1;cont<=num_exons;cont++) \
     print $2,"ensembl","CDS",$(9+cont-1),$(9+cont+num_exons-1),".",$3,".",$1;}'\
     | sort +3n > $DATASETS/annotation/ensembl/exons/chr21
# CDS
$SGPBIN/gp2gff.awk $DATASETS/annotation/ensembl/ensGene.chr21.txt |  \
    gawk '{OFS="\t";$2="ensembl";print}' \
    > $DATASETS/annotation/ensembl/cds/gff/chr21
# To avoid overlapped annotations we colapse the exons
# Exons
    gawk '{OFS="\t";$6="1";$8="1";print}' \
    $DATASETS/annotation/ensembl/exons/chr21 > /tmp/tmp
    blast2gff -g /tmp/tmp | gawk '{OFS="\t";$4++;$9="1";print}' \
     > $DATASETS/annotation/ensembl/exons/chr21.sr
# CDS 
    gawk '{OFS="\t";$6="1";$8="1";$9="1";print}' \
    $DATASETS/annotation/ensembl/cds/gff/chr21 > /tmp/tmp
    blast2gff -g /tmp/tmp | gawk '{OFS="\t";$9="1";print}' \
    > $DATASETS/annotation/ensembl/cds/sr/chr21
# Refseq
grep chr21 \
   /seq/genomes/H.sapiens/releases/golden_path-01apr2001/database/refGene.txt \
   > $DATASETS/annotation/refseq/refGene.chr21.txt
# Parsing the annotations (Refseq genes)
# Exons
sed 's/,/ /g' $DATASETS/annotation/refseq/refGene.chr21.txt | \
    gawk 'BEGIN{OFS="\t"}{num_exons=$8;for (cont=1;cont<=num_exons;cont++) \
     print $2,"ensembl","CDS",$(9+cont-1),$(9+cont+num_exons-1),".",$3,".",$1;}'\
     | sort +3n > $DATASETS/annotation/refseq/exons/chr21
# CDS
$SGPBIN/gp2gff.awk $DATASETS/annotation/refseq/refGene.chr21.txt \
    > $DATASETS/annotation/refseq/cds/gff/chr21

# To avoid overlapped annotations we colapse the exons
# Exons
    gawk '{OFS="\t";$6="1";$8="1";print}' \
    $DATASETS/annotation/refseq/exons/chr21 > /tmp/tmp
    blast2gff -g /tmp/tmp | gawk '{OFS="\t";$4++;$9="1";print}' \
     > $DATASETS/annotation/refseq/exons/chr21.sr
# CDS
    gawk '{OFS="\t";$6="1";$8="1";$9="1";print}' \
    $DATASETS/annotation/refseq/cds/gff/chr21 > /tmp/tmp
    blast2gff -g /tmp/tmp | gawk '{OFS="\t";$9="1";print}' \
    > $DATASETS/annotation/refseq/cds/sr/chr21

# Sequence 
# Pankaj has sent us the splitted sequence of hte chr21, only the fragment he 
# ran tblastx with. /projects/datasets/chr21/fasta/pankaj_fragments/
# Therefore we copy the original masked sequence obtained from the goldenpath
cp /seq/genomes/H.sapiens/releases/golden_path-01apr2001/chromFaMasked/21/chr21.fa.masked \
  $DATASETS/fasta/masked/chr21
cp /seq/genomes/H.sapiens/releases/golden_path-01apr2001/chromFa/chr21.fa \
  $DATASETS/fasta/raw/chr21
# At this point we also cp the blast result sent by pankaj.
mkdir $ANALYSIS/blast $ANALYSIS/blast/wublast.tblastx 
cp ~pagarwal/tbx.tar.gz $ANALYSIS/_tmp/Pankaj/
#
#
grep -v "^>" /projects/datasets/chr21/fasta/masked/chr21 | fold -1 | \
  perl -ne 'chomp; $_ !~ "N" && print "$.\n"' | head -1 
     10000001
#
@
%$

\subsctn{Processing {\tbx} results from Pankaj}

{\tbx} results provided by Pankaj must be parsed and mapped to the corresponding coords in the {\chr} sequence. The reason for such mapping is that we have multiple 100Kbp fragments from the original chromosomic sequence, which were used to run {\tbx} against mouse WGS-3X database. We had to deal with the frame issue of the HSPs fragments; once the HSP coords were mapped to the chromosome, frames also must be recomputed taking into account if HSP was in forward or in reverse strand.

<<BASH commands ANALYSIS>>=
#
# RUNNING TBLASTX
ChckDirs $ANALYSIS/blast $ANALYSIS/blast/wublast.tblastx \
         $ANALYSIS/blast/wublast.tblastx/masked3X+ ;
#
# Filtering HSPs from tblastx output (Pankaj)
IDIR="$ANALYSIS/_tmp/Pankaj/tbx" ;
ODIR="$ANALYSIS/blast/wublast.tblastx/masked3X+";
ChckDirs $ODIR $ODIR/out $ODIR/gff $ODIR/aplot $ODIR/ps $ODIR/logs ;
#
max=44800000;
counter=0 ;
while [ $counter -le $max ] ;
  do {
    echo "### COUNTER: $counter" 1>&2 ;
    if [ -e "$IDIR/chr21_"$counter"_201000" ] ;
      then
        echo "### RUNNING PARSEBLAST on $IDIR/chr21_"$counter"_201000" 1>&2 ;
        gawk '$1~/^>/ { $1=$1":"$2; gsub(/[\|]/,":",$1); }
                      { print $0; }' $IDIR/chr21_$counter"_201000" | \
        parseblast --fullgff --full-scores --comments --verbose --bit-score - \
                   2> $ODIR/logs/parseblast.chr21_$counter"_201000" | \
        gawk 'BEGIN{ OFS="\t";
                     c=ARGV[1]; SEQlen=ARGV[2]; ARGV[1]=ARGV[2]="";
                     frame[0]=3; frame[1]=1; frame[2]=2; }
              $0 !~ /^[ \t]*$/ {
                  $1="chr21"; $4+=c; $5+=c;
                  if ($7=="-") { $8=frame[((SEQlen - $5 + 1) % 3)] }
                  else { $8=frame[($4 % 3)] };
                  print $0;
              }' $counter 44907570 - ;
      fi;
    counter=`expr $counter + 200000` ;
    } ;
  done | gawk '$3 =="hsp" {print}' | sort +3n -6 +6 -7 > $ODIR/gff/chr21 ; 

#
@ 
%$
\subsctn{Running geneid}
<<BASH commands ANALYSIS>>=
# Running geneid on chr21.
run_GENEID Hsap.masked $DATASETS/fasta/masked  chr21 1.1 ;
# Evaluating the results.
#ensembl
# CDS
run_evaluation 21 geneid Hsap.masked $ANALYSIS/geneid \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/geneid/Hsap.masked/eval_geneid.Hsap.masked.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr21_CDSsr 
# EXON
run_evaluation 21 geneid Hsap.masked $ANALYSIS/geneid \
    $DATASETS/annotation/ensembl/exons/sr EXONsr 44907570;
$ENSCRIPT  $ANALYSIS/geneid/Hsap.masked/eval_geneid.Hsap.masked.chr21_EXONsr 
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr21_EXONsr 
# Refseq CDS 
run_evaluation 21 geneid Hsap.masked $ANALYSIS/geneid \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/geneid/Hsap.masked/eval_geneid.Hsap.raw.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.raw.chr21_CDSsr.ref 

# Running geneid on raw chr21.
run_GENEID Hsap.raw $DATASETS/fasta/raw  chr21 1.1 ;
# Evaluating the results.
# Ensembl CDS
run_evaluation 21 geneid Hsap.raw $ANALYSIS/geneid \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/geneid/Hsap.raw/eval_geneid.Hsap.raw.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr21_CDSsr 
# Refseq CDS
run_evaluation 21 geneid Hsap.raw $ANALYSIS/geneid \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/geneid/Hsap.raw/eval_geneid.Hsap.raw.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr21_CDSsr.ref 


@ 
%$
\subsctn{Evaluating genscan}
Genscan predictions were obtained from Goldenpath resources.
<<BASH commands ANALYSIS>>=
# Generating gff file for genscan predictions of chromosome 21
sed 's/,/ /g' $ANALYSIS/genscan/Hsap.goldenpath/chr21.goldenpath |  \
   gawk 'BEGIN{OFS="\t"}{num_exons=$8;for (cont=1;cont<=num_exons;cont++) \
   print $2,"genscan","CDS",$(9+cont-1)+1,$(9+cont+num_exons-1),".",$3,".",$1;}'\
     | sort +3n > $ANALYSIS/genscan/Hsap.goldenpath/gff/chr21
# Evaluatio the results
# ensembl
run_evaluation 21 genscan Hsap.goldenpath $ANALYSIS/genscan \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan.Hsap.masked.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan_brief.Hsap.masked.chr21_CDSsr 
# refseq
run_evaluation 21 genscan Hsap.goldenpath $ANALYSIS/genscan \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan.Hsap.masked.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan_brief.Hsap.masked.chr21_CDSsr.ref 

@

\subsctn{Running {\sgp}}

{\sgp} was run with default parameters in the first approach. We realized than the predictions weren't as goods as in chr22. The specificity and the sensitivity of {\gnid} was very low in this sequences, lower than {\gnsc}. The reason could be that the C+G content of chr21 is lower than chr22. It seems than {\gnsc} can deal with low C+G content more efficiently than {\gnid}. Therefore, it was decided to decrease exon weight(-2) of the first isochore (0-45 C+G\%) to increase the sensitivity and to increase exon weight(+2) of the isochores 2 and 3. The final result seemed to be better.
%'

<<BASH commands ANALYSIS>>=
## Running sgp
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.masked.3X+ $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr21 | sort +1n +2n -3 > $IDIR/gff/chr21.gene_list ;

# Evaluation 
# CDS
run_evaluation 21 sgp Hsap.masked.3X+ $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.masked.3X+/eval_sgp.Hsap.masked.3X+.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.masked.3X+/eval_sgp_brief.Hsap.masked.3X+.chr21_CDSsr 
# EXON
run_evaluation 21 sgp Hsap.masked.3X+ $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/exons/sr EXONsr 44907570;
$ENSCRIPT $ANALYSIS/sgp/Hsap.masked.3X+/eval_sgp.Hsap.masked.3X+.chr21_EXONsr
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.masked.3X+/eval_sgp_brief.Hsap.masked.3X+.chr21_EXONsr 
#refseq cds 
run_evaluation 21 sgp Hsap.masked.3X+ $ANALYSIS/sgp \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;

## Running sgp on raw sequences
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.raw.3X+ $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr21 | sort +1n +2n -3 > $IDIR/gff/chr21.gene_list ;

# Evaluation 
# CDS
run_evaluation 21 sgp Hsap.raw.3X+ $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp.Hsap.raw.3X+.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp_brief.Hsap.raw.3X+.chr21_CDSsr 
run_evaluation 21 sgp Hsap.raw.3X+ $ANALYSIS/sgp \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp.Hsap.raw.3X+.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp_brief.Hsap.raw.3X+.chr21_CDSsr.ref 

## Running sgp on raw sequences with an exonweihgt of +1
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.raw.3X+.ew-1 $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.ew-1" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr21 | sort +1n +2n -3 > $IDIR/gff/chr21.gene_list ;
# Evaluation 
# ensembl CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew-1 $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp.Hsap.raw.3X+.ew-1.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp_brief.Hsap.ew-1.raw.3X+.chr21_CDSsr 
# refseq CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew-1 $ANALYSIS/sgp \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew-1/eval_sgp.Hsap.raw.3X+.ew-1.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew-1/eval_sgp_brief.Hsap.ew-1.raw.3X+.chr21_CDSsr.ref 


## Running sgp on raw sequences with an exonweihgt of +2
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.raw.3X+.ew-2 $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.ew-2" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr21 | sort +1n +2n -3 > $IDIR/gff/chr21.gene_list ;
# Evaluation 
# CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew-2 $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2/eval_sgp.Hsap.raw.3X+.ew-2.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew-2/eval_sgp_brief.Hsap.ew-2.raw.3X+.chr21_CDSsr 
# refseq CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew-2 $ANALYSIS/sgp \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2/eval_sgp.Hsap.raw.3X+.ew-2.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew-2/eval_sgp_brief.Hsap.raw.ew-2.raw.3X+.chr21_CDSsr.ref 
## Running sgp on raw sequences with an exonweihgt of -2 in isochore 1
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.raw.3X+.ew--2 $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.ew--2" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr21 | sort +1n +2n -3 > $IDIR/gff/chr21.gene_list ;
# Evaluation 
# CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew--2 $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew--2/eval_sgp.Hsap.raw.3X+.ew-2.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew--2/eval_sgp_brief.Hsap.ew-2.raw.3X+.chr21_CDSsr 
# refseq CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew--2 $ANALYSIS/sgp \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew--2/eval_sgp.Hsap.raw.3X+.ew-2.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew--2/eval_sgp_brief.Hsap.raw.ew-2.raw.3X+.chr21_CDSsr.ref 
## Running sgp on raw sequences with an exonweihgt of -2 in isochore 1 +2 in the other
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.raw.3X+.ew-2+2 $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr21 | sort +1n +2n -3 > $IDIR/gff/chr21.gene_list ;
# Evaluation 
# CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew-2+2 $ANALYSIS/sgp \
    $DATASETS/annotation/ensembl/cds/sr CDSsr 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/eval_sgp.Hsap.raw.3X+.ew-2+2.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/eval_sgp_brief.Hsap.ew-2+2.raw.3X+.chr21_CDSsr 
# refseq CDS
run_evaluation 21 sgp Hsap.raw.3X+.ew-2+2 $ANALYSIS/sgp \
    $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/eval_sgp.Hsap.raw.3X+.ew-2+2.chr21_CDSsr.ref 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/eval_sgp_brief.Hsap.raw.ew-2+2.raw.3X+.chr21_CDSsr.ref 

@
%$

<<bash commands>>=
# Low complexity masking proteins
mkdir $ANALYSIS/sgp/Hsap.masked.3X+/seg $ANALYSIS/sgp/Hsap.masked.3X+/xnu
ls -1 $ANALYSIS/sgp/Hsap.masked.3X+/prot/ | while read locus
do
    echo $locus 
    /usr/local/molbio/Install/wublast/filter/seg \
         $ANALYSIS/sgp/Hsap.masked.3X+/prot/$locus \
         > $ANALYSIS/sgp/Hsap.masked.3X+/seg/$locus
    /usr/local/molbio/Install/wublast/filter/xnu \
    $ANALYSIS/sgp/Hsap.masked.3X+/prot/$locus \
         > $ANALYSIS/sgp/Hsap.masked.3X+/xnu/$locus
done
# This gawk line compute the number of aa masked by seg.
gawk '{if (substr($1,1,1)==">") \
   {if (NR!=1) printf mask/(tot+mask)"\n";printf substr($1,2)" ";tot=mask=0}\
   else {mask+=gsub(/[a-z]/,/0/); tot+=gsub(/[A-Z]/,/0/)}}\
   END{printf mask/(tot+mask) "\n";}' seg | gawk '$2>=0.50' 
# This gawk line compute the number of aa masked by xnu.
	FastaToTbl xnu.fa | gawk '{print $1,gsub(/X/,/X/)/(length($2)-1)}' \
    | gawk '$2>=0.50'
# script that convert the raw bingo result in a tbl file
gawk 'NF>0 \
      {if (substr($1,1,5)=="chr21" || (substr($1,1,5)=="=====")) \
          {printf "\n";printf $0" ";} \
       else {for (c=1;c<NF-1;c++) printf $c"_"; printf $(NF-1)" "$NF" "} }'\
       $ANALYSIS/sgp/Hsap.masked.3X+/tmp/bingo/bingo \
       | sed 's/_/ /' | sort +1n | sed 's/ /_/;/^$/d;/^====/d' \
     > $ANALYSIS/sgp/Hsap.masked.3X+/tmp/bingo/bingo.tbl
# Now we want to parse all the sequences and select some databases
gawk '{CDNA=HUMEST=GBHUM=MUSEST=RATEST=NR=PUF=DOM=0; for (i=2;i<=NF;i+=2){ \
        CDNA += ($i == "rejected")? 1 : 0;
        HUMEST += ($i ~ /NCBI_Ests/)? $(i+1) : 0;
        GBHUM  += ($i == "GenBank_Human")? $(i+1) : 0;
        MUSEST  += ($i ~ /Mouse_EST_Assemblies/)? $(i+1) : 0;
        RATEST  += ($i ~ /Rat_EST_Assemblies/)? $(i+1) : 0;
        NR += ($i == "nr")? $(i+1) : 0;
        PUF += ($i == "Pufferfish_Genomic")? $(i+1) : 0;
        DOM += ($i == "Conserved_Domain_Database_(NCBI)")? $(i+1) : 0;}
      print $1,"CDNA",CDNA,"GBHUM",GBHUM,"HUMEST",HUMEST,"MUSEST",MUSEST,"RATEST",RATEST,"NR",NR,"PUF",PUF,"DOM",DOM}' \
     $ANALYSIS/sgp/Hsap.masked.3X+/tmp/bingo/bingo.tbl \
     > $ANALYSIS/sgp/Hsap.masked.3X+/tmp/bingo/bingo.select.tbl 
# Now we also want to obtain the genes suported by hsp and compute the
# coverage on them
   $SGPBIN/supportexons \
      $ANALYSIS/sgp/Hsap.masked.3X+/hsp-rs/chr21 \
      $ANALYSIS/geneid/Hsap.masked.gnid_fix/gff/c1.geneid \
       $ANALYSIS/genscan/Hsap.goldenpath/gff/chr21 \
       < $ANALYSIS/sgp/Hsap.masked.3X+/gff/chr21 \
     > $ANALYSIS/sgp/Hsap.masked.3X+/chr21.e-support
# ensembl support 
   $SGPBIN/supportexons $DATASETS/annotation/ensembl/cds/gff/chr21 nul nul \
       < $ANALYSIS/sgp/Hsap.masked.3X+/gff/chr21 \
     | sed 's/TBXMATCH/ENSEMBL/g' \
     > $ANALYSIS/sgp/Hsap.masked.3X+/chr21.e_ensembl-support
# compute the percentage of coverage
    gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9,0,$5-$4+1; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9, cov, $5-$4+1;}}' \
          $ANALYSIS/sgp/Hsap.masked.3X+/chr21.e-support | \
          gawk '{cov[$1]+=$2;len[$1]+=$3}\
                END{for (loc in len) print loc, cov[loc]/len[loc]}' \
      > $ANALYSIS/sgp/Hsap.masked.3X+/chr21.tbx-support_percent
# We need the coverage of each exons with the hsp
gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9"."++ct[$9],0; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9"."++ct[$9], cov/($5-$4+1);}}' \
            $ANALYSIS/sgp/Hsap.masked.3X+/chr21.e-support\
 > $ANALYSIS/sgp/Hsap.masked.3X+/chr21.tbx.e-support_percent
 
# Generating the other supported files
# We want to obtain the number of exons with TBX and GSN for each prediction
  grep TBXMATCH $ANALYSIS/sgp/Hsap.masked.3X+/chr21.e-support \
      | gawk '{print $1, $9}' | sort | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.masked.3X+/chr21.tbx-support
  grep GNSMATCH $ANALYSIS/sgp/Hsap.masked.3X+/chr21.e-support \
      | gawk '{print $1, $9}' | sort | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.masked.3X+/chr21.gscn-support
# join all the files toghether
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/chr21.tbx-support \
      $ANALYSIS/sgp/Hsap.masked.3X+/gff/chr21.gene_list | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/chr21.tbx-support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/chr21.gscn-support \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/tmp/exonerate/chr21.exonerate \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/tmp/blastz/chr21.blastzMouse-support \
      -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/tmp/blatmouse/chr21.blatMouse-support \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/tmp/mystery/looseMystery/chr21.mystery \
      -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+/tmp/bingo/bingo.select.tbl \
      - \
      > $ANALYSIS/sgp/Hsap.masked.3X+/table.tbl
#####################
## We build the html database with the prevoius dataset.

# Building the html table
mkdir $ANALYSIS/sgp/Hsap.masked.3X+/tmp/table
# The file neede are :
# geneid output in geneid format
# gff file of the prediction
# gff file of the hsps
#########
# The hsp file need to have group field:
gawk '{OFS="\t";$9=1;print}' \
   $ANALYSIS/sgp/Hsap.masked.3X+/sr/chr21 \
   > $ANALYSIS/sgp/Hsap.masked.3X+/tmp/table/chr21.sr.gff
# In this gawk commad line we join the information of the homology stored in\
# table file and the output of geneid nneed by geneid2html
gawk 'BEGIN{while (getline<ARGV[1]>0){gsub ("_"," ");\
data[$2]="# Gene " $1 "_" $2 " (). " $6" nt. " $7 " exons. " $8 " exons_sup. " substr ($9,1,4)*100 " %cov. " $10 " genscan. " $11 " Exonerate. " $12 " Blastz. " $13 " Blat. "  $14 " Mystery. " $16 " CDNA. " $18 " GB_HUM. " $20 " EST_HUM. " $22 " EST_MUS. " $24  " EST_RAT. " $26 " NR. " $28 " PUF. " $30 " CDD." }; ARGV[1]="";}{if ($2=="Gene" && $7!=0 && data[$3]) print data[$3]; else print}' \
  $ANALYSIS/sgp/Hsap.masked.3X+/table.tbl \
  $ANALYSIS/sgp/Hsap.masked.3X+/geneid_format/chr21 \
  > $ANALYSIS/sgp/Hsap.masked.3X+/tmp/table/chr21.geneid
#We devided the information of the chr21.geneid into the four cathegories
TABLE="$ANALYSIS/sgp/Hsap.masked.3X+/tmp/table"
# Genes with ensembl hits
gawk '{if (NR<5) print;if ($2=="Gene") \
   if ($7!=0 && $23>0) {bol=1;} else {bol=0} if (bol==1) print $0 }' \
   $TABLE/chr21.geneid > $TABLE/chr21.ensembl_cdna.gnid
# Genes without genscan hits
gawk '{if (NR<5) print;if ($2=="Gene") \
   if ($7!=0 && $13==0 && $23==0 && $9!=0) {bol=1;} else {bol=0} \
   if (bol==1) print  $0 }' \
   $TABLE/chr21.geneid > $TABLE/chr21.no_genscan.gnid
# Genes without HSP support
gawk '{if (NR<5) print;if ($2=="Gene") \
   if ($7!=0  && $23==0 && $9==0) {bol=1;} else {bol=0} \
   if (bol==1) print  $0 }' \
   $TABLE/chr21.geneid > $TABLE/chr21.no_supported.gnid
# Remaining Genes
gawk '{if (NR<5) print; if ($2=="Gene") \
   if ($7!=0 && $13!=0 && $23==0 && $9!=0) {bol=1;} else {bol=0} \
   if (bol==1) print  $0 }' \
   $TABLE/chr21.geneid > $TABLE/chr21.supported.gnid
# A file with the titles of each group was done
cat > titles
ensembl_cdna SGP predictions identical to ensembl cDNA (95% identity over 100bp)
supported  SGP predictions overlapping genscan predictions
no_genscan  SGP predictions NOT overlapping genscan predictions
no_supported SGP predictions WITHOUT homology support of Mouse genome shotgun
# We asure that no old file were in the directory
rm -f $TABLE/table_chr21A.html \
      $TABLE/geneid_chr21.ensembl_cdna.html \
      $TABLE/geneid_chr21.no_genscan.html \
      $TABLE/geneid_chr21.supported.html \
      $TABLE/geneid_chr21.no_supported.html
# The following script execute geneid2html.pl
while read file title
do
  $SGPBIN/geneid2html.pl \
     $ANALYSIS/sgp/Hsap.masked.3X+/gff/chr21 \
     $TABLE/chr21.sr.gff  \
     $TABLE/chr21.$file.gnid 
  sed "s/geneid_chr21.html/geneid_chr21.$file.html/g" \
    $TABLE/table_chr21.html | \
  gawk "{if (NR==8){print;print \"<h2> $title <h2>\"} else print}"\
     >> $TABLE/table_chr21A.html  
  mv $TABLE/geneid_chr21.html $TABLE/geneid_chr21.$file.html
done < $TABLE/titles

gawk '$15==0 && $17==0 && $19==0 && $5>100' | \

mkdir $ANALYSIS/sgp/Hsap.masked.3X+/cds_coord
ODIR="$ANALYSIS/sgp/Hsap.masked.3X+/cds_coord/";
/home/ug/jabril/development/softjabril/fullgffcoords/bin/fullgffcoords.pl -c\
  $ANALYSIS/sgp/Hsap.masked.3X+/gff/chr21 | 
  gawk "{OFS=\"\t\";\$1=\$9;\$7=\"+\";\$9=\$9\".\"++ct[\$9];print  > \"$ODIR/\" \$1}" 
ls -1 $ODIR | while read locus
do
   sort +3n -o $ODIR/$locus $ODIR/$locus
done
@

<<Working with the exons>>=
# First we need the coordenates for each exon in the cDNA sequence
mkdir $ANALYSIS/sgp/Hsap.masked.3X+/cds_coord
ODIR="$ANALYSIS/sgp/Hsap.masked.3X+/cds_coord/";
/home/ug/jabril/development/softjabril/fullgffcoords/bin/fullgffcoords.pl -c\
  $ANALYSIS/sgp/Hsap.masked.3X+/gff/chr21 | 
  gawk "{OFS=\"\t\";\$1=\$9;\$7=\"+\";\$9=\$9\".\"++ct[\$9];print  > \"$ODIR/\" \$1}" 
ls -1 $ODIR | while read locus
do
   sort +3n -o $ODIR/$locus $ODIR/$locus
done
@ 

<<Filtering new predictions>>=
# Analizing the final results obtained by modifying the exon weight 
#(isochore 1: -2; isochore 2 3:+2)  
# Finding the coordinates of the exons inside the cds 
mkdir $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/cds_coord
ODIR="$ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/cds_coord/";
/home/ug/jabril/development/softjabril/fullgffcoords/bin/fullgffcoords.pl -c\
  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/gff/chr21 | 
  gawk "{OFS=\"\t\";\$1=\$9;\$7=\"+\";\$9=\$9\".\"++ct[\$9];print  > \"$ODIR/\" \$1}" 
ls -1 $ODIR | while read locus
do
   sort +3n -o $ODIR/$locus $ODIR/$locus
done
# Low complexity masking proteins : seg and xnu
mkdir $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/seg $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/xnu
ls -1 $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/prot/ | while read locus
do
    echo $locus 
    /usr/local/molbio/Install/wublast/filter/seg \
         $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/prot/$locus \
         > $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/seg/$locus
    /usr/local/molbio/Install/wublast/filter/xnu \
    $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/prot/$locus \
         > $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/xnu/$locus
done
# This gawk line compute the %  of aa masked by seg.
gawk '{if (substr($1,1,1)==">") \
   {if (NR!=1) printf mask/(tot+mask)"\n";printf substr($1,2)" ";tot=mask=0}\
   else {mask+=gsub(/[a-z]/,/0/); tot+=gsub(/[A-Z]/,/0/)}}\
   END{printf mask/(tot+mask) "\n";}' $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/seg/* \
   >  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.seg.support_percent 
# This gawk line compute the % of aa masked by xnu.
FastaToTbl $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/xnu/* \
   | gawk '{print $1,gsub(/X/,/X/)/(length($2)-1)}' \
   >  $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.xnu.support_percent
# coverage on the predicted exons by the hsp-rs
   $SGPBIN/supportexons \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/hsp-rs/chr21 nul nul \
       < $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/gff/chr21 \
     > $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.e-support
    grep TBXMATCH $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.e-support \
      | gawk '{print $1, $9}' | sort | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.tbx-support
# compute the percentage of coverage for exons
    gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9,0,$5-$4+1; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9, cov, $5-$4+1;}}' \
          $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.e-support | \
          gawk '{cov[$1]+=$2;len[$1]+=$3}\
                END{for (loc in len) print loc, cov[loc]/len[loc]}' \
      > $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.tbx-support_percent
# join all the files toghether
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.tbx-support \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/gff/chr21.gene_list | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.tbx-support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.seg.support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/chr21.xnu.support_percent \
       -   | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/tmp/bingo/sgp.reject  \
      -  > $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/table.tbl
# $1= locus name
# $2= first gene  position
# $3= last gene position
# $4= strand
# $5= lenght nt
# $6= # exons
# $7= # supported exons (hsp)
# $8= %cov (hsp)
# $9= xnu masked %
# $10= seg masked %
# $11= 0=novel (sprot|ensembl_cdna|Hs_spliced_ESTs|nonHs_tx|refseq_human)=rejected 
# $12..$NF Other pankaj information about rejected genes
@ 

\sctn{Summarizing results}

This table summarize all the results obtained in this report:

<<Making summary table>>=
parseval ()
{
   TITLE=$1
   FILE=$2
   gawk 'BEGIN{tittle=ARGV[1];ARGV[1]="";OFS=" & ";}\
         {if (bol==1) {$NF=$NF" \\\\";print tittle, $0;} bol=0 ; \
         if ($1=="#Total:") bol=1; }' $TITLE $FILE
}

#Refseq
echo "\begin{sidewaystable}\begin{center}" > $WORK/docs/tables/summary_eval.tex
echo "\begin{tabular}{l|cccccccccccccccc}"   >> $WORK/docs/tables/summary_eval.tex 
echo "  &  SN   &   SP  &    CC  &   SNe  &   SPe  &  SNSP  &  raME  &  raWE  &   SNg  &    SPg  &  SNSPg   &    raMG  &  raWG  &  raJG  &  raSG \\\\" >> $WORK/docs/tables/summary_eval.tex 
#Raw CDS Refseq
echo "\hline"  >> $WORK/docs/tables/summary_eval.tex
echo "Raw Sequence   \\\\ \hline" >> $WORK/docs/tables/summary_eval.tex

parseval geneid $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr21_CDSsr.ref  >> $WORK/docs/tables/summary_eval.tex 
parseval genscan $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan_brief.Hsap.goldenpath.chr21_CDSsr.ref >> $WORK/docs/tables/summary_eval.tex 
parseval sgp $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp_brief.Hsap.raw.3X+.chr21_CDSsr.ref >> $WORK/docs/tables/summary_eval.tex 
parseval sgp+2-2 $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/eval_sgp_brief.Hsap.raw.3X+.ew-2+2.chr21_CDSsr.ref >> $WORK/docs/tables/summary_eval.tex 
# Masked CDS Refseq
echo "\hline"  >> $WORK/docs/tables/summary_eval.tex
echo "Masked Sequence\\\\ \hline " >> $WORK/docs/tables/summary_eval.tex
parseval geneid $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr21_CDSsr.ref >> $WORK/docs/tables/summary_eval.tex 
parseval sgp $ANALYSIS/sgp/Hsap.masked.3X+/eval_sgp_brief.Hsap.masked.3X+.chr21_CDSsr.ref >> $WORK/docs/tables/summary_eval.tex 


# Raw CDS ENSEMBL
echo "\hline"  >> $WORK/docs/tables/summary_eval.tex
echo "Raw Ensembl  \\\\ \hline" >> $WORK/docs/tables/summary_eval.tex
parseval genscan $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan_brief.Hsap.goldenpath.chr21_CDSsr >> $WORK/docs/tables/summary_eval.tex 
parseval geneid $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr21_CDSsr  >> $WORK/docs/tables/summary_eval.tex 
parseval sgp $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp_brief.Hsap.raw.3X+.chr21_CDSsr >> $WORK/docs/tables/summary_eval.tex 
parseval sgp+2-2 $ANALYSIS/sgp/Hsap.raw.3X+.ew-2+2/eval_sgp_brief.Hsap.raw.3X+.ew-2+2.chr21_CDSsr >> $WORK/docs/tables/summary_eval.tex 
# Masked CDS ENSEMBL
echo "\hline \hline"  >> $WORK/docs/tables/summary_eval.tex
echo "Masked Ensembl\\\\ \hline " >> $WORK/docs/tables/summary_eval.tex
parseval geneid $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr21_CDSsr >> $WORK/docs/tables/summary_eval.tex 
parseval sgp $ANALYSIS/sgp/Hsap.masked.3X+/eval_sgp_brief.Hsap.masked.3X+.chr21_CDSsr >> $WORK/docs/tables/summary_eval.tex 

echo "\end{tabular} \caption{Evaluation summary table} \end{center} \end{sidewaystable}"   >> $WORK/docs/tables/summary_eval.tex 

@ 
%$
\begin{center}
\input $WORK/docs/tables/summary_eval.tex
%$
\end{center}


\sctn{Running {\gps}}

\subsctn{Preparing GFF files}

<<BASH commands ANALYSIS>>=
#
# MAKING PLOTS with GFF2PS
#
# There are no results for genscan/twinscan/slam
#
export CHR="chr21";
#
# Preparing annotaton and repeats
gawk '$0!~/^#/ {$2="annotation";print $0}'\
      $DATASETS/annotation/ensembl/chr21 | \
      sort +3n +4n -5 +2 -3 \
      > $DATASETS/annotation/ensembl/chr21.gff2ps ;
#
# gawk '{
#     if ($9 in names) names[$9]++; 
#     else names[$9]=1;
#     gp = $9"-"names[$9];
#     print $1,$2,$3,$4,$5,$6,$7,$8,gp;
#     }' $DATASETS/masking/default/gff/chr22 \
#      > $DATASETS/masking/default/gff/chr22.gff2ps ;
#
#
# Preparing geneid files
IDIR="$ANALYSIS/geneid/Hsap.masked" ;
ODIR="$IDIR/ps/_tmp/geneid" ;
[ -e $ODIR ] || ChckDirs $ODIR ;
gawk 'BEGIN{OFS="\t"}
      $1!~/^#|^[ \t]*$/ {
          $2="geneid";
          print $0;
      }' $IDIR/gff/$CHR.geneid_v1.1 > $ODIR/$CHR ;
@ 

<<BASH Functions: Preparing SGP Output>>=
#
# Preparing SGP files
set_feats_sgp ()
{
  # USAGE:  set_feats_sgp input_dir
  IDIR="$1";
  #
  # set tblastx GFF files from last SGP run
  ODIR="$IDIR/ps/_tmp/sr" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SR.3X"; $8="." };
          print $0;
          }' $IDIR/sr/$CHR > $ODIR/$CHR ;
  ODIR="$IDIR/ps/_tmp/sr-rs" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SR-RS.3X"; $8="." };
          print $0;
          }' $IDIR/hsp-rs/$CHR > $ODIR/$CHR ;
  #
  # set SGP GFF files from SGP run
  ODIR="$IDIR/ps/_tmp/sgp" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SGP.3X" };
          print $0;
          }' $IDIR/gff/$CHR > $ODIR/$CHR ;
}
#
@ 


\subsctn{Making plots with {\gps}}

<<BASH Functions: Running GFF2PS>>=
#
export PARAM="/projects/sgp/chr21/_docs/bin/param" ;
run_GFF2PS ()
{
  # 
  # run_GFF2PS - Making plots with gff2ps (a4+a3+wide formats)
  #
  # USAGE: run_GFF2PS working_dir "GFF_files_list" custom_file_root [ps_tail]
  #
  # 'working_dir' where to save plots
  # "GFF_files_list" a list of GFF files (with full path) to be plotted
  #
  ODIR="$1/gff2ps" ;
  GFFfiles="$2" ;
  PARM="$PARAM/gff2ps/$3" ;
  [ "$4" ] && XTR="$4" || XTR="";
  #
  ChckDirs $ODIR \
           $ODIR/a3      $ODIR/a4      $ODIR/wide \
           $ODIR/a3/logs $ODIR/a4/logs $ODIR/wide/logs ;
  #
  CHR="chr21" ;
  START="-S 10000000" ;
  #
  gff2ps -VC ${PARM}_wide.rc $START -- $GFFfiles \
          2>&1 > $ODIR/wide/${CHR}${XTR} | tee $ODIR/wide/logs/${CHR}${XTR} ;
  gff2ps -VC ${PARM}_a4.rc   $START -- $GFFfiles \
          2>&1 > $ODIR/a4/${CHR}${XTR}   | tee $ODIR/a4/logs/${CHR}${XTR}   ;
  gff2ps -VC ${PARM}_a3.rc   $START -- $GFFfiles \
          2>&1 > $ODIR/a3/${CHR}${XTR}   | tee $ODIR/a3/logs/${CHR}${XTR}   ;
}
#
@

<<BASH commands ANALYSIS>>=
#
# Running GFF2PS on CHR21 Hsap masked against Mmus WGS-3X
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+/ps" ;
#
GFFIN="$ANALYSIS/geneid/Hsap.masked/ps/_tmp/geneid/chr21" ;    # geneid
GFFIN="$GFFIN $IDIR/_tmp/sgp/chr21" ;                          # sgp
GFFIN="$GFFIN $IDIR/_tmp/sr-rs/chr21" ;                        # sr-rs
GFFIN="$GFFIN $IDIR/_tmp/sr/chr21" ;                           # sr
GFFIN="$GFFIN $DATASETS/annotation/ensembl/chr21.gff2ps" ;       # annotation
# GFFIN="$GFFIN $DATASETS/masking/default/gff/chr21.gff2ps" ;    # repeats
#
run_GFF2PS $IDIR "$GFFIN" masked 2> $IDIR/_tmp/20011015.log ;
#
@

\sctn{Preparing GFF files for apolo}

We merge few ENSEMBL tracks to our gene-prediction into a single GFF file properly formated for APOLLO viewer. We have donwloaded ENSEMBL data using that tool by 5Mbp fragments. Thanks to Steve Searle (\url|searle@sanger.ac.uk|), we can donwload the whole thing with a single call:

\url|http://www.ensembl.org/perl/apolloview?chr=21&vc_start=10000000&vc_end=45000000|

<<APOLLO>>=
perl -we ' ##
  use LWP::UserAgent;
  use HTTP::Request;
  use HTTP::Response;
  use URI::Heuristic;
  my ($chr,$min,$max,$step) = @ARGV;
  @ARGV = ();
  my $url = URI::Heuristic::uf_urlstr("www.ensembl.org/perl/apolloview?chr=");
  my $ua = LWP::UserAgent->new();
  $ua->agent("perl-script");
  for (my $k = $min; $k < $max; $k += $step) {
      my ($req,$response,$content,$nwurl,$j,$file);
      $j = $k + $step; 
      $nwurl = $url.$chr."\&vc_start=".$k."000000\&vc_end=".$j."000000";
      print STDERR "# Downloading data from $nwurl\n";
      $file = "./chr${chr}_${k}_${j}.gff";
      open(HTMLOUT,"> $file") ||
          die("### Cannot open file: $file $!");
      $req = HTTP::Request->new(GET => $nwurl);
      $req->referer("http://www1.imim.es");
      $response = $ua->request($req);
      # print STDERR "#... ".$response->title()."\n";
      $content = $response->content();
      print HTMLOUT $content;
      print STDERR "#...... ".(length $content)."\n";
      close(HTMLOUT);
  }; # for
  '  21  10 45 5   2>&1 | tee download_chr21.log ; 
@ 

<<APOLLO>>=
BASE="/projects/sgp/chr21/apollo" ;
# what to do when loading 5mbp Ensembl fragments using Apollo
cat $BASE/ori/chr21_10_15.gff $BASE/ori/chr21_15_20.gff \
    $BASE/ori/chr21_20_25.gff $BASE/ori/chr21_25_30.gff \
    $BASE/ori/chr21_30_35.gff $BASE/ori/chr21_35_40.gff \
    $BASE/ori/chr21_40_45.gff > $BASE/chr21.gff ;
#
gawk '{print $2,$3}' $BASE/chr21.gff | sort | uniq -c | sort -nr ;
#   57468 sptr similarity
#   54303 embl_vertrna similarity
#   44626 RepeatMasker similarity
#   36119 unigene.seq similarity
#   16338 Variation exon
#   16085 est similarity
#   10720 trace similarity
#    6491
#    3437 genscan exon
#    1380 hugo exon
#     809 embl exon
#     397 ensembl exon
#     238 sptrembl exon
#     230 epcr exon
#     109 sequence similarity
#      94 cpg similarity
#       1 tRNA similarity 
#
grep "genscan" $BASE/chr21.gff | sort +3n -5 +8n | \
    gawk 'BEGIN{OFS="\t";gp=last=1}
          { if (last!=$9) { gp++; last=$9; };
            $9=gp; print $0;
            }' - > $BASE/chr21_genscan.gff ;
grep "est" $BASE/chr21.gff | sort +3n -5 > $BASE/chr21_est.gff ;
gawk 'BEGIN{OFS="\t";gp=last=1}
      $2 ~ /^(hugo|embl|ensembl|sptrembl|epcr)$/ {
        print $0;
      }' $BASE/chr21.gff | \
         sort +3n -5 > $BASE/chr21_annot.gff ;
#
gawk 'BEGIN{OFS="\t";gp=last=1}
      $1 !~ /^\#|^[ \t]*$/ {
        $1=$9; gsub("ENST","ENSG",$1); 
        $2="annotation"; $3="exon"; $6=1; print $0;
        }' /projects/datasets/chr21/annotation/ensembl/cds/gff/chr21 \
        > $BASE/chr21_local-annot.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $1=++cnt;            # $1="static0";
        $3="hsp-sr"; $8="."; # $9="__NONE__\t-1\t-1";
        print $0;
        }' /projects/sgp/chr21/sgp/Hsap.masked.3X+/hsp-rs/chr21 \
        > $BASE/chr21_hsp-sr.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="geneid-raw"; $3="exon";
        # split($9,n,"_"); $9=n[2];
        print $0;
        }' /projects/sgp/chr21/geneid/Hsap.raw/gff/chr21 \
        > $BASE/chr21_geneid_raw.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="geneid-masked"; $3="exon";
        # split($9,n,"_"); $9=n[2];
        print $0;
        }' /projects/sgp/chr21/geneid/Hsap.masked/gff/chr21 \
        > $BASE/chr21_geneid_masked.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="sgp-raw"; $3="exon";
        split($9,n,"_"); $9=n[2]; print $0;
        }' /projects/sgp/chr21/sgp/Hsap.raw.3X+/gff/chr21 \
        > $BASE/chr21_sgp_raw.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="sgp-masked"; $3="exon";
        split($9,n,"_"); $9=n[2]; print $0;
        }' /projects/sgp/chr21/sgp/Hsap.masked.3X+/gff/chr21 \
        > $BASE/chr21_sgp_masked.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="sgp"; $3="exon";
        split($9,n,"_"); $9=n[2]; print $0;
        }' /projects/sgp/chr21/sgp/Hsap.raw.3X+.ew-2+2/gff/chr21 \
        > $BASE/chr21_sgp_ew.gff ;
#
cat $BASE/chr21_est.gff $BASE/chr21_genscan.gff \
    $BASE/chr21_geneid_masked.gff $BASE/chr21_geneid_raw.gff \
    $BASE/chr21_sgp_ew.gff $BASE/chr21_sgp_masked.gff $BASE/chr21_sgp_raw.gff \
    $BASE/chr21_hsp-sr.gff $BASE/chr21_local-annot.gff $BASE/chr21_annot.gff \
    > $BASE/all_chr21.gff ;
@ 
%$
\sctn{Running sgp using different mouse assemblies}
\subsctn{NCBI assembly from 11/2001}

The first step was to run parseblat to the tblastx files given by pankaj( [[<<BASH commands ANALYSIS>>]])
Then run SGP on the unmasked sequence an evaluate the results. AManzingly the results were better than the obtained with the shotgun data.

\begin{verbatim}
# LocusName                SN      SP      CC     SNe     SPe    SNSP    raME    raWE     SNg     SPg    SNSPg   raMG   raWG    raJG    raSG
      chr22.shotgun      0.82    0.66    0.72    0.63    0.54    0.58    0.20    0.31    0.09    0.07    0.08    0.16   0.36    1.17    1.13
      chr22.assembly     0.87    0.65    0.75    0.69    0.54    0.62    0.14    0.33    0.11    0.08    0.10    0.15   0.39    1.15    1.13
      chr22.Arachne      0.85    0.66    0.73    0.67    0.55    0.61    0.17    0.32    0.11    0.09    0.10    0.16   0.36    1.16    1.11     
      chr22.Phusion      0.84    0.66    0.73    0.67    0.55    0.61    0.17    0.32    0.11    0.09    0.10    0.16   0.36    1.15    1.12
\end{verbatim}

The chr22.assembly had 3,306,313 bp covered by sr, and the chr22.shotgun had 2,508,127bp covered by sr. 

Pankaj parameters for the assembly:

  B=10000
  V=10000
  hspmax=999
  topcomboN=10
  S2=80
  W=5
  E=0.01
  Z=3000000000
  nogaps
  filter=xnu
  matrix=blosum62mod
  warnings
  cpus=4

\subsctn{Arachne assembly 12/2001}

The parameters used for this assembly were different to the previous one.:
  B=9000
  V=9000
  hspmax=500
  topcomboN=100
  W=5
  E=0.01
  E2=0.01
  Z=3000000000
  nogaps
  filter=xnu+seg
  S2=80
  matrix=blosum62mod
  warnings
  cpus=4


\subsctn{Phusion assembly 12/2001}

Have the same parameters used in the Arachne assembly.

<<Shell commands: Runnig sgp on Arachne and Phusion>>=
#############
## ARACHNE ##
# Filtering HSPs from tblastx output (Pankaj)
IDIR="$ANALYSIS/_tmp/Pankaj/tbxArachne/" ;
ODIR="$ANALYSIS/blast/wublast.tblastx/tbx_Arachne";
ChckDirs $ODIR $ODIR/out $ODIR/gff $ODIR/aplot $ODIR/ps $ODIR/logs ;
max=44800000;
counter=0 ;
while [ $counter -le $max ] ;
  do {
    echo "### COUNTER: $counter" 1>&2 ;
    if [ -e "$IDIR/chr21_"$counter"_201000" ] ;
      then
        echo "### RUNNING PARSEBLAST on $IDIR/chr21_"$counter"_201000" 1>&2 ;
        gawk '$1~/^>/ { $1=$1":"$2; gsub(/[\|]/,":",$1); }
                      { print $0; }' $IDIR/chr21_$counter"_201000" | \
        parseblast --fullgff --full-scores --comments --verbose --bit-score - \
                   2> $ODIR/logs/parseblast.chr21_$counter"_201000" | \
        gawk 'BEGIN{ OFS="\t";
                     c=ARGV[1]; SEQlen=ARGV[2]; ARGV[1]=ARGV[2]="";
                     frame[0]=3; frame[1]=1; frame[2]=2; }
              $0 !~ /^[ \t]*$/ {
                  $1="chr21"; $4+=c; $5+=c;
                  if ($7=="-") { $8=frame[((SEQlen - $5 + 1) % 3)] }
                  else { $8=frame[($4 % 3)] };
                  print $0;
              }' $counter 44907570 - ;
      fi;
    counter=`expr $counter + 200000` ;
    } ;
  done | gawk '$3 =="hsp" {print}' | sort +3n -6 +6 -7 > $ODIR/gff/chr21 ; 
#
# Running sgp on raw chr22 using tblastx from the ARACNHE assembly 
run_mod_SGP Hsap.raw.Arachne.gnid_fix $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/tbx_Arachne/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.Arachne.gnid_fix" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ;
run_evaluation 21 sgp Hsap.raw.Arachne.gnid_fix $ANALYSIS/sgp \
      $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570 ;
#############
## PHUSION ##
# Filtering HSPs from tblastx output (Pankaj)
IDIR="$ANALYSIS/_tmp/Pankaj/tbxPhusion/" ;
ODIR="$ANALYSIS/blast/wublast.tblastx/tbx_Phusion";
ChckDirs $ODIR $ODIR/out $ODIR/gff $ODIR/aplot $ODIR/ps $ODIR/logs ;
max=44800000;
counter=0 ;
while [ $counter -le $max ] ;
  do {
    echo "### COUNTER: $counter" 1>&2 ;
    if [ -e "$IDIR/chr21_"$counter"_201000" ] ;
      then
        echo "### RUNNING PARSEBLAST on $IDIR/chr21_"$counter"_201000" 1>&2 ;
        gawk '$1~/^>/ { $1=$1":"$2; gsub(/[\|]/,":",$1); }
                      { print $0; }' $IDIR/chr21_$counter"_201000" | \
        parseblast --fullgff --full-scores --comments --verbose --bit-score - \
                   2> $ODIR/logs/parseblast.chr21_$counter"_201000" | \
        gawk 'BEGIN{ OFS="\t";
                     c=ARGV[1]; SEQlen=ARGV[2]; ARGV[1]=ARGV[2]="";
                     frame[0]=3; frame[1]=1; frame[2]=2; }
              $0 !~ /^[ \t]*$/ {
                  $1="chr21"; $4+=c; $5+=c;
                  if ($7=="-") { $8=frame[((SEQlen - $5 + 1) % 3)] }
                  else { $8=frame[($4 % 3)] };
                  print $0;
              }' $counter 44907570 - ;
      fi;
    counter=`expr $counter + 200000` ;
    } ;
  done | gawk '$3 =="hsp" {print}' | sort +3n -6 +6 -7 > $ODIR/gff/chr21 ; 
# Running sgp on raw chr22 using tblastx from the ARACNHE assembly 
run_mod_SGP Hsap.raw.Phusion.gnid_fix $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/tbx_Phusion/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.Phusion.gnid_fix" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr21 ;
sort +3n +4n -5 $IDIR/gff/chr21_* \
              > $IDIR/gff/chr21 ;
run_evaluation 21 sgp Hsap.raw.Phusion.gnid_fix $ANALYSIS/sgp \
     $DATASETS/annotation/refseq/cds/sr CDSsr.ref 44907570 ;

@ 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{comment}
\end{comment}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%% BACKMATTER

% \newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% \bibliographystyle{apalike}
% \bibliography{/home1/rguigo/docs/biblio/References}

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\appendix

\sctn{Shell functions}

<<BASH Functions: Running GENEID>>=
#
# RUNNING GENEID
run_GENEID () 
{
  #
  # run_GENEID - Running GENEID on a chromosome
  #
  # USAGE: run_GENEID testname sequence chr geneidversion
  #
  SECONDS=0;
  PROG="GENEID" ; prog="geneid" ;
##  GENEID="/projects/sgp/param/geneid/human3iso.param" ;
##  CMD="/projects/sgp/bin/geneid -vG" ;
  version=$4 ;
  [ "$version" ] || { 
      echo "### Running version 1.0 by default"; version="1.0"; };
  if [ "$version" == "1.0" ] ;
    then 
      GENEID="/usr/local/molbio/Install/geneid_v1.0/param/human3iso.param" ;
      CMD="/usr/local/molbio/bin/geneid -vG" ;
    else
      GENEID="/home/ug/gparra/Research/selfgenome/src/geneid_v1.1/param/human3iso.param" ;
      CMD="/home/ug/gparra/Research/selfgenome/bin/geneid -vG" ;
  fi ;
      # GENEID tool command-line options:
      #  '-v' be verbose
      #  '-G' GFF output
  # Setting VARS
  MAIN="$ANALYSIS/geneid" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  locus="$3";
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Run program
  echo "### Running $PROG on $locus ..." 1>&2 ;
  $CMD $ISEQ/$locus > $ODIR/$locus 2> $EDIR/$locus ;
  cp $ODIR/$locus $ODIR/$locus.${prog}_v$version ;
  #
  { echo "###"; echo "### Execution time for [$0] : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
#
@

<<BASH Functions: Filtering GENEID RAW Output>>=
#
# Script from gparra to retrieve GFF annotation from geneid big output
geneid_raw2GFF ()
{
  # USAGE:  geneid_raw2GFF output_dir geneid_file
  # filtering geneid output (obtained with "-D" option -> default output+cDNA)
  PD=$1 ;
  /bin/rm -vf $PD/gff/* $PD/prot/* $PD/cds/* ;
  gawk 'BEGIN{ OFS="\t"; odir=ARGV[1]; ARGV[1]="" }
    { if ($2=="Sequence") seqname=$3;
      if ($2=="Gene") gene=$3;
      if (NF>8 && substr($1,1,1)!="#" && $1!="Annotation")
        print seqname,"geneid_v1.1",$1,$2,$3,$4,$5,$6,seqname"_"gene \
              > odir "/gff/" seqname"_"gene;
      if (substr($1,1,1)==">") {
        if (substr($1,length($1)-1,2)=="NN") {
          print ">"seqname"_"gene > odir "/cds/" seqname"_"gene;
          bol=1;
        } else if (substr($1,length($1)-1,2)=="AA") {
          print ">"seqname"_"gene > odir "/prot/" seqname"_"gene;
          bol=2;
        };
      } else {
        if (bol==1 && NF==1 && substr($1,1,1)!=">" ) 
          print $0 > odir "/cds/" seqname"_"gene;
      };
      if (bol==2 && NF==1 && substr($1,1,1)!=">" )
        print $0 > odir "/prot/" seqname"_"gene;
    }' $PD $2 ;
}
#
@ 
%$

%%%  Running SGP

<<BASH Functions: Running SGP>>=
run_mod_SGP () 
{
  #
  # run_mod_SGP - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGP testname sequence hspdata chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  locus="$4";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs tbx gff gtf2 cds prot logs tmp ps ps/_tmp geneid_format ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  LSEQ=$5 ;
  echo "### Building $BASE/tmp/$locus.termini file" ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"cap\", -2, 0, \".\",  
              \"+\", 0}" > $BASE/tmp/$locus.termini ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"poly\", $LSEQ - 1, $LSEQ - 1,
              \".\", \"+\", 0}" >> $BASE/tmp/$locus.termini ;
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -DE $EW -P $PARAM -S $BASE/hsp-rs/$locus \
          -R $BASE/tmp/$locus.termini $ISEQ/$locus | grep -v evidence \
          > $BASE/geneid_format/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
} 
@ 

<<BASH Functions: Gene-Prediction Evaluation>>=
#
# PREPARING EVALUATION STUFF
export GENEIDVERSION="geneid v1.1" ;
#
run_evaluation ()
{
  #
  # USAGE:
  #     run_evaluation #chrom program param prog_results_dir annotation_dir testset lenght_sequence
  # run_evaluation 21 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/all all ;
  #
  CHR="$1" ;
  prog="$2" ;
  PROG=`echo $prog | tr a-z A-Z` ;
  RUN="$3" ;
  BASE="$4/$RUN" ;
  RESULTS="$BASE/gff/chr$CHR" ;
  SUBSET="$6" ;
  TESTSET="$5/chr$CHR" ;
  FINALTESTSET="/tmp/tmp$$" ;
  LENSEQ="$7" ;
  LONG_OUTPUT="$BASE/eval_$prog.$RUN.chr${CHR}_$SUBSET" ;
  SHORT_OUTPUT="$BASE/eval_${prog}_brief.$RUN.chr${CHR}_$SUBSET" ;
  GVER="------------------------- <${GENEIDVERSION}> -------------------------";
  # EVALUATION tool command-line options:
  #  -v: Verbose. Print all messages
  #  -a: Average. Print average stats (more than 1 sequence)
  #  -t: Total. Print total stats (more than 1 sequence)
  #  -s: Short. Print a short output
  # TEMPORAL FILE ADDING A RECORD WITH THE LENGHT OF THE SEQUENCE
  gawk "BEGIN{OFS=\"\t\";\
        print \"chr\"$CHR,1,\"Sequences\",1,$LENSEQ,\".\",\".\",\".\",1}\
        {print}" $TESTSET > /tmp/tmp$$;
  # /tmp/tmp$$ temporaal file containing lenght+annotation gff records
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $LONG_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $LONG_OUTPUT ;
  $SGPBIN/evaluation -ta $RESULTS $FINALTESTSET >> $LONG_OUTPUT ;
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $SHORT_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $SHORT_OUTPUT ;
  $SGPBIN/evaluation -tsa $RESULTS $FINALTESTSET >> $SHORT_OUTPUT ;
}
#
@ 

\subsctn{PERL scripts}

<<PERL shebang>>=
#!/usr/bin/perl -w
# This is perl, version 5.005_03 built for i386-linux
#
<<Program Description>>
#
<<GNU License>>
#
<<Version Control Id Tag>>
#
use strict;
#
<<Program Info>>
my $DATE = localtime;
my $USER = defined($ENV{USER}) ? $ENV{USER} : 'Child Process';
my $host = `hostname`;
chomp($host);
#
@

<<Global Constants - Boolean>>=
my ($T,$F) = (1,0); # for 'T'rue and 'F'alse
@ %def $T $F


\subsubsctn{Timing our scripts}

The '[[Benchmark]]' module encapsulates a number of routines to help to figure out how long it takes to execute a piece of code and the whole script.

<<Use Modules - Benchmark>>=
use Benchmark;
  <<Timer ON>>
@ 

See '[[man Benchmark]]' for further info about this package. 
We set an array to keep record of timing for each section.

<<Timer ON>>=
my @Timer = (new Benchmark);
@ 

<<Common PERL subs - Benchmark>>=
sub timing() {
    push @Timer, (new Benchmark);
    # partial time 
    $_[0] || 
        (return timestr(timediff($Timer[$#Timer],$Timer[($#Timer - 1)])));
    # total time
    return timestr(timediff($Timer[$#Timer],$Timer[0]));
} # timing
@ 


\subsubsctn{Printing complex Data Structures}

With '[[Data::Dumper]]' we are able to pretty print complex data structures for debugging them.


<<Use Modules - Dumper>>=
use Data::Dumper;
local $Data::Dumper::Purity = 0;
local $Data::Dumper::Deepcopy = 1;
@ 


\subsubsctn{Common functions}

<<Skip comments and empty records>>=
next if /^\#/o;
next if /^\s*$/o;
chomp;
@

<<Common PERL subs - Min Max>>=
#
sub max() {
    my $z = shift @_;
    foreach my $l (@_) { $z = $l if $l > $z };
    return $z;
} # max
sub min() {
    my $z = shift @_;
    foreach my $l (@_) { $z = $l if $l < $z };
    return $z;
} # min
@

<<Common PERL subs - Text fill>>=
#
sub fill_right() { $_[0].($_[2] x ($_[1] - length($_[0]))) }
sub fill_left()  { ($_[2] x ($_[1] - length($_[0]))).$_[0] }
sub fill_mid()   { 
    my $l = length($_[0]);
    my $k = int(($_[1] - $l)/2);
    ($_[2] x $k).$_[0].($_[2] x ($_[1] - ($l+$k)));
} # fill_mid
@

These functions are used to report to STDERR a single char for each record processed (useful for reporting parsed records).

<<Common PERL subs - Counter>>=
#
sub counter { # $_[0]~current_pos++ $_[1]~char
    print STDERR "$_[1]";
    (($_[0] % 50) == 0) && (print STDERR "[".&fill_left($_[0],6,"0")."]\n");
} # counter
#
sub counter_end { # $_[0]~current_pos   $_[1]~char
    (($_[0] % 50) != 0) && (print STDERR "[".&fill_left($_[0],6,"0")."]\n");
} # counter_end
@

<<Global Vars - Counter>>=
my ($n,$c); # counter and char (for &counter function)
@ %def $n $c


\subsubsctn{Common functions for reporting program processes}
\label{sec:messagerpt}

Function '[[report]]' requires that a hash variable '[[%MessageList]]' has been set, such hash contains the strings for each report message we will need. The first parameter for '[[report]]' is a key for that hash, in order to retrieve the message string, the other parameters passed are processed by the [[sprintf]] function on that string.

<<Common PERL subs - STDERR>>=
sub report() { print STDERR sprintf($MessageList{ shift @_ },@_) }
@

The same happens to '[[warn]]' function which also requires a hash variable '[[%ErrorList]]' containing the error messages.

<<Common PERL subs - STDERR>>=
sub warn() { print STDERR sprintf($ErrorList{ shift @_ }, @_) }
@

\subsctn{AWK scripts}

<<GAWK shebang>>=
#!/usr/bin/gawk -f
# GNU Awk 3.0.4
<<Version Control Id Tag>>
@

<<gp2gff.awk>>=
<<GAWK shebang>>
# Transfor the goldenpath format to gff file for the cds coordinates.
# USAGE: gp2gff goldenpath_file
# rguigo Monday 22 October 2001
BEGIN{
    OFS="\t";
    source="refseq";
    feature="cds";
    score=".";
    frame=".";

}
{
    gsub (","," ");
    seqname=$2;
    strand=$3;
    group=$1;

    ne=$8;   # number of exons
    cdsi=$6; # init of cds
    cdse=$7; # end of cds


#    print $0;

    for (i=1;i<=ne;i++) {
        exon[i,1]= $(9+i-1)+1;
        exon[i,2]= $(9+i+ne-1);
#       print exon[i,1], exon[i,2];
    }

    j=1;
    while (exon[j,2] < cdsi)
        j++;

    exon[j,1]=cdsi+1;

    k=j;
    while ((exon[k,1] < cdse) && (k<=ne))
        k++;
    k--
    exon[k,2]=cdse;
#    print "***", ne, j, k;
    for (i=j;i<=k;i++)
        print seqname, source,feature, exon[i,1], exon[i,2],score,strand,frame,group;
 
}
@ 

\subsctn{BASH scripts}

<<BASH shebang>>=
#!/usr/bin/bash
# GNU bash, version 2.03.6(1)-release (i386-redhat-linux-gnu)
<<Version Control Id Tag>>
#
SECONDS=0 # Reset Timing
# Which script are we running...
L="####################"
{ echo "$L$L$L$L";
  echo "### RUNNING [$0]";
  echo "### Current date:`date`";
  echo "###"; } 1>&2;
@

<<BASH script end>>=
{ echo "###"; echo "### Execution time for [$0] : $SECONDS secs";
  echo "$L$L$L$L";
  echo ""; } 1>&2;
#
exit 0
@

\subsctn{Version control tags}

This document is under Revision Control System (RCS). The version you are currently reading is the following:

<<Version Control Id Tag>>=
# $Id: Human_Chromosome_21.nw,v 1.8 2001-12-24 12:17:12 gparra Exp $
@ 

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Extracting code blocks from this document}

>From this file we can obtain both the code and the
documentation. The following instructions are needed:

\subsctn{Extracts Script code chunks from the {\noweb} file} % \\[-0.5ex]

Remember when tangling that '-L' option allows you to include program line-numbering relative to original {\noweb} file. Then the first line of the executable files is a comment, not a shebang, and must be removed to make scripts runnable.

<<tangling>>=
# showing line numbering comments in program
notangle -L -R"Human_Chromosome_21" $WORK/$nwfile.nw | \
    perl -ne '$.>1 && print' | cpif $BIN/Human_Chromosome_21 ;
chmod a+x $BIN/Human_Chromosome_21 ;
@ 

<<tangling>>=
# reformating program with perltidy
notangle -R"Human_Chromosome_21" $WORK/$nwfile.nw | \
    perltidy - | cpif $BIN/Human_Chromosome_21 ;
# html pretty-printing program with perltidy
notangle -R"Human_Chromosome_21" $WORK/$nwfile.nw | \
    perltidy -html - | cpif $DOCS/html/Human_Chromosome_21.html ;
#
@ 

\subsctn{Extracting different Config Files} % \\[-0.5ex]

<<tangling>>=
notangle -R"root" $WORK/$nwfile.nw | \
         cpif $DATA/root_config ;
@ %$

\subsctn{Extracting documentation and \LaTeX{}'ing it} % \\[-0.5ex] %'

<<tangling>>=
notangle -Rweaving  $WORK/$nwfile.nw | cpif $WORK/nw2tex ;
notangle -RLaTeXing $WORK/$nwfile.nw | cpif $WORK/ltx ;
chmod a+x $WORK/nw2tex $WORK/ltx;
@ 

<<tangling complementary LaTeX files>>=
notangle -R"HIDE: LaTeX new definitions" $WORK/$nwfile.nw | cpif $DOCS/defs.tex ;
notangle -R"HIDE: TODO" $WORK/$nwfile.nw | cpif $DOCS/todo.tex ; 
@ 

<<weaving>>=
<<BASH shebang>>
# weaving and LaTeXing
<<BASH Environment Variables>>
<<tangling complementary LaTeX files>>
noweave -v -t4 -delay -x -filter 'elide "HIDE: *"' \
        $WORK/$nwfile.nw | cpif $DOCS/$nwfile.tex ;
# noweave -t4 -delay -index $WORK/$nwfile.nw > $DOCS/$nwfile.tex 
pushd $DOCS/ ;
#
latex $nwfile.tex ;
dvips $nwfile.dvi -o $nwfile.ps -t a4 ;
#
popd;
<<BASH script end>>
@ 

<<LaTeXing>>=
<<BASH shebang>>
# only LaTeXing
<<BASH Environment Variables>>
pushd $DOCS/ ;
#
echo "### RUNNING LaTeX on $nwfile.tex" 1>&2 ;
latex $nwfile.tex ; 
latex $nwfile.tex ; 
latex $nwfile.tex ;
dvips $nwfile.dvi -o $nwfile.ps -t a4 ;
#
# pdflatex $nwfile.tex ;
echo "### CONVERTING PS to PDF: $nwfile" 1>&2 ;
ps2pdf $nwfile.ps $nwfile.pdf ;
#
popd ;
<<BASH script end>>
@ %$

\subsctn{Defining shell functions for the current project} % \\[-0.5ex]

<<BASH Functions Block>>=
<<BASH Basic Shell Functions>>
@ 

\begin{comment}
@<<BASH Functions: GTF to GFF>>
@<<BASH Functions: Gene-Prediction Evaluation>>
@<<BASH Functions: Running GENEID>>
@<<BASH Functions: Running GENEID + Evidences>>
@<<BASH Functions: Filtering GENEID RAW Output>>
@<<BASH Functions: Running SGP>>
@<<BASH Functions: SGP + Evidences>>
@<<BASH Functions: Preparing SGP Output>>
@<<BASH Functions: Predicted Genes Boundaries>>
@<<BASH Functions: Running GFF2PS>>
\end{comment}
 

<<BASH Basic Shell Functions>>=
#
# BASIC Shell Functions
#
ChckDirs ()
{
  #
  # USAGE: ChckDirs <path_list>
  #
  for name in "$@" ;
    do {
         [ -d "$name" ] && 
           echo "### Directory Already Exist: $name" ||
             mkdir --verbose $name ;
      } ;
    done ;
}
#
renameSEQS ()
{
  #
  # USAGE: renameSEQS ls_command reg_exp substitution_value
  # Example: renameSEQS 'ls -1 HOXa*' '^HOXa' 'HOXA'
  #
  $1 | while read n ; 
    do {
      k=`echo $n | sed "s/$2/$3/"` ;
      [ -e "$n" ] && mv -v $n $k || echo "## FILE DOES NOT EXIST: $n" ;
    } ;
    done ;
}
#
MergeFiles ()
{
  #
  # USAGE: MergeFiles <working_path>
  #
  echo "### REMOVING OLD FILES..." ;
  [ -e $1/all.Hsap ] && 
    /bin/rm --force --verbose $1/all.Hsap ;
  [ -e $1/all.Mmus ] &&
    /bin/rm --force --verbose $1/all.Mmus ;
  echo "### WORKING on HUMAN LOCI..." ;
  cat $HSAP | while read locus ;
    do { cat $1/$locus >> $1/all.Hsap ; } ; done ;
  echo "### WORKING on MOUSE LOCI..." ;
  cat $MMUS | while read locus ;
    do { cat $1/$locus >> $1/all.Mmus ; } ; done ;
  echo "### MERGING HUMAN and MOUSE..." ;
  cat $1/all.Hsap $1/all.Mmus > $1/all ;
}
#
MergeGFF () 
{
  #
  # USAGE: MergeGFF <working_path> <species_id> <flag>
  #
  flag=0 ;
  [ "$3" = "1" ] && flag=1 ; 
  echo "### REMOVING OLD FILES..." ;
  [ -e $1/all.$2 ] && 
    /bin/rm --force --verbose $1/all.$2 ;
  echo "### WORKING on $2 LOCI..." ;
  c=0 ;
  while read locus ;
    do {
         let c=c+1 ;
         [ $c -gt 1 ] && echo '#$ ' >> $1/all.$2 ;
         [ $flag -eq 1 ] &&
             cat $DATASETS/annotation/length/$locus >> $1/all.$2 ;
         gawk 'BEGIN{OFS="\t"}
             ($1 !~ /^#/ && $3 != "Gene") {
                 print $0;
             }' $1/$locus | sort +3n -5 - >> $1/all.$2 ; 
       } ;
    done < $DATASETS/id.$2 ;
}
#
MergeALLGFF () 
{
  #
  # USAGE: MergeGFF <working_path>
  #
  echo "### WORKING on HUMAN LOCI..." ;
  MergeGFF $1 Hsap 1 ;
  echo "### WORKING on MOUSE LOCI..." ;
  MergeGFF $1 Mmus 1 ;
  echo "### MERGING HUMAN and MOUSE..." ;
  echo '#$ ' | cat $1/all.Hsap - $1/all.Mmus > $1/all ;
}
@ 

\subsctn{Defining working shell variables for the current project} % \\[-0.5ex]

<<BASH Environment Variables>>=
#
# NOWEB Document Variables
# 
WORK="$HOME/development/projects/sgp/chr21" ;
BIN="$WORK/bin" ;
PARAM="$BIN/param" ;
DOCS="$WORK/docs" ;
DATA="$WORK/data" ;
nwfile="Human_Chromosome_21" ;
export WORK BIN PARAM DOCS DATA nwfile ;
#
# CHR22 Dataset Variables
#
DATASETS="/projects/datasets/chr21" ;
ANALYSIS="/projects/sgp/chr21" ;
SGPBIN="/projects/sgp/bin" ;
SGPPARAM="$SGPBIN/param" ;
#
ID="$DATASETS/id" ;
HSAP="$DATASETS/id.Hsap" ;
MMUS="$DATASETS/id.Mmus" ;
#
ENSCRIPT="enscript -1C -Gjf Courier7 -M A4" ;
#
export DATASETS ANALYSIS SGPBIN SGPPARAM ID HSAP MMUS ENSCRIPT ;
#
SPLICING="/projects/splicing/chr21" ;
export SPLICING ;
# Allowing for users and group file permisions
umask 002;
@ 

<<BASH RC FILE>>=
<<BASH Environment Variables>>
<<BASH Functions Block>>
@ 

<<tangling>>=
#
# BASH shell
notangle -R'BASH RC FILE' $WORK/$nwfile.nw | \
         cpif $WORK/.bash_VARS ; 
source $WORK/.bash_VARS ;
#
@

%
\end{document}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
