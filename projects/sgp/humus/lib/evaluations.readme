#
# $Id: evaluations.readme,v 1.1 2002-08-09 14:50:06 jabril Exp $
#

#**#
#### INITIALIZATION
#**#

BIN="/usr/local/molbio/share/sgp/bin" ;
BDIR="/projects/H.sapiens/eval.Hsap20011222_Mmus20020411" ;

HDIR="$BDIR/Hsap" ;
MDIR="$BDIR/Mmus" ;
mkdir --verbose $BDIR $HDIR $MDIR ;

egrep -v '_random|chrUn' $HUMUS/seqid_list > $HDIR.seqid ;
egrep -v '_random|chrUn' $MUSHU/seqid_list > $MDIR.seqid ;

#**#
#### PREPARING CHR DIRS
#**#
ODIR=$HDIR ;
#**#
ODIR=$MDIR ;
#**#
gawk '{print $2}' $ODIR.seqid | \
  while read seq ; 
    do {
      mkdir --verbose $ODIR/$seq ;
      } ;
    done ;
# 
gawk '{print $1,$2,$3}' $ODIR.seqid | \
  while read chr seq len ; 
    do {
      perl -e '($c,$s,$l) = @ARGV;
               printf "chr%s\t%s\tlength\t1\t%d\t.\t.\t.\t.\n",$c,$s,$l ;
              ' $chr $seq $len > $ODIR/$seq/seqlength.gff ;
      } ;
    done ;
# 

#**#
#### PREPARING GFF FILES
#**#
MFLAG=0 ;
KDIR="/projects/H.sapiens/20011222.UCSCgp" ;
N1="refseq" ;   D1="##SEQ##/annotation/20011222/$N1/##SEQ##.fullgff" ;
N2="ensembl" ;  D2="##SEQ##/annotation/20011222/$N2/##SEQ##.fullgff" ;
N3="genscan" ;  D3="##SEQ##/annotation/20011222/$N3/##SEQ##.fullgff" ;
N4="geneid" ;   D4="##SEQ##/$N4/20011222/gff/##SEQ##" ;
N5="twinscan" ; D5="##SEQ##/$N5/20020613/gff/##SEQ##.gff" ;
N6="sgp" ;      D6="##SEQ##/$N6/20011222.UCSCgp-20020411.MGSCv3/gff/##SEQ##" ;
ODIR=$HDIR ;
#**#
MFLAG=1 ;
KDIR="/projects/M.musculus/20020411.MGSCv3" ;
N1="refseq" ;   D1="##SEQ##/annotation/$N1/##SEQ##.fullgff" ;
N2="ensembl" ;  D2="##SEQ##/annotation/$N2/##SEQ##.transcriptsID.gff" ;
N3="genscan" ;  D3="##SEQ##/annotation/$N3/##SEQ##.eval.fullgff" ;
N4="geneid" ;   D4="##SEQ##/$N4/20020425msk/gff/##SEQ##" ;
N5="twinscan" ; D5="##SEQ##/$N5/20020613/gff/##SEQ##.gff" ;
N6="sgp" ;      D6="##SEQ##/$N6/20020425/gff/##SEQ##" ;
ODIR=$MDIR ;
gawk '{print $2}' $ODIR.seqid | \
  while read seq ; 
    do {
      echo "# Working on SEQ $seq" 1>&2 ;
      YDIR="$KDIR/$seq/annotation/ensembl" ;
      gawk '$0 !~ /^#|^[ \t]*$/ {
            $1="chr"$1; 
            a=$9;   b=$10;
            $9=$11; $10=$12""b; gsub("\";\"",".",$10);
            $11=a;  $12=b;
            print $0 }' $YDIR/$seq.gtf > $YDIR/$seq.transcriptsID.gtf ;
      $BIN/gtf2gff.pl $YDIR/$seq.transcriptsID.gtf \
                    > $YDIR/$seq.transcriptsID.gff ;
      } ;
    done
#**#
gawk '{print $2}' $ODIR.seqid | \
  while read seq ; 
    do {
      #
      G="$ODIR/$seq" ;
      DD1=`perl -e '($d,$s) = @ARGV; $d=~s/##SEQ##/$s/g; print $d' $D1 $seq` ;
      DD2=`perl -e '($d,$s) = @ARGV; $d=~s/##SEQ##/$s/g; print $d' $D2 $seq` ;
      DD3=`perl -e '($d,$s) = @ARGV; $d=~s/##SEQ##/$s/g; print $d' $D3 $seq` ;
      DD4=`perl -e '($d,$s) = @ARGV; $d=~s/##SEQ##/$s/g; print $d' $D4 $seq` ;
      DD5=`perl -e '($d,$s) = @ARGV; $d=~s/##SEQ##/$s/g; print $d' $D5 $seq` ;
      DD6=`perl -e '($d,$s) = @ARGV; $d=~s/##SEQ##/$s/g; print $d' $D6 $seq` ;
      #
      $BIN/transgff.pl -v --GRP --OVL $KDIR/$DD1 > $G/$N1.fullgff ;
      # we must pre-process ensembl Mmus data as contain several transcripts x gene
      if [ $MFLAG -eq 1 ] ;
        then
          echo "# Working on MOUSE ENSEMBL DATA..." 1>&2 ;
          $BIN/transgff.pl -v --GRP --OVL --FIT "CDS" \
                                      $KDIR/$DD2 > $G/$N2.fullgff ;
        else
          echo "# Working on HUMAN ENSEMBL DATA..." 1>&2 ;
          $BIN/transgff.pl -v --GRP --OVL \
                                      $KDIR/$DD2 > $G/$N2.fullgff ;
      fi ;
      $BIN/transgff.pl -v --GRP --OVL $KDIR/$DD3 > $G/$N3.fullgff ;
      cp -v $KDIR/$DD4 $G/$N4.fullgff 2>&1 ;
      $BIN/transgff.pl -v --GRP --OVL $KDIR/$DD5 > $G/$N5.fullgff ;
      cp -v $KDIR/$DD6 $G/$N6.fullgff 2>&1 ;
      #
      for K in $N1 $N2 $N3 $N4 $N5 $N6 ;
        do {
          gawk 'BEGIN{ OFS="\t" }
                $0 !~ /^#|^[ \t]*$/ &&
                  tolower($3) ~ /single|first|internal|terminal/ {
                    print $0; }' $G/$K.fullgff > $G/$K.gff ;
        } ; done ;
      #
      $BIN/gffsplitstrand.pl -l $G/seqlength.gff $G/$N1.gff ;
      $BIN/gffsplitstrand.pl -l $G/seqlength.gff $G/$N2.gff ;
      $BIN/gffsplitstrand.pl $G/$N3.gff $G/$N4.gff $G/$N5.gff $G/$N6.gff ;
      #
      } ;
    done 1>&2 2> $ODIR.rpt ;
# 

#**#
#### SINGLE-SEQ SUMMARY
#**#
ODIR=$HDIR ;
SP="Hsap" ;
SPC="Homo sapiens 20011222 UCSC-GoldenPath assembly" ;
SPV="20011222_UCSCGP" ;
#**#
ODIR=$MDIR ;
SP="Mmus" ;
SPC="Mus musculus 20020411 MGSCv3 assembly" ;
SPV="20020411_MGSCv3" ;
#
gawk '$1!~/^\#/ {print $1, $2}' $ODIR.seqid | \
  while read CHR SEQ ;
    do {
      SDIR="$ODIR/$SEQ" ;
      echo "### WORKING ON CHR $CHR : SEQ $SEQ" 1>&2 ;
      for PRG in "GENSCAN" "GENEID" "TWINSCAN" "SGP" ;
        do {
          ###
          prg=`echo $PRG | tr [A-Z] [a-z]` ;
          ###
          /bin/rm -vf $SDIR/$prg.eval.rpt ;
          cat > $SDIR/$prg.eval <<EOT ;
#
# $SPC
#
# EVALUATION SUMMARY RESULTS: $PRG on $TST for CHROMOSOME $CHR (SEQ[$SEQ]) 
#
EOT
          ###
          for TST in "REFSEQ" "ENSEMBL" ;
            do {
              ###
              tst=`echo $TST | tr [A-Z] [a-z]` ;
              ###
              for STR in "FWD" "REV" ;
                do {
                  ###
                  str=`echo $STR | tr [A-Z] [a-z]` ;
                  ###
                  echo "# EVALUATING $PRG on $TST for SEQ $SEQ ($STR)" 1>&2 ;
                  ###
                  T="${SEQ}::${SP}${PRG}::${TST}::${STR}::${PRG}::.::${SPV}"
                  $BIN/runeval.pl $SDIR/$tst.$str.gff $SDIR/$prg.$str.gff \
                          "$T" >> $SDIR/$prg.eval 2>> $SDIR/$prg.eval.rpt ;
                  ###
                }; done; # for STR
              ###
            }; done; # for TST
        }; done; # for PRG
    }; done; # while CHR SEQ
#

#**#
#### WHOLE SUMMARY
#**#
ODIR=$HDIR ;
#**#
ODIR=$MDIR ;
#
gawk '$1!~/^\#/ {print $1, $2}' $ODIR.seqid | \
  while read CHR SEQ ;
    do {
      #
      echo "### WORKING ON $SEQ" ;
      SDIR="$ODIR/$SEQ" ;
      #
      nprg="genscan" ;
      gprg="geneid" ;
      tprg="twinscan" ;
      sprg="sgp" ;
      #
      cat $SDIR/$nprg.eval \
          $SDIR/$gprg.eval \
          $SDIR/$tprg.eval \
          $SDIR/$sprg.eval ; 
    };
  done > $ODIR/allseqs.eval ;
#
enscript -1rGjf Courier5 -M A4 $ODIR/allseqs.eval ;
#
$BIN/process_eval.pl -T "REFSEQ ENSEMBL" -P "GENSCAN GENEID TWINSCAN SGP" \
                     -as $ODIR/allseqs.eval > $ODIR/allseqs_prog.summary ;
$BIN/process_eval.pl -T "REFSEQ ENSEMBL" -P "GENSCAN GENEID TWINSCAN SGP" \
                     -tas $ODIR/allseqs.eval > $ODIR/allseqs_test.summary ;
enscript -1rGjf Courier5 -M A4 $ODIR/allseqs_prog.summary ;
enscript -1rGjf Courier5 -M A4 $ODIR/allseqs_test.summary ;
#

#**#
#### Preparing data for R
#**#
ODIR=$HDIR ;
SP="HSAP" ;
#**#
ODIR=$MDIR ;
SP="MMUS" ;
# 
gawk 'BEGIN{ OFS=" "; sq="???"; sp=ARGV[1]; ARGV[1]=""; pflg=0 }
      $0 ~ /^### CHR/ { sq=$5 }
      $0 ~ /^### SUMMARY/ { sq=$4 }
      $0 !~ /^#|^[ \t]*$/ { if ($1 == "PROGRAM" && pflg) { next }
                            else {
                              pflg=1;
                              if ($1 == "PROGRAM") {
                                 $2=$2" SPECIES SEQ";
                                 gsub(/^[ \t]+/,"",$0);
                                 print $0; next;
                              }; 
                            }; 
                            gsub(/^[ \t]+/,"",$0);
                            $2=$2" "sp" "sq;
                            print $0 }
      ' $SP $ODIR/allseqs_test.summary > $ODIR/allseqs_test.Rdata ;
#

#**#
# Merging Hmus and Mmus evaluations
#**#
mkdir --verbose $BDIR/Rboxplots.GP_x_HmusMmus ;
gawk 'BEGIN{ OFS=" "; pflg=0 }
      $0 !~ /^#|^[ \t]*$/ { if ($1 == "PROGRAM" && pflg) { next }
                            else { pflg=1 }; 
                            print $0;
      }' $HDIR/allseqs_test.Rdata \
         $MDIR/allseqs_test.Rdata \
       > $BDIR/Rboxplots.GP_x_HmusMmus/allseqs_test.Rdata ;
#

###
### R ANALYSIS
###
# boxplot extended functions library
source("/usr/local/molbio/share/sgp/bin/bpm.R") ; 
#
# setting configuration for Rboxplots.GP_x_HmusMmus
VSETS <- list(
     VARS = c("SN", "SP", "CC",
              "SNe","SPe","SNSP",   "raME","raWE",
              "SNg","SPg","SNSPg",  "raMG","raWG",  "raJG","raSG"),
     # PCHK = c("SRs"),
     # VCHK <- list( SRs = c("SN","SP","CC") ),
     APAR = list(
               default = list(YLIM=c(0.0,1.0),YDIV=0.1),
           SNg.ENSEMBL = list(YLIM=c(0.0,0.01),YDIV=0.001),
           SNg.REFSEQ  = list(YLIM=c(0.0,0.3),YDIV=0.05),
           SPg.ENSEMBL = list(YLIM=c(0.0,0.01),YDIV=0.001),
           SPg.REFSEQ  = list(YLIM=c(0.0,0.3),YDIV=0.05),
         SNSPg.ENSEMBL = list(YLIM=c(0.0,0.01),YDIV=0.001),
         SNSPg.REFSEQ  = list(YLIM=c(0.0,0.3),YDIV=0.05),
                  raJG = list(YLIM=c(1.0,1.5),YDIV=0.05),
          raSG.ENSEMBL = list(YLIM=c(1.0,1.5),YDIV=0.05),
          raSG.REFSEQ  = list(YLIM=c(1.0,1.7),YDIV=0.05),
             ),
     ); # VSETS
#
factor.ord <- c("GENSCAN","TWINSCAN","SGP")
factor.lbl <- c("GENSCAN","TWINSCAN","SGP")
factor.col <- c()
#
# subfactor.ord <- c("HSAP","MMUS")
subfactor.ord <- c("HSAP","MMUS")
subfactor.lbl <- c("Hsap","Mmus")
subfactor.col <- c("slateblue","orange")
#
chrs.Hsap <- c("1","2","3","4","5","6","7","8","9","10",
               "11","12","13","14","15","16","17","18","19","20",
               "21","22","X","Y")
chrs.Mmus <- c("1","2","3","4","5","6","7","8","9","10",
               "11","12","13","14","15","16","17","18","19",
               "X","Y")
#
SPECIES.factor <- list(
  .prop = list(
      ELNUM = length(factor.ord),
      ORDER = factor.ord, # is.vect
      LABEL = factor.lbl, # is.vect
      COLOR = factor.col, # is.vect
      FG.COLOR = "black",
      BG.COLOR = NULL,
      LABEL.SHOW  = TRUE,
      LABEL.COLOR = "black", # c("red","blue","green"),
      BASELINE.SHOW  = TRUE,
      BASELINE.COLOR = "black", # c("red","blue","green"),
      DATA.SHOW   = TRUE,
      DATA.COLOR  = NULL,
      OUTLAYER.SHOWLABEL = TRUE,
      ), # .factor$.prop
  .subfactor = list(
      .prop = list(
          ELNUM = length(subfactor.ord),
          ORDER = subfactor.ord,
          LABEL = subfactor.lbl,
          LABEL.SHOW = TRUE,
          COLOR = subfactor.col,
          MEANS.left    = list( shw=FALSE,
                                lbl=NULL  ),
          MEANS.center  = list( shw=FALSE,
                                lbl=NULL  ),
          MEANS.right   = list( shw=FALSE,
                                lbl=NULL  ),
          TOTALS.left   = list( shw=FALSE,
                                lbl=NULL  ),
          TOTALS.center = list( shw=FALSE,
                                lbl=NULL  ),
          TOTALS.right  = list( shw=FALSE,
                                lbl=NULL  ),
          ), # .factor$.subfactor$.prop
      HSAP.prop = list(
          ELNUM = length(chrs.Hsap),
          ORDER = paste("chr",chrs.Hsap,sep=""),
          LABEL = chrs.Hsap,
          COLOR = "slateblue",
          DATA.COLOR = "darkcyan",
          ), # .factor$.subfactor$HSAP.prop
      MMUS.prop = list(
          ELNUM = length(chrs.Mmus),
          ORDER = paste("chr",chrs.Mmus,sep=""),
          LABEL = chrs.Mmus,
          COLOR = "orange",
          DATA.COLOR = "gold",
          ), # .factor$.subfactor$MMUS.prop
      ), # .factor$.subfactor
  ) # .factor 
###
### HUMAN-MOUSE DATA
###
IPATH <- "/projects/H.sapiens/eval.Hsap20011222_Mmus20020411/";
PSDIR <- paste(IPATH,"Rboxplots.GP_x_HmusMmus/", sep="");
WFILE <- paste(PSDIR,"allseqs_test.Rdata", sep="");
###
### BOX-PLOTS
###
W <- read.table(WFILE, header=TRUE, sep=" ", as.is=FALSE, na.strings="nan");
w <- split(W,W$TESTSET);
#
source("/usr/local/molbio/share/sgp/bin/bpm.R") ;
for (testset in levels(factor(W$TESTSET))) {
  cat(paste("## PROCESSING DATA FOR TESTSET: ",testset,"...\n", sep=""));
  T <- w[[testset]];
  for (vo in 1:length(VSETS$VARS)) {
    varname <- VSETS$VARS[[vo]];
    cat(paste("##--------------------------> VAR: ",varname,
               " <--------------------------##\n", sep=""));
    Z <- data.frame(cbind(FACTOR    = as.character(T$PROGRAM),
                          SUBFACTOR = as.character(T$SPECIES),
                          ELEMENT   = as.character(T$SEQ),
                          VAR       = as.real(as.character(T[[varname]]))
                          )
                    ); # Z
    #
    tvar <- paste(varname,".",testset,sep="");
    fvar <- if (is.list(VSETS$APAR[[tvar]])) {
                VSETS$APAR[[tvar]];
            } else {
                if (is.list(VSETS$APAR[[varname]])) {
                    VSETS$APAR[[varname]];
                } else {
                    if (is.list(VSETS$APAR$default)) {
                        VSETS$APAR$default;
                    } else {
                        NULL;
                    };
                };
            };
    #
    FOUT <- paste(PSDIR,"HsapMmus_",testset,"_",varname,".ps", sep="") ;
    #
    plot.new() ;
    # def.par <- par(ask=TRUE) ;# save default, for resetting...
    def.par <- par(ask=FALSE) ;# save default, for resetting...
    #
    # BEGIN plot
    postscript(file=FOUT, paper="a4", horizontal=FALSE) ; 
    #
    # nf <- layout(matrix(c(1,2),1,2, byrow=TRUE),
    #              widths=c(lcm(18),lcm(8)),
    #              heights=c(lcm(12),lcm(12)), respect=TRUE) ;
    # layout.show(nf)
    par(ps=10, bg="white", bty="o", font=2, 
        col.axis="blue", font.axis=1, cex.lab=0.5, las=1);
    #
    boxplot.multi(Z,bpm.conf=SPECIES.factor,
                  notch=TRUE,ylim=fvar$YLIM,ydiv=fvar$YDIV);
    #
    text(3.25,fvar$YLIM[2] + (fvar$YDIV/2),
         paste("Gene-Prediction Evaluation on ",testset,
               " Test-Set  ( ",varname," )", sep=""),
         col = "black", font = 2, cex=1.65, adj=0.5);  
    text(3.25,fvar$YLIM[2] + (fvar$YDIV/4),
         "Chromosome labels are shown for outlayer values.",
         col = "black", font = 2, cex=1.15, adj=0.5);  
    #
    text(0.35,fvar$YLIM[2] - fvar$YDIV * 0.25,
         paste(varname," on ",testset, sep=""),
         col = "black", font = 2, cex=1.65, adj=0);
    par(font = 4);
    legend(6.4, fvar$YLIM[2] - fvar$YDIV * 0.25,
           subfactor.lbl, bty = "n",
           fill = subfactor.col, horiz = TRUE, # ncol = length(subfactor.lbl),
           xjust = 1, yjust = 0.5, cex=1.15);
    #
    dev.off(); # closing PostScript device
    #
    par(def.par); #- reset to default
    #
  }; # for varname
}; # for testset


