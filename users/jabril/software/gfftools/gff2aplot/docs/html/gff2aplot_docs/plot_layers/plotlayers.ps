%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: plotlayers.dvi
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips plotlayers.dvi -o plotlayers.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2003.06.03:1648
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (plotlayers.dvi)
@start
%DVIPSBitmapFont: Fa cmbx10 10 20
/Fa 20 123 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D0D798C1B
>46 D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A
6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A
12FF5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003F
E0032A257DA42E>97 D<13FFB5FCA412077EAF4AB47E020F13F0023F13FC9138FE03FFDA
F00013804AEB7FC00280EB3FE091C713F0EE1FF8A217FC160FA217FEAA17FCA3EE1FF8A2
17F06E133F6EEB7FE06E14C0903AFDF001FF80903AF8FC07FE009039F03FFFF8D9E00F13
E0D9C00390C7FC2F3A7EB935>I<903801FFC0010F13FC017F13FFD9FF8013802603FE00
13C048485AEA0FF8121F13F0123F6E13804848EB7F00151C92C7FC12FFA9127FA27F123F
ED01E06C7E15036C6CEB07C06C6C14806C6C131FC69038C07E006DB45A010F13F0010113
8023257DA42A>I<EE7F80ED7FFFA4150381AF903801FF81010F13F1013F13FD9038FFC0
7F0003EB001FD807FC1307000F8048487F5B123FA2485AA312FFAA127FA27F123FA26C6C
5B000F5C6C6C5B6C6C4913C02701FF80FD13FE39007FFFF9011F13E1010313012F3A7DB9
35>I<903803FF80011F13F0017F13FC3901FF83FE3A03FE007F804848133F484814C000
1FEC1FE05B003FEC0FF0A2485A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E1678
121F6C6C14F86D14F000071403D801FFEB0FE06C9038C07FC06DB51200010F13FC010113
E025257DA42C>I<EC1FF0903801FFFC010713FF90391FF87F8090383FE0FFD9FFC113C0
A2481381A24813016E1380A2ED3E0092C7FCA8B6FCA4000390C8FCB3ABB512FEA4223A7D
B91D>I<161FD907FEEBFFC090387FFFE348B6EAEFE02607FE07138F260FF801131F4848
6C138F003F15CF4990387FC7C0EEC000007F81A6003F5DA26D13FF001F5D6C6C4890C7FC
3907FE07FE48B512F86D13E0261E07FEC8FC90CAFCA2123E123F7F6C7E90B512F8EDFF80
16E06C15F86C816C815A001F81393FC0000F48C8138048157F5A163FA36C157F6C16006D
5C6C6C495AD81FF0EB07FCD807FEEB3FF00001B612C06C6C91C7FC010713F02B377DA530
>I<EA01F0EA07FC487EA2487EA56C5AA26C5AEA01F0C8FCA913FF127FA412077EB3A9B5
12F8A4153B7DBA1B>105 D<13FFB5FCA412077EB3B3ACB512FCA4163A7DB91B>108
D<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F0
3FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291
C75BB3A3B5D8FC1FB50083B512F0A44C257DA451>I<01FEEB7FC000FF903803FFF8020F
13FE91381F03FFDA3C011380000713780003497E6D4814C05CA25CA291C7FCB3A3B5D8FC
3F13FFA430257DA435>I<903801FFC0010F13F8017F13FFD9FF807F3A03FE003FE04848
6D7E48486D7E48486D7EA2003F81491303007F81A300FF1680A9007F1600A3003F5D6D13
07001F5DA26C6C495A6C6C495A6C6C495A6C6C6CB45A6C6CB5C7FC011F13FC010113C029
257DA430>I<9039FF01FF80B5000F13F0023F13FC9138FE07FFDAF00113800007496C13
C06C0180EB7FE091C713F0EE3FF8A2EE1FFCA3EE0FFEAA17FC161FA217F8163F17F06E13
7F6E14E06EEBFFC0DAF00313809139FC07FE0091383FFFF8020F13E0020390C7FC91C9FC
ACB512FCA42F357EA435>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000
075B6C6C5A5CA29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>
114 D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15
787E7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F903800
7FFE140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F8
140038E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA30003
90C7FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB4
25>I<B539F01FFFF0A4000390398003F8006C01C013E06C1407D97FE05B6D6C485A6E48
C7FC90381FFC3E010F5B903807FEFC6D6C5A5D6D5B6D5B6E7E6E7E814A7EA24A7E903801
F3FFD903E37FD907C17FEB0FC049486C7E4A6C7E013E80496D7E49130F00016E7EB59038
3FFFF8A42D257EA432>120 D<B539F001FFF8A4000390C7EA3F00161E6E133E6C153C6E
137C6C15786E13F8017F5CECF001013F5C14F8011F495AA2ECFC07010F5CECFE0F010791
C7FC6E5A6D131E15BE6D13BC15FC6D5BA36E5AA26E5AA26E5AA26E5AA292C8FCA25C141E
003F133E387F803C38FFC07C147814F8EBC1F0EBC3E06C485A387D1F80D83FFFC9FCEA1F
FCEA07F02D357EA432>I<003FB612C0A3D9F0031380EB800749481300003E5C003C495A
007C133F5D0078495A14FF5D495B5BC6485B92C7FC495A131F5C495A017FEB03C0EBFFF0
14E04813C05AEC80074813005A49EB0F80485A003F141F4848133F9038F001FFB7FCA322
257DA42A>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop -105 -220 2005 4 v -105 2587 4 2808 v -77 2562
a @beginspecial 0 @llx 0 @lly 595 @urx 842 @ury 3308
@rhi @setspecial
%%BeginDocument: plot_layers_bg.ps
%!PS-Adobe-3.0
%%Title: Empty Plot
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:01 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 34 dict D colordict begin %% using 6 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D

end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin white end } D /fg { colordict begin black end } D /ABc { colordict begin bg end } D /PBc { colordict begin bg end } D /QBc { colordict begin bg end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _f D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Empty Plot) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll () D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl () D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl () D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
pvtick
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 1897 2587 V -105 2590 2005 4 v 553 2662
a Fa(plot)p 724 2662 29 4 v 34 w(la)m(y)m(ers)p 996 2662
V 35 w(bg.ps)p 2000 -220 2005 4 v 2000 2587 4 2808 v
2028 2562 a @beginspecial 0 @llx 0 @lly 595 @urx 842
@ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_bgcol.ps
%!PS-Adobe-3.0
%%Title: Empty Plot
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:03 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 35 dict D colordict begin %% using 7 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /red { 0.00 0.60 0.60 0.00 } D
/lightred { 0.00 0.45 0.45 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin bg end } D /PBc { colordict begin bg end } D /QBc { colordict begin bg end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _f D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Empty Plot) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Setting background color to "lightblue".) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl () D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl () D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
pvtick
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 4001 2587 V 2000 2590 2005 4 v 2599 2662
a(plot)p 2770 2662 29 4 v 34 w(la)m(y)m(ers)p 3042 2662
V 35 w(bgcol.ps)p -105 2795 2005 4 v -105 5602 4 2808
v -77 5577 a @beginspecial 0 @llx 0 @lly 595 @urx 842
@ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_boxcol.ps
%!PS-Adobe-3.0
%%Title: Empty Plot
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:04 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 36 dict D colordict begin %% using 8 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _f D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Empty Plot) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Filling main plot boxes with "verylightblue" color.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl () D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl () D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
pvtick
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 1897 5602 V -105 5605 2005 4 v 469 5677
a(plot)p 640 5677 29 4 v 34 w(la)m(y)m(ers)p 912 5677
V 35 w(b)s(o)m(xcol.ps)p 2000 2795 2005 4 v 2000 5602
4 2808 v 2028 5577 a @beginspecial 0 @llx 0 @lly 595
@urx 842 @ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_grd.ps
%!PS-Adobe-3.0
%%Title: Empty Plot
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:05 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 36 dict D colordict begin %% using 8 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Empty Plot) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Switching GRID on \050all three plot boxes\051.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl () D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl () D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 4001 5602 V 2000 5605 2005 4 v 2638 5677
a(plot)p 2809 5677 29 4 v 33 w(la)m(y)m(ers)p 3080 5677
V 36 w(grd.ps)p eop
%%Page: 2 2
2 1 bop -105 -220 2005 4 v -105 2587 4 2808 v -77 2562
a @beginspecial 0 @llx 0 @lly 595 @urx 842 @ury 3308
@rhi @setspecial
%%BeginDocument: plot_layers_feat.ps
%!PS-Adobe-3.0
%%Title: Annotated Axes
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:07 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 36 dict D colordict begin %% using 8 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Annotated Axes) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Showing GFF annotation on both, X and Y, axes.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 1897 2587 V -105 2590 2005 4 v 525 2662
a Fa(plot)p 696 2662 29 4 v 34 w(la)m(y)m(ers)p 968 2662
V 35 w(feat.ps)p 2000 -220 2005 4 v 2000 2587 4 2808
v 2028 2562 a @beginspecial 0 @llx 0 @lly 595 @urx 842
@ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_featrib.ps
%!PS-Adobe-3.0
%%Title: Annotated Axes
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:09 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 37 dict D colordict begin %% using 9 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Annotated Axes) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Showing ribbons for all GFF-features.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 4001 2587 V 2000 2590 2005 4 v 2570 2662
a(plot)p 2741 2662 29 4 v 34 w(la)m(y)m(ers)p 3013 2662
V 35 w(featrib.ps)p -105 2795 2005 4 v -105 5602 4 2808
v -77 5577 a @beginspecial 0 @llx 0 @lly 595 @urx 842
@ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_featribln.ps
%!PS-Adobe-3.0
%%Title: Annotated Axes
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:10 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 37 dict D colordict begin %% using 9 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Annotated Axes) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Showing ribbons for all GFF-features.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% Finishing Y-sequence Ribbons
%
beginYseq
[ 175 275 450 600 725 850 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 1897 5602 V -105 5605 2005 4 v 426 5677
a(plot)p 597 5677 29 4 v 33 w(la)m(y)m(ers)p 868 5677
V 36 w(featribln.ps)p 2000 2795 2005 4 v 2000 5602 4
2808 v 2028 5577 a @beginspecial 0 @llx 0 @lly 595 @urx
842 @ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_prezm.ps
%!PS-Adobe-3.0
%%Title: Layers for Extra Custom-Features
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:11 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 37 dict D colordict begin %% using 9 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Layers for Extra Custom-Features) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Showing zoom area mark.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% Finishing Y-sequence Ribbons
%
beginYseq
[ 175 275 450 600 725 850 Rln
endseq
%
%%%% Extra features from custom files (PRE)...
%
beginaln
lightred 2 solid _f 100 400 600 900 xbox
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 4001 5602 V 2000 5605 2005 4 v 2579 5677
a(plot)p 2750 5677 29 4 v 33 w(la)m(y)m(ers)p 3021 5677
V 36 w(prezm.ps)p eop
%%Page: 3 3
3 2 bop -105 -220 2005 4 v -105 2587 4 2808 v -77 2562
a @beginspecial 0 @llx 0 @lly 595 @urx 842 @ury 3308
@rhi @setspecial
%%BeginDocument: plot_layers_pre.ps
%!PS-Adobe-3.0
%%Title: Layers for Extra Custom-Features \050PRE\051
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:13 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 42 dict D colordict begin %% using 14 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /darkviolet { 0.35 0.75 0.00 0.00 } D /lightviolet { 0.22 0.45 0.00 0.00 } D
/lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D /darkyellow { 0.00 0.00 0.75 0.00 } D /darkorange { 0.00 0.30 0.75 0.00 } D /red { 0.00 0.60 0.60 0.00 } D
/lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D /lightbrown { 0.15 0.40 0.55 0.00 } D 
end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.25 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Layers for Extra Custom-Features \050PRE\051) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Showing "extra" annotations that appear below any alignment.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% Finishing Y-sequence Ribbons
%
beginYseq
[ 175 275 450 600 725 850 Rln
endseq
%
%%%% Extra features from custom files (PRE)...
%
beginaln
lightred 2 solid _f 100 400 600 900 xbox
darkviolet 2 pt (dotted) lightviolet _t 150 350 150 350 xbox
lightbrown 2 pt (solid) darkyellow _t 75 75 0 400 600 xcir
lightbrown 1 pt (dashed) darkorange _t 100 50 45 700 200 xcir
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 1897 2587 V -105 2590 2005 4 v 535 2662
a Fa(plot)p 706 2662 29 4 v 34 w(la)m(y)m(ers)p 978 2662
V 35 w(pre.ps)p 2000 -220 2005 4 v 2000 2587 4 2808 v
2028 2562 a @beginspecial 0 @llx 0 @lly 595 @urx 842
@ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_aln.ps
%!PS-Adobe-3.0
%%Title: Alignment Features Layer
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:15 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 43 dict D colordict begin %% using 15 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /darkviolet { 0.35 0.75 0.00 0.00 } D /lightviolet { 0.22 0.45 0.00 0.00 } D
/darkblue { 0.75 0.75 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D /darkyellow { 0.00 0.00 0.75 0.00 } D /darkorange { 0.00 0.30 0.75 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D /lightbrown { 0.15 0.40 0.55 0.00 } D end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.35 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Alignment Features Layer) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (We are changing alignment features color too.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% Finishing Y-sequence Ribbons
%
beginYseq
[ 175 275 450 600 725 850 Rln
endseq
%
%%%% Extra features from custom files (PRE)...
%
beginaln
lightred 2 solid _f 100 400 600 900 xbox
darkviolet 2 pt (dotted) lightviolet _t 150 350 150 350 xbox
lightbrown 2 pt (solid) darkyellow _t 75 75 0 400 600 xcir
lightbrown 1 pt (dashed) darkorange _t 100 50 45 700 200 xcir
endseq
%
%%%% DATA ---> Alignment
%
beginaln
100 75 175 150 darkblue _f _f 0.125 aln
225 200 275 250 darkblue _f _f 0.625 aln
300 325 375 400 darkblue _f _f 0.500 aln
475 425 575 525 darkblue _f _f 1.000 aln
600 550 650 600 darkblue _f _f 0.750 aln
650 625 675 650 darkblue _f _f 0.000 aln
700 725 775 800 darkblue _f _f 1.000 aln
800 875 875 950 darkblue _f _f 0.250 aln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
100 0.40 175 0.40 darkblue _f _f 0.125 aln
225 0.60 275 0.60 darkblue _f _f 0.625 aln
300 0.55 375 0.55 darkblue _f _f 0.500 aln
475 0.75 575 0.75 darkblue _f _f 1.000 aln
600 0.65 650 0.65 darkblue _f _f 0.750 aln
650 0.35 675 0.35 darkblue _f _f 0.000 aln
700 0.75 775 0.75 darkblue _f _f 1.000 aln
800 0.45 875 0.45 darkblue _f _f 0.250 aln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 4001 2587 V 2000 2590 2005 4 v 2645 2662
a(plot)p 2816 2662 29 4 v 34 w(la)m(y)m(ers)p 3088 2662
V 35 w(aln.ps)p -105 2795 2005 4 v -105 5602 4 2808 v
-77 5577 a @beginspecial 0 @llx 0 @lly 595 @urx 842 @ury
3308 @rhi @setspecial
%%BeginDocument: plot_layers_alncol.ps
%!PS-Adobe-3.0
%%Title: Alignment Features Layer
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:16 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 43 dict D colordict begin %% using 15 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /darkviolet { 0.35 0.75 0.00 0.00 } D /lightviolet { 0.22 0.45 0.00 0.00 } D
/darkblue { 0.75 0.75 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D /darkyellow { 0.00 0.00 0.75 0.00 } D /darkorange { 0.00 0.30 0.75 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D /lightbrown { 0.15 0.40 0.55 0.00 } D end %% colordict
%% Ribbon color mode (cmyk/pattern)
/PG 0.5 D % "alpha" color blending factor 
/PS PG 2 mul D
<< /PaintType 2 /PatternType 1 /TilingType 1 /BBox [ PG neg PG neg PG PG ] /XStep PS /YStep PS /PaintProc { pop PG slw 0 setlinecap PG 2 div 0 m 0 PG rl K PG 2 div neg 0 m 0 PG neg rl K } >> matrix makepattern /HP X
<< /PaintType 2 /PatternType 1 /TilingType 1 /BBox [ PG neg PG neg PG PG ] /XStep PS /YStep PS /PaintProc { pop PG slw 0 setlinecap PG 2 div neg 0 m 0 PG rl K PG 2 div 0 m 0 PG neg rl K } >> matrix makepattern /VP X
[ /Pattern /DeviceCMYK ] setcolorspace
/rbxcol { H { HP } { VP } ie setcolor } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.35 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Alignment Features Layer) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Enabling ribbon colors pseudo-merge.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% Finishing Y-sequence Ribbons
%
beginYseq
[ 175 275 450 600 725 850 Rln
endseq
%
%%%% Extra features from custom files (PRE)...
%
beginaln
lightred 2 solid _f 100 400 600 900 xbox
darkviolet 2 pt (dotted) lightviolet _t 150 350 150 350 xbox
lightbrown 2 pt (solid) darkyellow _t 75 75 0 400 600 xcir
lightbrown 1 pt (dashed) darkorange _t 100 50 45 700 200 xcir
endseq
%
%%%% DATA ---> Alignment
%
beginaln
100 75 175 150 darkblue _f _f 0.125 aln
225 200 275 250 darkblue _f _f 0.625 aln
300 325 375 400 darkblue _f _f 0.500 aln
475 425 575 525 darkblue _f _f 1.000 aln
600 550 650 600 darkblue _f _f 0.750 aln
650 625 675 650 darkblue _f _f 0.000 aln
700 725 775 800 darkblue _f _f 1.000 aln
800 875 875 950 darkblue _f _f 0.250 aln
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
100 0.40 175 0.40 darkblue _f _f 0.125 aln
225 0.60 275 0.60 darkblue _f _f 0.625 aln
300 0.55 375 0.55 darkblue _f _f 0.500 aln
475 0.75 575 0.75 darkblue _f _f 1.000 aln
600 0.65 650 0.65 darkblue _f _f 0.750 aln
650 0.35 675 0.35 darkblue _f _f 0.000 aln
700 0.75 775 0.75 darkblue _f _f 1.000 aln
800 0.45 875 0.45 darkblue _f _f 0.250 aln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 1897 5602 V -105 5605 2005 4 v 482 5677
a(plot)p 653 5677 29 4 v 34 w(la)m(y)m(ers)p 925 5677
V 35 w(alncol.ps)p 2000 2795 2005 4 v 2000 5602 4 2808
v 2028 5577 a @beginspecial 0 @llx 0 @lly 595 @urx 842
@ury 3308 @rhi @setspecial
%%BeginDocument: plot_layers_post.ps
%!PS-Adobe-3.0
%%Title: Layers for Extra Custom-Features \050POST\051
%%Creator: gff2aplot
%%Version: v2.0
%%CreationDate: Tue Jun  3 16:42:17 2003
%%For: lopep
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EndComments
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                          GFF2APLOT                               %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    Converting alignments in GFF format to PostScript dotplots.
% 
%     Copyright (C) 1999-2003 - Josep Francesc ABRIL FERRANDO  
%                                       Thomas WIEHE                   
%                                      Roderic GUIGO SERRA       
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% $Id: plotlayers.ps,v 1.1 2003-06-05 17:54:29 jabril Exp $
%
% Report BUGS to: jabril@imim.es 
%
%%BeginProlog
%
%%BeginProcSet: Short_names 1.0 0
%
/B { bind def } bind def /X { exch def } B /D { def } B /_t { true } B /_f { false } B /S { gsave } B /R { grestore } B /F { scale } B /T { translate } B /m { moveto } B /rm { rmoveto } B /l { lineto } B /rl { rlineto } B /K { stroke } B /ie { ifelse } B /cmyk { setcmykcolor } B /slw { setlinewidth } B /solid { [ ] 0 setdash } D /dotted { [ 1 ] 0 setdash } D /ldotted { [ 1 2 ] 0 setdash } D /dashed { [ 3 3 ] 0 setdash } D /ldashed { [ 6 4 ] 0 setdash } D /ddashed { [ 4 3 1 3 ] 0 setdash } D
%
%%EndProcSet:   Short_names 1.0 0
%
%%BeginProcSet: Constants 1.0 0
%
/pt { } B /cm { 28.35 mul } B /icm { 28.35 div } B /in { 72 mul } B
/OST 0.25 cm D /OSB 0.25 cm D /OSL 0.25 cm D /OSR 0.25 cm D
%
%%EndProcSet:   Constants 1.0 0
%
%%BeginProcSet: Global_functions 1.0 0
%
/vflg _f D /tflg _f D tflg { mark } if
/msg { print (\n) print flush } B /mst { print counttomark dup { dup index 20 string cvs print ( ) print 1 sub } repeat (\n) print pop flush } B /msc { mst counttomark 1 add { pop } repeat } B
/bbox { 4 copy 3 1 roll exch 6 2 roll 8 -2 roll m l l l closepath } B
/obox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll add 7 1 roll add 6 1 roll sub 5 1 roll sub 4 1 roll bbox } B /ibox { 2 div dup dup dup 7 1 roll 5 1 roll 3 1 roll sub 7 1 roll sub 6 1 roll add 5 1 roll add 4 1 roll bbox } B
/min { 2 copy gt { exch } if pop } B /max { 2 copy lt { exch } if pop } B
/clim { min max } B /zlim { dup 0 eq { 3 { pop } repeat 0 } { clim } ie } B
/hip { dup mul exch dup mul add sqrt } B
%
%%EndProcSet:   Global_functions 1.0 0
%
%%BeginProcSet: Text_functions 1.0 0
%
/sfnt { findfont exch scalefont setfont } B
/glblw { sfnt (Z) stringwidth pop mul } B
/chrh { S newpath 0 0 m _f charpath flattenpath pathbbox exch pop 3 -1 roll pop R } B
/strh { 2 dict begin /lly 0.0 D /ury 0.0 D { ( ) dup 0 4 -1 roll put chrh dup ury gt { /ury X } { pop } ie dup lly lt { /lly X } { pop } ie } forall ury end } B
/ttshw { vflg { 9 copy 8 { pop } repeat mark exch dup length 20 gt { 0 20 getinterval (...) } if (ttshw -> ) msc } if S cmyk sfnt 8 dict begin /h X /v X /lbl X /angle X /y X /x X /hs lbl stringwidth pop D /vs lbl strh D x y T angle rotate h (rh) eq { hs } { h (ch) eq { hs 2 div } { 0 } ie } ie neg v (tv) eq { vs } { v (cv) eq { vs 2 div } { 0 } ie } ie neg m lbl show end R } B
%
%%EndProcSet:   Text_functions 1.0 0
%
%%BeginProcSet: Pseudohash_dicts 1.0 0
%
%% Fixed Color Variables (CMYK)
/colordict 43 dict D colordict begin %% using 15 colors + 28 definitions
/black { 0.00 0.00 0.00 1.00 } D /grey { 0.00 0.00 0.00 0.50 } D /verylightgrey { 0.00 0.00 0.00 0.30 } D /white { 0.00 0.00 0.00 0.00 } D /darkviolet { 0.35 0.75 0.00 0.00 } D /lightviolet { 0.22 0.45 0.00 0.00 } D
/darkblue { 0.75 0.75 0.00 0.00 } D /lightblue { 0.45 0.45 0.00 0.00 } D /verylightblue { 0.30 0.30 0.00 0.00 } D /darkyellow { 0.00 0.00 0.75 0.00 } D /darkorange { 0.00 0.30 0.75 0.00 } D
/red { 0.00 0.60 0.60 0.00 } D /lightred { 0.00 0.45 0.45 0.00 } D /verylightred { 0.00 0.30 0.30 0.00 } D /lightbrown { 0.15 0.40 0.55 0.00 } D end %% colordict
%% Ribbon color mode (cmyk/pattern)
/rbxcol { cmyk } B
%% Paper Sizes (in points)
/pagedict 3 dict D pagedict begin %% 1 formats + 2 definitions
/pga4{ 595 842 } D 
end %% pagedict
%
%%EndProcSet:   Pseudohash_dicts 1.0 0
%
tflg { (%%% Basic settings and functions were defined %%%) msg } if
%
%%BeginProcSet: Setting_Vars 1.0 0
%
tflg { (%%% Setting variables %%%) msg } if
/H _t D /HT { /H _t D } B /VT { /H _f D } B /flgcrd _t D /flglscape _f D /Pb _t D /Qb _t D /axesb _t D /XYR -1 D /ZM _f D
/Dpage { pagedict begin pga4 flglscape { exch } if end } D /PPC pagedict begin pga4 end hip Dpage hip exch div D /Ch 4 pt 15 pt 4 pt PPC mul clim D
/MT 1 cm D /MB 1 cm D /ML 1 cm D /MR 1 cm D
/bg { colordict begin lightblue end } D /fg { colordict begin black end } D /ABc { colordict begin verylightblue end } D /PBc { colordict begin verylightblue end } D /QBc { colordict begin verylightblue end } D
/XO 0 D /XE 1000 D /XD XE XO sub 1 add D /YO 0 D /YE 1000 D /YD YE YO sub 1 add D /PO 0.35 D /PE 0.75 D /PD PE PO sub D
/QO 0 D /QE 1 D /QD PE PO sub D
/Ph -1 pt D /Qh -1 pt D
/KGb _t D /KLb _t D /KAXb _t D /KAYb _t D /KPXb _t D /KPYb _t D /KQXb _t D /KQYb _t D
/KASm 100 D /KASn 20 D /KPSm 1 D /KPSn 0.25 D /KQSm 10 D /KQSn 10 D
/TTLb _t D /TTLl (Layers for Extra Custom-Features \050POST\051) D /TTLz 24 pt D /TTLf { TTLz /Helvetica-Bold } D /TTLp 10 pt 25 pt TTLz 2 div zlim D /TTlb _t D /TTll (Showing "extra" annotations that appear above any alignment.) D /TTlz 16 pt D /TTlf { TTlz /Helvetica } D /TTlp 10 pt 20 pt TTlz zlim D
/XSLb _t D /XSLl (X Sequence) D /XSLz 12 pt D /XSLf { XSLz /Helvetica-Bold } D /XSLp 2.5 pt 10 pt XSLz 0.25 mul zlim D /YSLb _t D /YSLl (Y Sequence) D /YSLz 12 pt D /YSLf { YSLz /Helvetica-Bold } D /YSLp 2.5 pt 10 pt YSLz 0.25 mul zlim D
/PBLb _t D /PBLl (SCORES) D /PBLz 12 pt D /PBLf { PBLz /Helvetica-Bold } D /PBLp 10 pt 20 pt PBLz zlim D /PBlb _t D /PBll () D /PBlz 9 pt D /PBlf { PBlz /Helvetica } D /PBlp 10 pt 20 pt PBlz zlim D
/QBLb _t D /QBLl (EXTRA-BOX) D /QBLz 10 pt D /QBLf { QBLz /Helvetica-Bold } D /QBLp 10 pt 20 pt QBLz zlim D /QBlb _t D /QBll () D /QBlz 9 pt D /QBlf { QBlz /Helvetica } D /QBlp 10 pt 20 pt QBlz zlim D
/FTz 6 pt D /FTf { FTz /Helvetica } D /FTp 2 pt 10 pt FTz 0.5 mul zlim D /FTXw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTXa 0 D /FTXrb _f D /FTYw FTz 0 gt { 8 FTf glblw } { 0 } ie D /FTYa 0 D /FTYrb _t D
/GPz 8 pt D /GPf { GPz /Helvetica } D /GPp 4 pt 16 pt GPz 0.75 mul zlim D /GPpt GPp 0.25 mul D /GPXw GPz 0 gt { 6 GPf glblw } { 0 } ie D /GPXa 0 D /GPXrb _f D /GPYw GPz 0 gt { 7 GPf glblw } { 0 } ie D /GPYa 0 D /GPYrb _t D
/DRh 10 pt D /DRhb DRh 0.1 mul D /DRht DRh DRhb sub D /DRFTlh DRh FTp add D /DRGPlh DRFTlh FTz add GPp add D /DRGPlnh DRGPlh GPpt 2 mul sub D
/Blw 2 pt D /Alw 1 pt D /Clw 0.1 pt D /Clw2 Clw 2 mul D /BClw Blw Clw sub D
/KLz 8 pt D /KLf { KLz /Helvetica } D /KWx 1.5 pt D /KWn KWx 0.1 mul D /KHx KLz 0.75 mul D /KHn KLz 0.50 mul D /KHt KLz 1.0 mul D /KLp KLz 0.5 mul D /KLh KHt KLz add KLp add D /KLw 4 KLf glblw D
%
%%EndProcSet:   Setting_Vars 1.0 0
%
%%BeginProcSet: Page_layout 1.0 0
%
tflg { (%%% Computing page layout %%%) msg } if
/MT MT OST max D /MB MB OSB max D /ML ML OSL max D /MR MR OSR max D
/FL { Dpage MT MB add flgcrd { Ch add } if sub exch ML MR add sub exch } D /FXO ML D /FYO Dpage exch pop MT sub D
/getXt { dup sin 0 eq { pop (ch) } { 90 sub cos 0 ge { (lh) } { (rh) } ie } ie } B /getYt { dup cos 0 eq { pop (cv) } { 90 sub sin 0 ge { (tv) } { (bv) } ie } ie } B
/FTXh FTz FTXa cos mul FTXw FTXa sin abs mul add FTp add D /FTXt { FTXa getYt FTXa getXt } D /FTYh FTz FTYa cos mul FTYw FTYa sin abs mul add FTp add D /FTYt { FTYa getYt FTYa getXt } D
/GPXh GPz GPXa cos mul GPXw GPXa sin abs mul add GPp add D /GPXt { GPXa getYt GPXa getXt } D /GPYh GPz GPYa cos mul GPYw GPYa sin abs mul add GPp add D /GPYt { GPYa getYt GPYa getXt } D
/ATX GPXh GPp add FTXh FTp add add DRh add Blw add D /ATY GPYh GPp add FTYh FTp add add DRh add Blw add D
/AXL YSLz YSLp add ATY add D /AXR FL pop KAYb KPYb or KQYb or { KLw KHt add sub } if D /AX AXR AXL sub D 
/AYT TTLz TTLp add TTlz TTlp add add XSLz XSLp add add ATX add D /AYB AYT AX add D /AY AX D
XYR 0 le { /XYR 1 D } if axesb not { XYR 1 ge { /AY AY XYR div D } { /AX AX XYR mul D } ie } if
/PYT AYB KAXb { KLb { KLh } { KHt } ie } { KLp } ie add D
/rspc FL exch pop PYT sub Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie sub } if Qb { KQXb { KLb { KLh KLp sub } { KHt } ie } if sub } if D
/PY Pb { Ph 0 gt { 1.5 cm rspc Qb { 2 div } if Ph clim } { 2.0 cm } ie } { 0 } ie D /PYB PYT PY add D
/QYT PYB Pb { KPXb { KLb { KLh } { KHt } ie } { KLp } ie add } if D /QY Qb { rspc Pb { PY sub } if Qh 0 gt { 2 cm exch Qh clim } if } { 0 } ie D /QYB QYT QY add D
%
%%EndProcSet:   Page_Layout 1.0 0
%
%
%%BeginProcSet: Aplot_dict 1.0 0
%
tflg { (%%% Setting aplot dictionary %%%) msg } if
/aplotdict 120 dict D aplotdict begin
/Xscm { Xscale mul } B /Xscme { Xscm exch } B
/Yscm { Yscale mul } B /Yscme { Yscm exch } B
/Hscm { H { Xscm } { Yscm } ie } B
/rF { 1 exch dup 0 eq { pop 10 -9 exp } if div } B 
/Fm { Yscme Xscme m } B /Fl { Yscme Xscme l } B
/corner { S 4 -2 roll m 0 0 4 1 roll 2 { S rl fg cmyk Blw slw [Blw 3] 0 setdash K R } repeat R } B 
/zoomtk { 1 dict begin /_ATX Pb Qb or { KLh } { ATX } ie D 4 copy 3 1 roll exch _ATX neg ATY corner ATX ATY neg corner ATX ATY corner _ATX neg ATY neg corner end } D
/gradcol { dup dup dup 7 1 roll 5 1 roll 3 1 roll mul 7 1 roll mul 6 1 roll mul 5 1 roll mul 4 1 roll } B
/shp { S 7 dict begin /s_s X Hscm /s_e X Hscm /s_o X /s_p X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { FTXa } { FTYa } ie s_m DRFTlh 4 -2 roll exch H { FTXt } { FTYt } ie FTf fg ttshw } if S s_o 0 T { DRht s_p mul DRhb add } { DRh } ie /f_y X f_x f_y F s_s (-) eq { 1 0 T -1 1 F } if { s_p gradcol } if cmyk cvx exec S fill R f_x rF f_y rF F fg cmyk Clw slw 2 setmiterlimit K R end R } B
/rbx { S rbxcol H { YH neg } { AX neg } ie 3 1 roll Hscm 3 1 roll Hscm 0 Clw2 ibox fill R } B /rln { S fg cmyk Hscm H { YH neg } { AX neg } ie 0 3 -1 roll dup 4 1 roll exch m l Clw slw K R } B /Rln { counttomark { rln } repeat pop } B
/grp { S 5 dict begin /s_s X Hscm /s_e X Hscm /s_o X /f_x { s_e s_o sub } D /s_m { f_x 2 div s_o add } D 0 BClw T { H { GPXa } { GPYa } ie s_m DRGPlh 4 -2 roll exch H { GPXt } { GPYt } ie GPf fg ttshw } if S cmyk { S s_o DRGPlnh s_o 0 s_e DRGPlnh s_e 0 2 { m l dotted Clw slw K } repeat R } if s_s (-) eq { s_e DRGPlnh T -1 1 F } { s_o DRGPlnh T } ie f_x exch Clw2 slw 2 setmiterlimit cvx exec R end R } B
/aln { S dup 4 1 roll exch { Alw mul Alw add slw } { pop Alw slw } ie { gradcol } { pop } ie cmyk Fm Fl K R } B
/xbox { S Yscme Yscme 4 -2 roll Xscme Xscm 4 1 roll exch bbox { S cmyk fill R } if cvx exec slw cmyk K R } B
/xcir { S Yscme Xscme T rotate Yscme Xscme 2 copy 5 2 roll F 0 0 1 0 360 arc closepath { S 6 2 roll cmyk fill R } if 2 { 1 exch div exch } repeat F cvx exec slw cmyk K R } B
/xtxt { S Yscme Xscme counttomark 2 roll not { fg } if ttshw pop R } B
/xarw { S Yscme Xscme T dup neg counttomark 1 roll rotate 2 dict begin /la X /lb X cmyk 0 0 m lb 6 mul dup la gt { pop la 0.75 mul } if dup dup dup 3 div dup neg 3 1 roll l l closepath fill 0 m la 0 l lb slw K la lb add end 0 T 0 0 xtxt R } B
/chktk { 3 dict begin /pk X /ck 0 D /ek 1 D { ck 5 gt { exit } if /ek 10 ck exp D pk ek mul cvi ek div pk eq { exit } if /ck ck 1 add D } loop ck end } B /mymod { 2 copy chktk exch chktk max dup 0 eq { pop 2 { cvi exch } repeat mod } { 1 dict begin /ff 10 3 -1 roll exp D 2 { ff mul round cvi exch } repeat mod ff div end } ie } B /rndtk { dup abs 10 -6 exp le { pop 0 } if } B
/mkgrid { S 0 0 m rl fg cmyk { dashed KWn 2 mul slw } { ldotted KWn slw } ie K R } B /mjrtick { S 0 0 m { 0 KHx neg } { KHx 0 } ie rl KWx slw fg cmyk K R } B /mnrtick { S 0 0 m { 0 KHn neg } { KHn 0 } ie rl KWn slw fg cmyk K R } B
/hticklbl { S 10 string cvs 0 KHt neg 0 4 -1 roll (tv) (ch) KLf fg ttshw R } B /htickslbl { S 10 string cvs (tv) 3 -1 roll ZM { { (lh) KHn } { (rh) KHn neg } ie } { pop (ch) 0 } ie KHt neg 0 6 -3 roll KLf fg ttshw R } B
/htick { S 10 dict begin /tmn X /tmx X /te X /to X /yt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D S /cnt lxo D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Xscm S 0 T _t mjrtick KGb { _t 0 yt mkgrid } if cnt rndtk hticklbl R } if /cnt cnt tmx add D } loop R S /cnt lno D to neg Xscm 0 T { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Xscm S 0 T _t mnrtick KGb { _f 0 yt mkgrid } if R } if /cnt cnt tmn add D } loop S to Xscm 0 T _t mjrtick _f to htickslbl R S te Xscm 0 T _t mjrtick _t te htickslbl R R end R } B
/vticklbl { S 10 string cvs KHt 0 0 4 -1 roll (cv) (lh) KLf fg ttshw R } B /vtickslbl { S 10 string cvs KHt ZM { KHn } { 0 } ie 0 5 -1 roll ZM { { (bv) } { (bv) } ie } { pop (cv) } ie 5 -1 roll exch (lh) KLf fg ttshw R } B
/vtick { S 10 dict begin /tmn X /tmx X /te X /to X /xt X /lxo to to tmx mymod sub D /lxe tmx te tmx mymod sub te add D /lno to to tmn mymod sub D /lne tmn te tmn mymod sub te add D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _f mjrtick KGb { _t xt neg 0 mkgrid } if cnt rndtk vticklbl R } if /cnt cnt tmx add D } loop /cnt lno D { cnt te ge { exit } if cnt to gt cnt te lt and cnt tmx mymod 0 eq not and { cnt Yscm S 0 exch T _f mnrtick KGb { _f xt neg 0 mkgrid } if R } if /cnt cnt tmn add D } loop R S 0 to neg Yscm T S 0 to Yscm T _f mjrtick _f to vtickslbl R S 0 te Yscm T _f mjrtick _t te vtickslbl R R end R } B
/pvtick { S 6 dict begin /tmx KPSm D /te PE D /to PO D /xt AX D /lxo to to tmx mymod sub D xt 0 T S /cnt lxo D 0 to neg Yscm T { cnt te ge { exit } if cnt to gt cnt te lt and { cnt Yscm S 0 exch T _t xt neg 0 mkgrid R } if /cnt cnt tmx add D } loop R end R } B
/nucltick { XO XE KASm KASn htick } B
/mkshp { m { l } repeat closepath } B
/fbox { 0.0 1.0 1.0 1.0 1.0 0.0 3 0.0 0.0 mkshp } B /hbox { 0.0 0.5 1.0 0.5 1.0 0.0 3 0.0 0.0 mkshp } B
/fraw { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 6 0.0 0.0 mkshp } B /hraw { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.0 0.0 mkshp } B
/flaw { 1 0 T -1 1 F fraw } B /hlaw { 1 0 T -1 1 F hraw } B
/frae { 0.25 0.5 0.00 1.0 1.00 1.0 1.00 0.0 4 0.0 0.0 mkshp } B /hrae { 0.00 1.0 1.00 1.0 1.00 0.0 3 0.25 0.0 mkshp } B
/flae { 1 0 T -1 1 F frae } B /hlae { 1 0 T -1 1 F hrae } B
/frsg { 0.75 0.0 0.75 -0.1 1.00 0.5 0.75 1.1 0.75 1.0 0.00 1.0 0.25 0.5 7 0.00 0.0 mkshp } B
/hrsg { 1.00 0.0 0.75 1.1 0.75 1.0 0.00 1.0 4 0.25 0.0 mkshp } B
/flsg { 1 0 T -1 1 F frsg } B /hlsg { 1 0 T -1 1 F hrsg } B
/frtn { 0.0 1.0 1.0 0.5 2 0.0 0.0 mkshp } B /hrtn { 0.0 1.0 1.0 0.0 2 0.0 0.0 mkshp } B
/fltn { 1 0 T -1 1 F frtn } B /hltn { 1 0 T -1 1 F hrtn } B
/futn { 0.5 1.0 1.0 0.0 2 0.0 0.0 mkshp } B /fdtn { 0.0 1.0 1.0 1.0 2 0.5 0.0 mkshp } B
/fdmd { 0.0 0.5 0.5 1.0 1.0 0.5 3 0.5 0.0 mkshp } B /fmdm { 1.0 0.0 0.0 1.0 1.0 1.0 3 0.0 0.0 mkshp } B
/fcir { 0.5 0.5 0.5 0 360 arc closepath } B /farc { 1 2 F 0.5 0 0.5 0 180 arc closepath } B /harc { 0.5 0 0.5 0 180 arc closepath } B
/gmid { 2 div dup 0 m GPpt l } B /gbas { S { dotted } if 0 0 m 0 l K R } B
/glns { dup _f gbas gmid K } B /glnd { dup _t gbas gmid K } B /gbrk { dup dup _f gbas gmid dup 0 m GPpt neg l 0 0 m 0 GPpt neg l K } B /gbrc { 4 dict begin /_l X /_lh _l 2 div D /_a GPpt 2 mul D /_b GPpt 4 mul D 0 GPpt neg m 0 _a sub _b _lh _b neg _lh GPpt curveto _l GPpt neg m _l _a add _b _lh _b neg _lh GPpt curveto K end } B
/gseg { exch dup 3 -1 roll gbas dup gmid dup GPpt m GPpt neg l 0 GPpt m 0 GPpt neg l K } B /gsgm { _f gseg } B /gsgd { _t gseg } B
/garw { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 GPpt neg m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 -1 l closepath S fill R } { 0 0 m -2.5 1 l 0 0 m -2.5 -1 l } ie K } B /garh { 3 -1 roll dup 3 -1 roll gbas dup gmid 0 0 m 0 GPpt l K 0 T GPpt GPpt F { 0 0 m -2.5 1 l -2.5 0 l closepath S fill R } { 0 0 m -2.5 1 l } ie K } B
/gsaw { _f _f garw } B /gsad { _f _t garw } B /gfaw { _t _f garw } B /gfad { _t _t garw } B
/ghaw { _t _f garh } B /ghad { _t _t garh } B /ghsw { _f _f garh } B /ghsd { _f _t garh } B
%
/DoHeader { TTLb { S AXL TTLz neg 0 TTLl (bv) (lh) TTLf fg ttshw R } if TTlb { S AXL TTLz TTLp add TTlz add neg 0 TTll (bv) (lh) TTlf fg ttshw R } if } B
/shwcrd { S 2 dict begin /Cz Ch 1 pt PPC 2 div mul sub D /Cf { Cz /Courier } D FL Ch add neg 2 copy 0 (This plot has been obtained using GFF2APLOT. The most recent version is freely available at \042http:\057\057genome.imim.es\057software\057gfftools\057GFF2APLOT.html\042. Copyright\040\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) (bv) (rh) Cf fg ttshw exch S Cf sfnt (\0401999-2003 by Josep F. ABRIL, Thomas WIEHE & Roderic GUIGO) stringwidth pop sub R exch 0 (\343) (bv) (ch) Cz /Symbol fg ttshw end R } B
/begindata { vflg { (### BEGINdata) msg } if S AXL AYB neg T S 0 0 AX AY 4 copy bbox ABc cmyk fill Blw obox fg cmyk Blw slw K R /Xscale AX XD div D /Yscale AY YD div D /YH AY D /YY YO D S KAXb { AY nucltick } if R S KAYb { AX YO YE KASm KASn vtick } if R S XSLb { AX 2 div AY ATX add XSLp add 0 XSLl (bv) (ch) XSLf fg ttshw } if YSLb { ATY YSLp add neg AY 2 div 90 YSLl (bv) (ch) YSLf fg ttshw } if R } B
/enddata { ZM { S 0 0 AX AY zoomtk R /ZM _f D } if R vflg { (### ENDdata) msg } if } B
/beginXseq { S 0 0 AX YH ATX add bbox clip newpath XO neg Xscm YH T colordict begin HT } B /beginYseq { S ATY neg 0 AX YH bbox clip newpath 0 YO neg Yscm T 90 rotate colordict begin VT } B /beginaln { S 0 Alw 2 div neg AX YH Alw add bbox clip newpath XO neg Xscm YY neg Yscm T colordict begin } B /endseq { end R } B
/beginmatches { vflg { (### BEGINmatches) msg } if S AXL PYB neg T S 0 0 AX PY 4 copy bbox PBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale PY PD div D /YH PY D /YY PO D S KPXb { PY nucltick } if R S KPYb { AX PO PE KPSm KPSn vtick } if R S PBLb { DRFTlh PBlz add PBLp add neg PY 2 div 90 PBLl (bv) (ch) PBLf fg ttshw } if PBLb { DRFTlh neg PY 2 div 90 PBll (bv) (ch) PBlf fg ttshw } if R S } D
/endmatches { R R vflg { (### ENDmatches) msg } if } D
/beginextra { vflg { (### BEGINextra) msg } if S AXL QYB neg T S 0 0 AX QY 4 copy bbox QBc cmyk fill Blw obox fg cmyk Blw slw K R /Yscale QY D /YH QY D /YY QO D S KQXb { QY nucltick } if R S QBLb { DRFTlh QBlz add QBLp add neg PY 2 div 90 QBLl (bv) (ch) QBLf fg ttshw } if QBLb { DRFTlh neg PY 2 div 90 QBll (bv) (ch) QBlf fg ttshw } if R S } B
/endextra { R R vflg { (### ENDextra) msg } if } D
end % aplotdict
%
%%EndProcSet:   Aplot_dict 1.0 0
%
%%BeginProcSet: Openings 1.0 0
%
/DoInit { tflg { (%%% START NEW PLOT %%%) msg /vflg _t D } if aplotdict begin Dpage 0 0 bbox S bg cmyk fill R clip newpath FXO FYO T tflg { S 0 0 FL neg bbox fg cmyk K R } if flgcrd { shwcrd } if } B
/DoEnd { end tflg { (%%% PLOT DONE %%%) msg } if } B
%
%%EndProcSet:   Openings 1.0 0
%
%
%%EndProlog
%
%%BeginSetup
%
% initgraphics % must not be used in EPS documents
% _t setpacking
_t setstrokeadjust
0.125 setlinewidth
0 setlinejoin
0 setlinecap
%
%%EndSetup
%
%%Page: 1 1
%%BeginPageSetup
%
% Saving current page settings
/pgsave save D
%
%%EndPageSetup
%
%
%%%%%%%% START NEW PLOT
%
DoInit
DoHeader
%
%%%%%%%% ALIGNMENT PLOT - BOX
%
begindata
%
%%%% DATA ---> X-sequence Annotations
%
beginXseq
/hrae lightred _f _f _f 1 200 300 (+) shp
/fbox lightred _f _f _f 1 500 650 (+) shp
/hraw lightred _f _f _f 1 700 825 (+) shp
/gbrk _f fg (Gene A) _t 200 825 (+) grp
endseq
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% DATA ---> Y-sequence Annotations
%
beginYseq
/hrae lightred _f _f _f 1 175 275 (+) shp
/fbox lightred _f _f _f 1 450 600 (+) shp
/hraw lightred _f _f _f 1 725 850 (+) shp
/gbrk _f fg (Gene a') _t 175 850 (+) grp
endseq
%
%%%% Y-sequence Ribbons
%
beginYseq
175 275 verylightred rbx
450 600 verylightred rbx
725 850 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% Finishing Y-sequence Ribbons
%
beginYseq
[ 175 275 450 600 725 850 Rln
endseq
%
%%%% Extra features from custom files (PRE)...
%
beginaln
lightred 2 solid _f 100 400 600 900 xbox
darkviolet 2 pt (dotted) lightviolet _t 150 350 150 350 xbox
lightbrown 2 pt (solid) darkyellow _t 75 75 0 400 600 xcir
lightbrown 1 pt (dashed) darkorange _t 100 50 45 700 200 xcir
endseq
%
%%%% DATA ---> Alignment
%
beginaln
100 75 175 150 darkblue _f _f 0.125 aln
225 200 275 250 darkblue _f _f 0.625 aln
300 325 375 400 darkblue _f _f 0.500 aln
475 425 575 525 darkblue _f _f 1.000 aln
600 550 650 600 darkblue _f _f 0.750 aln
650 625 675 650 darkblue _f _f 0.000 aln
700 725 775 800 darkblue _f _f 1.000 aln
800 875 875 950 darkblue _f _f 0.250 aln
endseq
%
%%%% Extra features from custom files (POST)...
%
beginaln
[ (0deg) (bv) (lh) 10 /Helvetica red _t fg 1.5 pt 28.35 0 400 350 xarw
[ (-75deg) (tv) (lh) 10 /Helvetica red _t fg 1.5 pt 56.7 -75 400 350 xarw
[ (85deg) (bv) (lh) 10 /Helvetica red _t fg 1.5 pt 56.7 85 400 350 xarw
[ (165deg) (bv) (rh) 10 /Helvetica red _t fg 1.5 pt 56.7 165 400 350 xarw
[ (235deg) (tv) (rh) 10 /Helvetica red _t fg 1.5 pt 85.05 235 400 350 xarw
[ 0 (A free-text string example!!!) (cv) (ch) 12 /Helvetica-Bold _f 750 750 xtxt
endseq
%
enddata
%
%
%%%%%%%% MATCHES PERCENT - BOX
%
beginmatches
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
%%%% DATA ---> Alignment
%
beginaln
100 0.40 175 0.40 darkblue _f _f 0.125 aln
225 0.60 275 0.60 darkblue _f _f 0.625 aln
300 0.55 375 0.55 darkblue _f _f 0.500 aln
475 0.75 575 0.75 darkblue _f _f 1.000 aln
600 0.65 650 0.65 darkblue _f _f 0.750 aln
650 0.35 675 0.35 darkblue _f _f 0.000 aln
700 0.75 775 0.75 darkblue _f _f 1.000 aln
800 0.45 875 0.45 darkblue _f _f 0.250 aln
endseq
%
endmatches
%
%
%%%%%%%% EXTRA DATA - BOX
%
% numlines <- vlr->{_x_sequence_sources} % NGROUPS 
beginextra
%
%
%%%% X-sequence Ribbons
%
beginXseq
200 300 verylightred rbx
500 650 verylightred rbx
700 825 verylightred rbx
endseq
%
%%%% Finishing X-sequence Ribbons
%
beginXseq
[ 200 300 500 650 700 825 Rln
endseq
%
endextra
%
%
DoEnd
%
%%%%%%%% PLOT DONE
%
% grestoreall % must not be used in EPS documents
pgsave restore
showpage
%
% Page: 1 1
%%PageTrailer
%
%%Trailer
%
%%Pages: 1
%%Orientation: Portrait
%%BoundingBox: 0 0 595 842
%%EOF

%%EndDocument
 @endspecial 4001 5602 V 2000 5605 2005 4 v 2619 5677
a(plot)p 2790 5677 29 4 v 33 w(la)m(y)m(ers)p 3061 5677
V 36 w(p)s(ost.ps)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
