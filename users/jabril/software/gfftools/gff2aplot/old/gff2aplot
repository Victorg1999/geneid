WriteCustomFile () {
cat <<'@@@Custom@@@' >$v96
## ########################################################################## ##
##                                                                            ##
##                  USER CUSTOMIZATION FILE FOR GFF2APLOT                     ##
##                                                                            ##
## ########################################################################## ##
##
## This is the file in which you can define
##   the OPTIONS and FEATURES required by gff2aplot program.
## 
## If you want to modify this file, please, do not
##   forget to make a backup copy of your old file 
##   (like .gff2aplot.rc.old or .gff2aplot.rc.bck).
##
## Creation Date: 27.01.99
## Last Revision: 20.04.99
##
## Creator: Josep Francesc ABRIL FERRANDO
##
##  e-mail:        jabril@imim.es
##
## ########################################################################## ##
## #################### OPTIONS for gff2aplot PROGRAM ##################### ##
## ########################################################################## ##
##
FL ########################################################################## ##
## #################################### FLAGs ############################### ##
##
## You could set FLAG variables to:
##       0/OFF/NO/N/FALSE/F - Switch OFF
##       1/ON/YES/Y/TRUE/T  - Switch ON
##
## Variable ############# Switch ############
##
Display_TITLE             : Y
Display_SUBTITLE          : Y
Display_X-Axis_LABEL      : Y
Display_Y-Axis_LABEL      : Y
Display_Percent-Box_LABEL : Y
Display_Extra-Box_LABEL   : Y
Display_PERCENT-BOX       : N
Display_EXTRA-BOX         : N
Display_GENE_LABEL        : Y
Display_GENE_RULE         : Y
Display_HalfHeightBOX     : Y
Display_FullHeightBOX     : Y
Display_BOX_LABEL         : Y
Display_UserDef_BOX_LABEL : Y
Display_ARROW             : Y
Display_JOINS             : Y
Display_RIBBON            : Y
Display_SELECTION-BOX     : Y
Display_GFF               : N
Display_GFF-ReverseOrder  : N
Display_FUNCTION          : N
APlotLine_GroupScore      : N
APlotLine_ScaleWidth      : N
APlotLine_ScaleGrey       : N
XY_AXES_Same-SIZE         : N
Display_TickMark-LABEL    : Y
Display_APlot_X-Ticks     : Y
Display_Percent_X-Ticks   : Y
Display_ExtraBox_X-Ticks  : Y
Display_APlot_Y-Ticks     : Y
Display_Percent_Y-Ticks   : Y
Display_ExtraBox_Y-Ticks  : Y
Display_OnlyLower_X-Ticks : N
Display_GRID              : N
ZOOM_Zoom                 : N
ZOOM_Area                 : N
Zoom_Marks                : N
##
DF ########################################################################## ##
## ############################# DEFAULT VALUES ############################# ##
##
## Some Default Values...
##
## Variable ######## Definition ######## 
##
PAGE_SIZE               :  a4
FEATURE_LABELS_LENGTH   :  0     # Number of chars displayed in labels (0 means show full label string).
GROUP_LABELS_LENGTH     :  0     # Number of chars displayed in labels (0 means show full label string).
FEATURE_X-LABELS_ANGLE  :  0     # In degrees.
GROUP_X-LABELS_ANGLE    :  0     # In degrees.
FEATURE_Y-LABELS_ANGLE  :  0     # In degrees.
GROUP_Y-LABELS_ANGLE    :  0     # In degrees.
FEATURE_LABELS_FONTSIZE :  1     # Font size scale Factor.
GROUP_LABELS_FONTSIZE   :  1     # Font size scale Factor.
BACKGROUND_COLOR        : white
FOREGROUND_COLOR        : black
APlotBox_BGCOLOR        :  BG
PercentBox_BGCOLOR      :  BG
ExtraBox_BGCOLOR        :  BG
Strand-Arrows_COLOR     :  FG
Join-Lines_COLOR        :  FG
SelectionBox_BGCOLOR    : grey
Function_COLOR          : red
Zoom_Area_Mark_COLOR    : lightred
PERCENT_ORIGIN          :  50
PERCENT_END             : 100
ScaleMajorTICKMARK      :   2    # major tickmarks per axis.
ScaleMinorTICKMARK      :   5    # minor tickmarks per each major.
PercentMajorTICKMARK    :   5    # major tickmarks per axis.
PercentMinorTICKMARK    :   5    # minor tickmarks per each major.
ExtraMajorTICKMARK      :   2    # major tickmarks per axis.
ExtraMinorTICKMARK      :   5    # minor tickmarks per each major.
##
OP ########################################################################## ##
## #################################### OPTIONs ############################# ##
##
## Changing default values overrides any other definition you made for features.
##
##   ##DEFAULT##  means that program uses for these options
##                those values you have defined in feature table.
##         FG    the option is defined with FOREGROUND_COLOR.
##         BG    the option is defined with BACKGROUND_COLOR.
##
## Variable ######## Definition ######## 
##
Align_NAME            : ##DEFAULT##
X-Sequence_NAME       : ##DEFAULT##
Y-Sequence_NAME       : ##DEFAULT##
TITLE                 : ##DEFAULT##
SUBTITLE              : ##DEFAULT##
X-Axis_LABEL          : ##DEFAULT##
Y-Axis_LABEL          : ##DEFAULT##
Percent-Box_LABEL     : ##DEFAULT##
Percent-Box_SUBLABEL  : ##DEFAULT##
Extra-Box_LABEL       : ##DEFAULT##
Extra-Box_SUBLABEL    : ##DEFAULT##
HalfSizeBox_BGCOLOR   : ##DEFAULT##
FullSizeBox_BGCOLOR   : ##DEFAULT##
Ribbon_BGCOLOR        : ##DEFAULT##
SEQUENCE1_ORIGIN      : ##DEFAULT##
SEQUENCE1_END         : ##DEFAULT##
SEQUENCE2_ORIGIN      : ##DEFAULT##
SEQUENCE2_END         : ##DEFAULT##
Zoom_SEQUENCE1_ORIGIN : ##DEFAULT##
Zoom_SEQUENCE1_END    : ##DEFAULT##
Zoom_SEQUENCE2_ORIGIN : ##DEFAULT##
Zoom_SEQUENCE2_END    : ##DEFAULT##
TICKMARK              : ##DEFAULT##
SMALLTICKMARK         : ##DEFAULT##
##
FT ########################################################################## ##
## #################################### GFF FEATUREs DEFINITION ############# ##
## 
## ########### Description of each element of the Features Array. ########### ##
##
## (str) means a string of chars (in a string numbers are treated as chars).
## (bin) means you only could define variable as
##       0/OFF/NO/N/FALSE/F = Switch OFF the element.
##       1/ON/YES/Y/TRUE/T  = Switch ON  the element.
## (FHN) means you can choose between "(F)ull" or "(H)alf" size Boxes,
##       also you can define "(N)one", then the feature is without a box.
## (NLRB) means you can choose among "(N)o lines", "draw (L)ines at <feature>
##       boundaries", "(R)ibbons" or "(B)oth -Lines and Ribbons".
## (HND) means "(H)alfSize", "(N)ormalSize" or "(D)oubleSize" LineWidth.
##
## (clr) means that you can choose among the following color names:
##
##    black | verydarkgrey | darkgrey | grey | lightgrey | verylightgrey | white
##       verydarkgreen | darkgreen | green | lightgreen | verylightgreen
##   verydarkskyblue | darkskyblue | skyblue | lightskyblue | verylightskyblue
##          verydarkblue | darkblue | blue | lightblue | verylightblue
##         verydarkcyan | darkcyan | cyan | lightcyan | verylightcyan
##     verydarkviolet | darkviolet | violet | lightviolet | verylightviolet
##            verydarkred | darkred | red | lightred | verylightred
##     verydarkorange | darkorange | orange | lightorange | verylightorange
##     verydarkyellow | darkyellow | yellow | lightyellow | verylightyellow
##        verydarkbrown | darkbrown | brown | lightbrown | verylightbrown 
##
##       If you do not want to define a color, you can enter
##        BG (background color) or FG (foreground color), 
##        but you must choose one of the above definitions.
## 
## ## 
## Feature (str): A feature name. Only <features> defined below
##    will be recognized in your .gff file.
## ## 
## XTR (bin): Force those <features> for which XTR is switched ON
##   to be displayed in the third panel, if the Plot Option 
##   "Display_EXTRA-BOX" is switched ON.
## ## 
## Box (FHN): Define the box size (FHN) for <feature>.
## ##
## Line (NLRB): Draw lines across all panels for the <feature>.
## ##
## Join (bin): Switch ON to connect elements of one group with splice symbols.
## ##
## Arrw (bin): Swicth ON to display an arrow that shows the <feature>'s strand.
## ##
## Lbl (bin): Swicth ON to display the <feature>'s label
##   (if it's defined in the .gff file).
## ##
## Color (clr): Fill <Box> with this color.
## ##
## CLine (clr): Fill Line <Ribbons> with this color.
## ##
## Wdth (HND): You can choose among three predefined LineWidths.
## ##
## Layr : Layer where is drawed each feature.
##   You must pass an integer for feature ordering (1..n),
##   put 0 to print the feature always on top. 
## ##
##  
## ########################## Features Definition ################################ ##
## Feature  #XTR #Box #Line#Join#Arrw#Lbl #Wdth#Layr#Color ###########CLine #########
##
intron        N    H    N    N    N    N    H    4    lightgrey        BG           
exon          N    F    R    Y    Y    Y    H    0    red              lightgrey    
#altexon       N    F    R    Y    Y    Y    H    1    orange           lightgrey     ## alternative splice-exon.
cdexon        N    F    L    Y    Y    Y    H    1    darkred          BG           
ncdexon       N    F    L    Y    Y    Y    H    1    lightred         BG           
utr           N    F    L    Y    N    Y    H    3    lightred         BG           
3'-utr        N    F    L    Y    N    Y    H    3    lightred         BG           
5'-utr        N    F    L    Y    N    Y    H    3    lightred         BG           
est           Y    H    N    Y    N    N    H    4    darkgreen        BG           
3'-est        Y    H    N    Y    N    N    H    4    orange           BG           
5'-est        Y    H    N    Y    N    N    H    4    orange           BG           
gap           N    N    L    N    N    N    D    6    black            BG           
cpg           N    N    R    N    N    Y    H    6    yellow           lightyellow  
sine          N    N    R    N    N    N    H    6    BG               verylightgreen
line          N    N    R    N    N    N    H    6    BG               verylightgreen
alu           N    N    R    N    N    N    H    6    BG               lightgreen   
repeat        N    N    R    N    N    N    H    6    BG               verylightgreen
## ######1#########2#########3#########4#########5#########6#########7#########8#####
##  
SP ########################## Special gff Features ############################### ##
##
GROUPLIMITS : genebounds
PLOTLIMITS  : seqbounds                                             
APLOT       : align
HIGHLIGHT   : boxit
RECTANGLE   : rectangle
CIRCLE      : circle
TEXT        : text
FUNCTION    : function
EXTRABOX    : est
## ######1#########2#########3#########4#########5#########6#########7#########8#####
@@@Custom@@@
}


##############################################################
##################### SHELL FUNCTIONS ########################

#
# Checking ribbon parameters
CheckRBN () {
  k=$1;
  tk=`echo $k | sed 's/^[NnLlRrBb]$//'`;
  if [ -z "$tk" ];
    then echo $1;
    else echo "F";
  fi;
} # End of CheckRBN

#
# Main GFF2APLOT GNU AWK PROGRAM
#
cat << '@@@EndPROGRAM@@@' >> $GWKPRG # Shell file
BEGIN{
  #
  ############## Program Constants ############ 
  fseq1=0; fseq2=0; falign=0;
  DefLimits=0; hlcnt=0; NGROUPS=0
  MinF=10000; MaxF=0 # MXend=1; MYend=1
  MxGpLBL=0; MxFtLBL=0;
}
########## INITIALITATION Finished ##########
#
############ READING .GFF FILES  ############
{ 
  is_EOF=0;
  #
  # skips those comment lines (starting with "#") or empty lines
  # also checking if input line is gff_formated.
  while (!ChkInput()) { 
    if (Var["quiet_mode"]) printf ">>> %10s :: Not Read :: %s\n", NR, $0 | "cat 1>&2";
    # PrintWRN(sprintf(">>> %10s :: Not Read :: ", NR) $0 "\n");
    if (getline<=0) { is_EOF=1; break };
  } # while
  if (!is_EOF) {
    #
    # Printing Input Lines
	PrintRPT(sprintf("OK: %10s :: GFF v.%s  :: %s\n", NR, GFF_V, $0));
    #
    # Reading gff-line elements.
	ReadElements();
  } # if (!is_EOF)
}
############ .GFF FILES ARE READ ############
#
########### MAIN PROGRAM PROCESSES ##########
END{
 # 
 ######### Defining some variables #######
 SET_PAGE_VARS();
 #
 ######### Printing PostScript: Header, Prologue, OpenPage 
 PSheader();
 PSprologue();
 startPSpage();
 #
 ######### Printing APLOT BLOCK #######
 APLOT_BLOCK();
 #
 ######### Printing PERCENT-BOX BLOCK #######
 PERCENT_BLOCK();
 #
 ######### Printing EXTRA-BOX BLOCK #######
 EXTRA_BLOCK();
 #
 ######### Printing PostScript EOF #######
 endPSpage(); PSTrailer();
 #
 # Final Report
 if (Var["Print_Report"]) prtReport();
 }
############ MAIN PROCESSES DONE ############
#
#################### MAIN ###################
############ FUNCTIONS DEFINITION ###########
#
#
#
function SET_PAGE_VARS() {
 PrintRPT(sprintf("\n%s\n* SETTING PAGE VARIABLES...\n%s\n\n",BigLINE,BigLINE));
 # page size
 bbpgsz=tolower(Var["PAGE_SIZE"]); 
 if (!chkps(bbpgsz)) { bbx=PsizeX["a4"]; bby=PsizeY["a4"] }
 else { bbx=PsizeX[bbpgsz]; bby=PsizeY[bbpgsz] }
 PrintRPT(sprintf("::: PAGE_SIZE ::: %s (%sx%s)\n",bbpgsz,bbx,bby));
 # Defining axes
 if (Var["Align_NAME"] in SEQNAME) { 
   ALIGNname=Var["Align_NAME"];
   split(Var["Align_NAME"],sqn,":");
   ALIGNseq1=sqn[1]; ALIGNseq2=sqn[2];
   }
 if (Var["X-Sequence_NAME"] in SEQNAME) { SEQ1LABEL=Var["X-Sequence_NAME"] }
 else {
   if (falign) { SEQ1LABEL=ALIGNseq1 }
   else { SEQ1LABEL=SEQ1name }
   }
 if (Var["Y-Sequence_NAME"] in SEQNAME) { SEQ2LABEL=Var["Y-Sequence_NAME"] }
 else {
   if (falign) { SEQ2LABEL=ALIGNseq2 }
   else { SEQ2LABEL=SEQ2name }
   }
#
##############################################
### An idea to improve axes_exchange.
#
# SWAPaln=0;
# if (SEQ1LABEL==ALIGNseq2) {
#   if (SEQ2LABEL==ALIGNseq2) {
#     ALIGNseq1=SEQ2LABEL;
#     }
#   else {
#     tst=SEQ2LABEL":"ALIGNseq2;
#     if (SEQ2LABEL!=ALIGNseq1 && (tst in SEQNAME)) ALIGNseq1=SEQ2LABEL;
#     else SEQ2LABEL==ALIGNseq1;
#     }
#   ALIGNseq2=SEQ1LABEL; SWAPaln=1;
#   }
#
##############################################
#
 PrintRPT(sprintf(":::\n::: ALIGN NAME ::: %s\n::: SEQ1 NAME ::: %s\n::: SEQ2 NAME ::: %s\n",ALIGNname,SEQ1LABEL,SEQ2LABEL));
 # Defining axes limits...
 if (!DefLimits) {         # Default Limits ( nor "seqlimits" given neither user-defined).
   OSQ1=1; ESQ1=(int(max(MXend[ALIGNname],MSend[SEQ1LABEL])/100)+1)*100;
   OSQ2=1; ESQ2=(int(max(MYend[ALIGNname],MSend[SEQ2LABEL])/100)+1)*100;
   }                       # Else Limits are defined with "seqlimits" gff record
 if (OnOff(Var["ZOOM_Zoom"])) {  # Zoom active, then checklimits.
   if (Var["Zoom_SEQUENCE1_ORIGIN"]!~"##DEFAULT##") OSQ1=Var["Zoom_SEQUENCE1_ORIGIN"];
   if (Var["Zoom_SEQUENCE1_END"]!~"##DEFAULT##")    ESQ1=Var["Zoom_SEQUENCE1_END"];
   if (Var["Zoom_SEQUENCE2_ORIGIN"]!~"##DEFAULT##") OSQ2=Var["Zoom_SEQUENCE2_ORIGIN"];
   if (Var["Zoom_SEQUENCE2_END"]!~"##DEFAULT##")    ESQ2=Var["Zoom_SEQUENCE2_END"];
   }
 else {                   # User-defined Limits.
   if (Var["SEQUENCE1_ORIGIN"]!~"##DEFAULT##") OSQ1=Var["SEQUENCE1_ORIGIN"];
   if (Var["SEQUENCE1_END"]!~"##DEFAULT##")    ESQ1=Var["SEQUENCE1_END"];
   if (Var["SEQUENCE2_ORIGIN"]!~"##DEFAULT##") OSQ2=Var["SEQUENCE2_ORIGIN"];
   if (Var["SEQUENCE2_END"]!~"##DEFAULT##")    ESQ2=Var["SEQUENCE2_END"];
   }
 PrintRPT(sprintf(":::\n::: X-axes LIMITS ::: %s to %s\n::: Y-axes LIMITS ::: %s to %s\n",OSQ1,ESQ1,OSQ2,ESQ2));
 # labels
 if (!OnOff(Var["Display_TITLE"])) T=" ";
 else {
   if (Var["TITLE"]~"##DEFAULT##") { 
     if (SEQ1LABEL!="" && SEQ2LABEL!="") T=SEQ1LABEL" x "SEQ2LABEL;
     else T=" ";
     }
   else T=Var["TITLE"];
   }
 ST=" "; SBLbl=" "; XBLbl=" "; SBSLbl=" "; XBSLbl=" ";
 if (OnOff(Var["Display_SUBTITLE"]) && Var["SUBTITLE"]!~"##DEFAULT##") ST=Var["SUBTITLE"];
 if (OnOff(Var["Display_Percent-Box_LABEL"]) && Var["Percent-Box_LABEL"]!~"##DEFAULT##") SBLbl=Var["Percent-Box_LABEL"];
 if (OnOff(Var["Display_Extra-Box_LABEL"]) && Var["Extra-Box_LABEL"]!~"##DEFAULT##") XBLbl=Var["Extra-Box_LABEL"];
 if (OnOff(Var["Display_Percent-Box_LABEL"]) && Var["Percent-Box_SUBLABEL"]!~"##DEFAULT##") SBSLbl=Var["Percent-Box_SUBLABEL"];
 if (OnOff(Var["Display_Extra-Box_LABEL"]) && Var["Extra-Box_SUBLABEL"]!~"##DEFAULT##") XBSLbl=Var["Extra-Box_SUBLABEL"];
 PrintRPT(sprintf(":::\n::: PLOT TITLE ::: \"%s\"\n::: SUBTITLE ::: \"%s\"\n::: PIP BOX LABEL ::: \"%s\"\n::: PIP BOX SubLABEL ::: \"%s\"\n::: EXTRA BOX LABEL ::: \"%s\"\n::: EXTRA BOX SubLABEL ::: \"%s\"\n",T,ST,SBLbl,SBSLbl,XBLbl,XBSLbl));
 # Tickmarks
 if (OnOff(Var["Display_OnlyLower_X-Ticks"])) {
   if (OnOff(Var["Display_Extra-Box_LABEL"])) {
     Var["Display_APlot_X-Ticks"]=0;
     Var["Display_Percent_X-Ticks"]=0;
     Var["Display_ExtraBox_X-Ticks"]=1;
     }
   else if (OnOff(Var["Display_Percent-Box_LABEL"])) {
     Var["Display_APlot_X-Ticks"]=0;
     Var["Display_Percent_X-Ticks"]=1;
     Var["Display_ExtraBox_X-Ticks"]=0;
     } 
   else {
     Var["Display_APlot_X-Ticks"]=1;
     Var["Display_Percent_X-Ticks"]=0;
     Var["Display_ExtraBox_X-Ticks"]=0;
     } 
   }
 if (Var["TICKMARK"]!~"##DEFAULT##") tmtck=Var["TICKMARK"];
 else tmtck=-1;
 if (Var["SMALLTICKMARK"]!~"##DEFAULT##" && mtck>0) tntck=Var["SMALLTICKMARK"];
 else tntck=-1;
 if (Var["ScaleMajorTICKMARK"]!~"##DEFAULT##" && Var["ScaleMajorTICKMARK"]>0)
   smtck=Var["ScaleMajorTICKMARK"];
 else smtck=2;
 if (Var["ScaleMinorTICKMARK"]!~"##DEFAULT##" && Var["ScaleMinorTICKMARK"]>0)
   sntck=Var["ScaleMinorTICKMARK"];
 else sntck=5;
 if (Var["PercentMajorTICKMARK"]!~"##DEFAULT##" && Var["PercentMajorTICKMARK"]>0)
   pmtck=Var["PercentMajorTICKMARK"];
 else pmtck=2;
 if (Var["PercentMinorTICKMARK"]!~"##DEFAULT##" && Var["PercentMinorTICKMARK"]>0)
   pntck=Var["PercentMinorTICKMARK"];
 else pntck=5;
 if (Var["ExtraMajorTICKMARK"]!~"##DEFAULT##" && Var["ExtraMajorTICKMARK"]>0)
   xmtck=Var["ExtraMajorTICKMARK"];
 else xmtck=2;
 if (Var["ExtraMinorTICKMARK"]!~"##DEFAULT##" && Var["ExtraMinorTICKMARK"]>0)
   xntck=Var["ExtraMinorTICKMARK"];
 else xntck=5;
 # Other
 if (OnOff(Var["Display_FullHeightBOX"]) || OnOff(Var["Display_HalfHeightBOX"]) || OnOff(Var["Display_ARROW"])) tmpflag=1;
 else tmpflag=0;
 if (Var["FEATURE_LABELS_LENGTH"]>0) MxFtLBL=Var["FEATURE_LABELS_LENGTH"];
 if (Var["GROUP_LABELS_LENGTH"]>0)   MxGpLBL=Var["GROUP_LABELS_LENGTH"];
}
#
function APLOT_BLOCK() {
 PrintWRN(sprintf("\n%s\n* GENERATING APLOT BOX...\n%s\n\n",BigLINE,BigLINE));
 printf "%%\n%% New BLOCK ---> LABELS\n%%\n"
 printf "%% (label) Title\n(%s) Title\n", checklbl(T);
 printf "%% (label) SubTitle\n(%s) SubTitle\n", checklbl(ST);
 printf "%%\n%% New BLOCK ---> APLOT\n%%\n";
 printf "%% xori xend yori yend\n";
 printf "/X0 %s def\n/X1 %s def\n/Y0 %s def\n/Y1 %s def\n", OSQ1, ESQ1, OSQ2, ESQ2;
 printf "%%\nbegindata\n";
 printf "%%\nhorizontal\n%%\n";
 printf "%% lwidth lcolor bcol ori end Bline\n";
 printf "%% x0 y0 x1 y1 lwidth lcolor Line\n";
 if (OnOff(Var["Display_RIBBON"])) PLOTRibbons(SEQ1LABEL,1);
 print "% tag definitions: Box,Join,Arrow,Banner";
 PLOTFEATURES(SEQ1LABEL,1);
 if (Var["X-Axis_LABEL"]~"##DEFAULT##") s1lbl=SEQ1LABEL;
   else s1lbl=Var["X-Axis_LABEL"];
 if (OnOff(Var["Display_X-Axis_LABEL"])) { 
   printf "%% (label) TagLabelFont Banner\n(%s) TagLabelFont Banner \n", checklbl(s1lbl) }
 printf "%%\nvertical\n%%\n";
 printf "%% lwidth lcolor bcol ori end Bline\n";
 printf "%% x0 y0 x1 y1 lwidth lcolor Line\n";
 if (OnOff(Var["Display_RIBBON"])) {
   PLOTRibbons(SEQ2LABEL,0);
   PLOTLINES();
   }
 print "%%\n% tag definitions: Box,Join,Arrow,Banner";
 PLOTFEATURES(SEQ2LABEL,0);
 if (Var["Y-Axis_LABEL"]~"##DEFAULT##") s2lbl=SEQ2LABEL;
   else s2lbl=Var["Y-Axis_LABEL"];
 if (OnOff(Var["Display_Y-Axis_LABEL"])) { 
   printf "%% (label) TagLabelFont Banner\n(%s) TagLabelFont Banner \n", checklbl(s2lbl) }
 printf "%%\n%% Extra Features: Nice Band Lines Finishing for Seq1lines, Bsquare\n";
 printf "%%\n%% lwidth lcolor bcolor Hori Hend Vori Vend Bsquare\n";
 if (OnOff(Var["Display_SELECTION-BOX"])) {
   for (i=1;i<=LAST[ALIGNname];i++) {
     if (FEATURE[ALIGNname,"-",i]~FTHighLight) {
       split(SQ_ORI[ALIGNname,"-",i],Oori,":");
       split(SQ_END[ALIGNname,"-",i],Eend,":");
       if (ChkXlim(Oori[1],Eend[1]) && ChkYlim(Oori[2],Eend[2])) {
         Oori[1]=max(Oori[1],OSQ1);Eend[1]=min(Eend[1],ESQ1);
         Oori[2]=max(Oori[2],OSQ2);Eend[2]=min(Eend[2],ESQ2);
         printf "%s %s %s %s %s %s %s Bsquare\n", GetLW("N"), Var["FOREGROUND_COLOR"], stcol(Var["SelectionBox_BGCOLOR"]), Oori[1], Eend[1], Oori[2], Eend[2];
         }
       }
     }
   }
 PrintRPT("*** DRAWING ALIGNMENT DATA...\n");
 printf "%%\n%%\n%% DATA ---> Alignment...\n%%\n";
 for (i=1;i<=LAST[ALIGNname];i++) {
   alname=ALIGNname SUBSEP "-" SUBSEP i;
   if (OnOff(Var["APlotLine_GroupScore"])) {
     if (OnOff(Var["APlotLine_ScaleWidth"])) wdth=ALIGNscgroup[alname]*10; else wdth=2;
     if (OnOff(Var["APlotLine_ScaleGrey"])) color="0 0 0 "ALIGNscgroup[alname];
       else color=Var["FOREGROUND_COLOR"];
     }
   else {
     if (OnOff(Var["APlotLine_ScaleWidth"])) wdth=ALIGNscore[alname]*10; else wdth=2;
     if (OnOff(Var["APlotLine_ScaleGrey"])) color="0 0 0 "ALIGNscore[alname];
       else color=Var["FOREGROUND_COLOR"];
     }
   if (FEATURE[alname]~FTAPlot) {
   #
   # swap axes OK.
     if (index(ALIGNname,SEQ1LABEL)==1) {
       txo=ALIGNxori[alname];
       txe=ALIGNxend[alname];
       tyo=ALIGNyori[alname];
       tye=ALIGNyend[alname];
       }
     else {
       tyo=ALIGNxori[alname];
       tye=ALIGNxend[alname];
       txo=ALIGNyori[alname];
       txe=ALIGNyend[alname];
       }
     if (ChkXlim(txo,txe) && ChkYlim(tyo,tye)) {
       txo=max(txo,OSQ1);
       txe=min(txe,ESQ1);
       tyo=max(tyo,OSQ2);
       tye=min(tye,ESQ2);
       printf "%s %s %s %s %s %s Line\n", txo, tyo, txe, tye, wdth, color;
       }
     }
   }
 printf "%%\n%%\n%% Plot - Remarks...\n%%\n";
 PLOTREMARKS(SEQ1LABEL,1);
 PLOTREMARKS(SEQ2LABEL,0);
 if (!OnOff(Var["ZOOM_Zoom"]) && OnOff(Var["ZOOM_Area"])) {
   if (ChkXlim(Var["Zoom_SEQUENCE1_ORIGIN"],Var["Zoom_SEQUENCE1_END"]) && ChkYlim(Var["Zoom_SEQUENCE2_ORIGIN"],Var["Zoom_SEQUENCE2_END"])) {
     Var["Zoom_SEQUENCE1_ORIGIN"]=max(Var["Zoom_SEQUENCE1_ORIGIN"],OSQ1);
     Var["Zoom_SEQUENCE1_END"]=min(Var["Zoom_SEQUENCE1_END"],ESQ1);
     Var["Zoom_SEQUENCE2_ORIGIN"]=max(Var["Zoom_SEQUENCE2_ORIGIN"],OSQ2);
     Var["Zoom_SEQUENCE2_END"]=min(Var["Zoom_SEQUENCE2_END"],ESQ2);
     printf "%s %s %s %s %s %s Msquare\n", 2, stcol(Var["Zoom_Area_Mark_COLOR"]), Var["Zoom_SEQUENCE1_ORIGIN"], Var["Zoom_SEQUENCE1_END"], Var["Zoom_SEQUENCE2_ORIGIN"], Var["Zoom_SEQUENCE2_END"];
     }
   }    
 printf "%%\nenddata\n%%\n";
}
#
function PERCENT_BLOCK() {
 PrintWRN(sprintf("\n%s\n* GENERATING PERCENT BOX...\n%s\n\n",BigLINE,BigLINE));
 #
 if (OnOff(Var["Display_PERCENT-BOX"])) {
   printf "%%\n%% New BLOCK ---> MATCHES\n%%\n"
   printf "%% xpct ypct\n %s %s beginmatches\n", Var["PERCENT_ORIGIN"], Var["PERCENT_END"]
   printf "%%\nhorizontal\n"
   printf "%% lwidth lcolor bcol ori end Bline\n"
   printf "%% x0 y0 x1 y1 lwidth lcolor Line\n"
   if (OnOff(Var["Display_RIBBON"])) { 
     PLOTRibbons(SEQ1LABEL,1)
     PLOTLINES()
     }
   printf "%%\nvertical\n%%\npctmarks\n"
   PrintRPT("*** DRAWING ALIGNMENT DATA...\n");
   printf "%%\n%%\n%% DATA ---> Alignment...\n%%\n"
   for (i=1;i<=LAST[ALIGNname];i++) {
     pcname=ALIGNname SUBSEP "-" SUBSEP i
     if (OnOff(Var["APlotLine_GroupScore"])) {
#       if (OnOff(Var["APlotLine_ScaleWidth"])) wdth=ALIGNscgroup[pcname]*10; else wdth=2
       if (OnOff(Var["APlotLine_ScaleGrey"])) color="0 0 0 "ALIGNscgroup[pcname]
         else color=Var["FOREGROUND_COLOR"]
       }
     else {
#     if (OnOff(Var["APlotLine_ScaleWidth"])) wdth=ALIGNscore[pcname]*10; else wdth=2
       if (OnOff(Var["APlotLine_ScaleGrey"])) color="0 0 0 "ALIGNscore[pcname]
         else color=Var["FOREGROUND_COLOR"]
       }
     wdth=2
     nscore=ALIGNscore[pcname]*100
     if (FEATURE[pcname]~FTAPlot) {
     #
     # Percent box zoom: vertical clip added, and swap axes.
       if (index(ALIGNname,SEQ1LABEL)==1) {
         txo=ALIGNxori[pcname]
         txe=ALIGNxend[pcname]
         tyo=ALIGNyori[pcname]
         tye=ALIGNyend[pcname]
         }
       else {
         tyo=ALIGNxori[pcname]
         tye=ALIGNxend[pcname]
         txo=ALIGNyori[pcname]
         txe=ALIGNyend[pcname]
         }
       if (ChkXlim(txo,txe) && ChkYlim(tyo,tye)) {
         txo=max(txo,OSQ1)
         txe=min(txe,ESQ1)
         printf "%s %s %s %s %s %s Line\n", txo, nscore, txe, nscore, wdth, color
         }
       }
     }
   printf "%%\nendmatches\n%%\n"
   }
}
#
function EXTRA_BLOCK() {
 PrintWRN(sprintf("\n%s\n* GENERATING EXTRA BOX...\n%s\n\n",BigLINE,BigLINE));
 #
 if (OnOff(Var["Display_EXTRA-BOX"])) {
   printf "%%\n%% New BLOCK ---> EXTRA-BOX\n%%\n"
   printf "%% numlines\n %s beginextra\n", NGROUPS 
   printf "%%\nhorizontal\n"
   printf "%% lwidth lcolor bcol ori end Bline\n"
   printf "%% x0 y0 x1 y1 lwidth lcolor Line\n"
   if (OnOff(Var["Display_RIBBON"])) {
     PLOTRibbons(SEQ1LABEL,1)
     PLOTLINES()
     }
   printf "%%\nvertical\n"
   if (OnOff(Var["Display_GFF"])) {
     for (i=1;i<=LAST[SEQ1LABEL];i++) {
       slbl=SEQ1LABEL SUBSEP "-" SUBSEP i
       if (FEATURE[slbl]~FTExtraDisplay) {
         if (!ChkColor(FTColor[FEATURE[slbl]])) xcolor=Var["FOREGROUND_COLOR"]
           else xcolor=FTColor[FEATURE[slbl]]
         if (OnOff(Var["Display_GFF-ReverseOrder"])) gffpos=NGROUPS-NGROUP[slbl]
           else gffpos=NGROUP[slbl]+1
         if (ChkXlim(SQ_ORI[slbl],SQ_END[slbl])) {
           SQ_ORI[slbl]=max(SQ_ORI[slbl],OSQ1)
           SQ_END[slbl]=min(SQ_END[slbl],ESQ1)
           printf "%s %s %s %s %s %s Line\n", SQ_ORI[slbl], gffpos, SQ_END[slbl], gffpos, "Xlwdt", xcolor
           }
         }
       }
     }
   if (OnOff(Var["Display_FUNCTION"])) {
     printf "%%\n%s %s\nbeginfunct\n",MinF,MaxF
     for (fnc in FnctSEQ) {
       if (FnctSEQ[fnc]==SEQ1LABEL) {
         fori=0; thefnc=SEQ1LABEL SUBSEP "-" SUBSEP fnc
         for (i=OSQ1;i<=ESQ1;i++) {
           if (fori) { 
             if (FunctionFlg[thefnc,"-",i])
               printf "%s %s flt\n", i, FunctionXaxis[thefnc,"-",i]
             }
           else if (!fori) { 
             if (FunctionFlg[thefnc,"-",i]) {
               printf "S\n%s %s fmt\n", i, FunctionXaxis[thefnc,"-",i]; fori=1 }
             }
           }
         if (fori) {
           printf "2 slw %s scmyk K R\n",FunctionColor[thefnc] }
         }
       }
       printf "%%\nendfunct\n%%\n"
     }
   printf "%%\nendextra\n%%\n"
   }
}
#
########################################
######## Secondary Functions ###########
#
function TxtBool(n) { if (n) return "true"; else return "false" }
#
function ChkXlim(o,e) { if (o>=ESQ1 || e<=OSQ1) return 0; else return 1 }
function ChkYlim(o,e) { if (o>=ESQ2 || e<=OSQ2) return 0; else return 1 }
#
function stcol(qcolor) {
 if (ChkColor(qcolor)) {
   if (tolower(qcolor)~/fg(color)?/) return Var["FOREGROUND_COLOR"];
   else return qcolor;
   }
 else
   if (tolower(qcolor)~/bg(color)?/) return Var["BACKGROUND_COLOR"];
   else return Var["BACKGROUND_COLOR"];
 }
#
function checklbl(chain) {
  if (chain=="") return ""; 
  else { gsub(/[\(]/,"\\050",chain); gsub(/[\)]/,"\\051",chain); return chain }
} # End of function checklbl
#
function chkpo(v) { if (tolower(v)=="portrait") return "false"; else return "true" }
function cktxpo(v) { if (tolower(v)=="portrait") return "Portrait"; else return "Landscape" } 
#
function ChkFT(feat) {
 if (feat~FTExtraDisplay || feat~FTText || feat~FTCircle || feat~FTRectangle || feat~FTExtraFunction || feat~FTLimits || feat~FTHighLight || feat~FTAPlot)
   return 1;
 else return 0;
 }
function ChkStr(char) {
 if (char~/^0$|^\+$/)      return "(fwd)";
 else if (char~/^1$|^\-$/) return "(rvs)";
 else if (char~/^\.$/)     return "(nst)";
 else return "(err)";
 }
function tick(nm) {
 end1=ESQ1-OSQ1; if (end1==0) end1=10000;
 end2=ESQ2-OSQ2; if (end2==0) end2=10000;
 wy=max(end1,end2);
 y=wy/nm;
 ylog=(log(y)/log(10));
 yfloor=int(ylog);
 y1=y/(10^yfloor);
 y2=int(y1);
 t=y2*(10^yfloor);
 return t;
 }
function GetLW(type) {
 if (type~/H|h/) return 0.25;
 else if (type~/N|n/) return 0.5;
 else if (type~/D|d/) return 1;
 }
function PLOTRibbons(SEQ,ish    ,tt) {
 if (ish) tt="HORIZONTAL"; else tt="VERTICAL";
 PrintRPT("*** PLOT RIBBONS * " tt " AXES\n");
 #
 for (l=maxlayer;l>=0;l--) {          ### Plotting features by layers...  
   for (i=1;i<=LAST[SEQ];i++) {
     name=SEQ SUBSEP "-" SUBSEP i;
     feat=FEATURE[name];
    if (feat in FTindex) {
     if (FTLayer[feat]==l) {
       bori=SQ_ORI[name]; bend=SQ_END[name];
       featln=tolower(FTLineType[feat]);
       tpftSR=tolower(Var["Show_Ribbons"]);
       if (tpftSR!="f") featln=tpftSR;
       lnw=GetLW(FTLineWidth[feat]);
       if (Var["Ribbon_BGCOLOR"]~"##DEFAULT##") rbbncol=FTRbnColor[feat];
       else rbbncol=Var["Ribbon_BGCOLOR"];
       if (featln=="r") rbbnlnc=rbbncol;
       else rbbnlnc=Var["FOREGROUND_COLOR"];
       # PrintRPT(sprintf("************PLOTRIBBONS***%s:%s-%s(%s):%s\n",feat,bori,bend,featln,rbbnlnc));
       if (featln~/b|r/) {
         goprt=0;
         if (ish) {
           if (ChkXlim(bori,bend)) {
             bori=max(bori,OSQ1); bend=min(bend,ESQ1); goprt=1 }
             if (featln~/b/) {
               HLary[hlcnt]=bori; HLWary[hlcnt]=lnw; HLWcol[hlcnt]=rbbnlnc; hlcnt++;
               HLary[hlcnt]=bend; HLWary[hlcnt]=lnw; HLWcol[hlcnt]=rbbnlnc; hlcnt++;
               }
           }
         else { 
           if (ChkYlim(bori,bend)) {
             bori=max(bori,OSQ2); bend=min(bend,ESQ2); goprt=1 }
           }
         if (goprt) {
           printf "%s %s %s %s %s Bline\n", lnw, rbbnlnc, rbbncol, bori, bend }
         } 
       else if (featln~/l/) {
         if (ish) {
           rbbnlnc=Var["FOREGROUND_COLOR"];
           PRTLine(bori, bori, lnw, rbbnlnc);
           PRTLine(bend, bend, lnw, rbbnlnc);
           HLary[hlcnt]=bori; HLWary[hlcnt]=lnw; HLWcol[hlcnt]=rbbnlnc; hlcnt++;
           HLary[hlcnt]=bend; HLWary[hlcnt]=lnw; HLWcol[hlcnt]=rbbnlnc; hlcnt++;
           }
         else { 
           PRTLineV(bori, bori, lnw, Var["FOREGROUND_COLOR"]);
           PRTLineV(bend, bend, lnw, Var["FOREGROUND_COLOR"]);
           }
         } 
       }  # if FTLayer
      }  # if feat in FTindex
     }  # for i 
   }  # for l
 }  # function
function PLOTFEATURES(SEQ,isq    ,tt) {
 if (ish) tt="HORIZONTAL"; else tt="VERTICAL";
 PrintRPT("*** PLOT FEATURES * " tt " AXES\n");
 #
 printf "%% (label) ElmFont bcol ori end Box\n"
 printf "%% color ori end dir Arrow %% dir: 0=left 1=rigth\n"
 printf "%% jcol ori end Join\n"
 for (l=maxlayer;l>=0;l--) {          ### Plotting features by layers...  
   for (i=1;i<=LAST[SEQ];i++) {
     name=SEQ SUBSEP "-" SUBSEP i
     feat=FEATURE[name]
    if (feat in FTindex) {
     if (FTLayer[feat]==l) {
       bori=SQ_ORI[name]; bend=SQ_END[name];
       grpcnt[SEQ,"-",GROUP[name]]++
       if (Var["FullSizeBox_BGCOLOR"]~"##DEFAULT##") fboxcol=FTColor[FEATURE[name]]
         else fboxcol=Var["FullSizeBox_BGCOLOR"]
       if (Var["HalfSizeBox_BGCOLOR"]~"##DEFAULT##") hboxcol=FTColor[FEATURE[name]]
         else hboxcol=Var["HalfSizeBox_BGCOLOR"]
       if (FEATURE[name]!~FTExtraDisplay) {
         if (FTputLabel[FEATURE[name]]) {
           if (ApLED[name]) {
             if (OnOff(Var["Display_UserDef_BOX_LABEL"])) tlabel=LABEL[name]
             else if (OnOff(Var["Display_BOX_LABEL"])) tlabel=grpcnt[SEQ,"-",GROUP[name]]
             }
           }
         else tlabel=""
         if (Var["FEATURE_LABELS_LENGTH"]>0) tlabel=substr(tlabel,1,Var["FEATURE_LABELS_LENGTH"]);
         goprt=0
         if (isq) { 
           if (ChkXlim(bori,bend)) {
             bori=max(bori,OSQ1); bend=min(bend,ESQ1); goprt=1 } }
         else {
           if (ChkYlim(bori,bend)) {
             bori=max(bori,OSQ2); bend=min(bend,ESQ2); goprt=1 } }
         if (goprt) {
           if (FTBoxType[FEATURE[name]]~/F|f/) {
             if (OnOff(Var["Display_FullHeightBOX"])) {
               printf"(%s) ElmFont %s %s %s Box\n", checklbl(tlabel), fboxcol, bori, bend }
             if (OnOff(Var["Display_ARROW"]) && FTputArrow[FEATURE[name]] && STRAND[name]!="." ) {
               printf"%s %s %s %s Arrow\n", stcol(Var["Strand-Arrows_COLOR"]), bori, bend, STRAND[name] }
             }
           else if (FTBoxType[FEATURE[name]]~/H|h/ && OnOff(Var["Display_HalfHeightBOX"])) {
             printf"%s %s %s FBox\n", hboxcol, bori, bend }
           }
         }  # if FTExtraDisplay
       }  # if FTLayer
     }  # if feat in FTindex
   }  # for i
 }  # for l
  #
  if (OnOff(Var["Display_JOINS"]) && OnOff(Var["Display_FullHeightBOX"])) {
    G_ORI[GROUP[SEQ,"-",1]]=SQ_ORI[SEQ,"-",1]
    for (i=1;i<LAST[SEQ];i++) {
     name=SEQ SUBSEP "-" SUBSEP i
     nxtn=SEQ SUBSEP "-" SUBSEP (i+1)
     gname=GROUP[name]
     feat=FEATURE[name]
     if (FTputJoin[feat] && feat!~FTExtraDisplay) {
       if (G_ORI[gname]>SQ_ORI[name]) G_ORI[gname]=SQ_ORI[name]
       if (G_END[gname]<SQ_END[name]) G_END[gname]=SQ_END[name]
       if (FEATURE[nxtn]~feat) {
         if (gname==GROUP[nxtn]) {
           bori=SQ_END[name]; bend=SQ_ORI[nxtn]; jprt=0
           if (isq) {
             if (ChkXlim(bori,bend)) {
               bori=max(bori,OSQ1); bend=min(bend,ESQ1); jprt=1 }
             }
           else { 
             if (ChkYlim(bori,bend)) {
               bori=max(bori,OSQ2); bend=min(bend,ESQ2); jprt=1 }
             }  
           if (jprt) printf "%s %s %s Join\n", stcol(Var["Join-Lines_COLOR"]), bori, bend
           }
         else G_ORI[GROUP[nxtn]]=SQ_ORI[nxtn]
         }
       }
     }
     if ((G_END[gname]<SQ_END[SEQ,"-",LAST[SEQ]]) && FEATURE[SEQ,"-",LAST[SEQ]]==feat) {
       G_END[gname]=SQ_END[SEQ,"-",LAST[SEQ]] }
   }  # if Joins & FullBoxes 
  #
  if (OnOff(Var["Display_GENE_LABEL"])) {
   printf "%% (label) TagFont ori end GnBanner\n"
    if (isq) s_nm=SEQ1LABEL;
    else s_nm=SEQ2LABEL;     
    for (nm=1;nm<=gpsqcnt[s_nm];nm++) {
     gpn=s_nm SUBSEP nm;
     glbl=GP_NAME[gpn];
     gori=GP_ORI[gpn];
     gend=GP_END[gpn];
     goprt=0;
     if (Var["GROUP_LABELS_LENGTH"]>0) glabel=substr(glbl,1,Var["GROUP_LABELS_LENGTH"]);
     else glabel=glbl;
     if (isq) {
       if (ChkXlim(gori,gend)) { gori=max(gori,OSQ1); gend=min(gend,ESQ1); goprt=1 } }
     else {
       if (ChkYlim(gori,gend)) { gori=max(gori,OSQ2); gend=min(gend,ESQ2); goprt=1 } }
     if (goprt && feat~FTGeneBounds) {
       printf "(%s) TagFont %s %s %s GnBanner\n", checklbl(glabel), gori, gend, OnOff(Var["Display_GENE_RULE"]);
       }
     } # for
   }  # if GENE_LABEL
}  # function
function PLOTREMARKS(SEQ,isr    ,tt) {
 if (ish) tt="HORIZONTAL"; else tt="VERTICAL";
 PrintRPT("*** PLOT Remarks * " tt " AXES\n");
 #
 for (h=1;h<=LAST[SEQ];h++) {
   xtname=SEQ SUBSEP "-" SUBSEP h
   bori=SQ_ORI[xtname]; bend=SQ_END[xtname];
   grpcnt[SEQ,"-",GROUP[xtname]]++
   if (FEATURE[xtname]~FTRectangle || FEATURE[xtname]~FTCircle || FEATURE[xtname]~FTText) {
     if (ChkColor(SOURCE[xtname])) xtcolor=SOURCE[xtname]
     else xtcolor=Var["FOREGROUND_COLOR"]
     xto=split(SQ_ORI[xtname],o,":")
     if (xto==1) o[2]=0
     xte=split(SQ_END[xtname],e,":")
     if (xte==1) e[2]=0
     }
   goprt=0
   toprt=0
   if (FTRectangle!~"##DEFAULT##" && FEATURE[xtname]~FTRectangle) {
     if (isr) {
       if (ChkXlim(o[1],e[1])) {
         o[1]=max(o[1],OSQ1); e[1]=min(e[1],ESQ1); goprt=1 }
       if (ChkYlim(o[2],e[2])) {
         o[2]=max(o[2],OSQ2); e[2]=min(e[2],ESQ2); toprt=1 }
       }
     else {
       if (ChkXlim(o[2],e[2])) {
         o[2]=max(o[2],OSQ1); e[2]=min(e[2],ESQ1); goprt=1 }
       if (ChkYlim(o[1],e[1])) {
         o[1]=max(o[1],OSQ2); e[1]=min(e[1],ESQ2); toprt=1 }
       }
     if (goprt && toprt) {
       printf "%s %s %s %s %s %s Msquare\n",SCORE[xtname],xtcolor,o[1],e[1],o[2],e[2] }
     }
   if (FTCircle!~"##DEFAULT##" && FEATURE[xtname]~FTCircle) {
     if (ChkXlim(o[1],o[1])) { goprt=1 }
     if (ChkYlim(e[1],e[1])) { toprt=1 }
     if (goprt && toprt) printf "%s %s %s %s %s Mcircle\n",SCORE[xtname],xtcolor,o[2],o[1],e[1]
     }
   if (FTText!~"##DEFAULT##" && FEATURE[xtname]~FTText) {
     if (ChkXlim(o[1],o[1])) { goprt=1 }
     if (ChkYlim(e[1],e[1])) { toprt=1 }
     if (goprt && toprt) printf "(%s) %s %s Xscm %s Yscm %s %s tshow\n",GROUP[xtname],SCORE[xtname],o[1]+o[2],e[1]+e[2],"TagFont",xtcolor
     }
   }
 }
function PLOTLINES() {
 if (hlcnt>0 && OnOff(Var["Display_RIBBON"])) {
   for (h=0;h<hlcnt;h++) { 
     PRTLine(HLary[h], HLary[h], HLWary[h], HLWcol[h]);
     # PrintRPT(sprintf("************PLOTLINES***%s:%s-%s(%s):%s\n",h,HLary[h],HLary[h],HLWary[h],HLWcol[h]));
     delete HLary[h]; delete HLary[h]; delete HLWary[h]; delete HLWcol[h];
     }
   }
 }
function PRTLine(ori,end,pct,col) {
 if (ChkXlim(ori,end)) {
   ori=max(ori,OSQ1); end=min(end,ESQ1)
   printf "%s y0 %s y1 %s %s Line\n", ori, end, pct, col
   }
 }
function PRTLineV(ori,end,pct,col) {
  if (ChkYlim(ori,end)) {
   ori=max(ori,OSQ2); end=min(end,ESQ2)
   printf "X0 %s X1 %s %s %s Line\n", ori, end, pct, col
   }
 }

function PSprologue() { 
  # Printing PostScript Variables from Setup
  printf "/flglscape %s def\n", chkpo(Var["Page_Orientation"]);
  printf "/flgcrd %s def\n", TxtBool(OnOff(Var["Show_Credits"]));
  printf "%%%% page size in points used for plot % pgA4 == 595  842\n";
  printf "/Dpage { pagedict begin pg%s flglscape { exch } if end } bdf\n", bbpgsz;
  printf "%% margins (1 cm) (Up Down Left Right - margins are XY independent)\n";
  printf "/UpM %s def\n",     "1 cm"; # chkun(Var["margin_upper"]);
  printf "/DnM %s def\n",     "1 cm"; # chkun(Var["margin_lower"]);
  printf "/LtM %s def\n",     "1 cm"; # chkun(Var["margin_left"]);
  printf "/RtM %s def\n%%\n", "1 cm"; # chkun(Var["margin_right"]);
  printf "%% Defining background-color for objects.\n";
  printf "/BGcolor { %s } def\n", Var["BACKGROUND_COLOR"];
  printf "/FGcolor { %s } def\n", Var["FOREGROUND_COLOR"];
  printf "/BBoxcol { %s } def\n", stcol(Var["APlotBox_BGCOLOR"]);
  printf "/SBoxcol { %s } def\n", stcol(Var["PercentBox_BGCOLOR"]);
  printf "/XBoxcol { %s } def\n", stcol(Var["ExtraBox_BGCOLOR"]);
  printf "/BBXtickflg %s def  %% Blocks TickFlags\n", OnOff(Var["Display_APlot_X-Ticks"]);
  printf "/SBXtickflg %s def  %% 0:no tickscale\n", OnOff(Var["Display_Percent_X-Ticks"]);
  printf "/XBXtickflg %s def  %% 1:put tickscale\n", OnOff(Var["Display_ExtraBox_X-Ticks"]);
  printf "/BBYtickflg %s def\n", OnOff(Var["Display_APlot_Y-Ticks"]);
  printf "/SBYtickflg %s def\n", OnOff(Var["Display_Percent_Y-Ticks"]);
  printf "/XBYtickflg %s def\n", OnOff(Var["Display_ExtraBox_Y-Ticks"]);
  printf "/ShowTicks %s def\n", OnOff(Var["Display_TickMark-LABEL"]);
  printf "/axesp  %s def %% axesp 0 => Y==X : 1 => X=14 Y=14\n", OnOff(Var["XY_AXES_Same-SIZE"]);
  printf "/ZoomON %s def %% 0 Switch off zoom-marks - 1 Switch on zoom-marks\n", OnOff(Var["Zoom_Marks"]);
  printf "/GridON %s def %% 0 Switch off grid - 1 Switch on grid\n", OnOff(Var["Display_GRID"]);
  printf "/tickmx %s def   %% tickmarks\n", tmtck;
  printf "/tickmn %s def\n", tntck;
  printf "/maxtck %s def\n", smtck;
  printf "/mintck %s def\n", sntck;
  printf "/pctmxt %s def\n", pmtck;
  printf "/pctmnt %s def\n", pntck;
  printf "/xtrmxt %s def\n", xmtck;
  printf "/xtrmnt %s def\n", xntck;
  printf "/SBoxLab (%s) def\n", checklbl(SBLbl);
  printf "/XBoxLab (%s) def\n", checklbl(XBLbl);
  printf "/SBoxSLab (%s) def\n", checklbl(SBSLbl);
  printf "/XBoxSLab (%s) def\n%%\n", checklbl(XBSLbl);
  printf "/FTXangle %s def\n", Var["FEATURE_X-LABELS_ANGLE"];
  printf "/GPXangle %s def\n", Var["GROUP_X-LABELS_ANGLE"];
  printf "/FTYangle %s def\n", Var["FEATURE_Y-LABELS_ANGLE"];
  printf "/GPYangle %s def\n", Var["GROUP_Y-LABELS_ANGLE"];
  printf "/FTLbsc  %s def\n", Var["FEATURE_LABELS_FONTSIZE"];
  printf "/GPLbsc  %s def\n", Var["GROUP_LABELS_FONTSIZE"];
  printf "/MxFtLBL %s def\n", MxFtLBL;
  printf "/MxGpLBL %s def\n", MxGpLBL;
  printf "/putExon  %s def\n", tmpflag;
  printf "/putExLbl %s def\n", OnOff(Var["Display_BOX_LABEL"]);
  printf "/putGnLbl %s def\n", OnOff(Var["Display_GENE_LABEL"]);
  #
 }
#
