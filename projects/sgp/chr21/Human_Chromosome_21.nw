% -*- mode: Noweb; noweb-code-mode: perl-mode; tab-width: 4 -*-
\documentclass[11pt]{article}
%
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%        1         2         3         4         5         6         7         8
%
% # $Id: Human_Chromosome_21.nw,v 1.2 2001-10-13 18:53:10 gparra Exp $ 
%
% THIS FILE WAS GENERATED WITH THE FOLOWING COMMAND:
% ~jabril/bin/deploy Human_Chromosome_21  /home/ug/jabril/development/softjabril/deploy/data/report.nw
\usepackage{noweb}
\usepackage[a4paper,offset={0pt,0pt},hmargin={2cm,2cm},vmargin={1cm,1cm}]{geometry}
\usepackage{graphics}
\usepackage[dvips]{graphicx}
%% pstricks
\usepackage[dvips]{pstcol}
\usepackage{pstricks}
%\usepackage{pst-node}
%\usepackage{pst-char}
%\usepackage{pst-grad}
%% bibliography
\usepackage{natbib}
%% latex2html
\usepackage{url}
\usepackage{html}     
\usepackage{htmllist} 
%% tables    
\usepackage{dcolumn}
%\usepackage{colortbl}
%\usepackage{multirow}
%\usepackage{hhline}
%\usepackage{tabularx}
%% seminar
%\usepackage{semcolor,semlayer,semrot,semhelv,sem-page,slidesec}
%% draft watermark
%\usepackage[all,dvips]{draftcopy}
%\draftcopySetGrey{0.9}
%\draftcopyName{CONFIDENTIAL}{100}
%% layout
\usepackage{fancyhdr} % Do not use \usepackage{fancybox} -> TOCs disappear
%\usepackage{lscape}
%\usepackage{rotating}
%\usepackage{multicol}
%% fonts
\usepackage{times}\fontfamily{ptm}\selectfont
\usepackage{t1enc}

% noweb options
\noweboptions{smallcode}
\def\nwendcode{\endtrivlist \endgroup} % relax page breaking scheme
\let\nwdocspar=\par                    %

\input defs.tex % from <LaTeX new definitions> chunk

%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\begin{document}
%
<<HIDE: LaTeX new definitions>>=
%%%%% Colors for gff2ps
\input ColorDefs.tex

%%%%% New Commands are defined here
\newcommand{\sctn}[1]{\section{#1}}
\newcommand{\subsctn}[1]{\subsection{#1}}
\newcommand{\subsubsctn}[1]{\subsubsection{#1}}
\newcommand{\desc}[1]{\item[#1] \ \\}
\newcommand{\todo}[1]{
  \vskip 3ex
  \hspace{-0.75cm}
   \psframebox[framearc=0.2,linecolor=darkred,linewidth=1pt,
              fillstyle=solid,fillcolor=verylightyellow,framesep=2ex]{
     \begin{minipage}[t]{16cm}
     \vskip -4.75ex
     \hspace{-1.25cm}
       \psframebox[framearc=1,linecolor=darkred,linewidth=1.25pt,
               fillstyle=solid,fillcolor=verylightorange,framesep=5pt]{
               \textcolor{darkred}{\textbf{\hspace{2ex}TO DO\hspace{2ex}}}
         } % psframebox
      \begin{itemize}\setlength{\itemsep}{-0.5ex} #1 \end{itemize}
     \end{minipage}
     } % psframebox
  \vskip 1.5ex
} % newcommand todo
\newcommand{\todoitem}[2]{
  \item[$\triangleright$] [\textit{Section}~\ref{#2}, 
                           \textit{page}~\pageref{#2}]\\ {#1}
} % newcommand todoitem
<<HIDE: new LaTeX commands>>

%%%%% PSTRICKs definitions
\pslongbox{ExFrame}{\psframebox}
\newcommand{\cln}[1]{\fcolorbox{black}{#1}{\textcolor{#1}{\rule[-.3ex]{1cm}{1ex}}}}
\newpsobject{showgrid}{psgrid}{subgriddiv=0,griddots=1,gridlabels=6pt}
% \pscharpath[fillstyle=solid, fillcolor=verydarkcyan, linecolor=black, linewidth=1pt]{\sffamily\scshape\bfseries\veryHuge #1 }
<<HIDE: new LaTeX pstricks>>

%%%%% global urls
% \newcommand{\getpsf}[1]{\html{(\htmladdnormallink{Get PostScript file}{./Psfiles/#1})}}   
<<HIDE: new LaTeX urls>>

%%%%% defs
\def\noweb{\textsc{noweb}}
\def\ps{\textsc{PostScript}}
<<HIDE: new LaTeX definitions>>

%%%%% TODO defs
<<HIDE: new defs TODO>>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\def\genomelab{\textbf{Genome Informatics Research Lab}}
\def\progname{Human\_Chromosome\_21}
\def\tit{\textsc{\progname}}
%
\def\mtauthor{
 \htmladdnormallink{\texttt{author@imim.es}}
                   {MAILTO:author@imim.es?subject=[Human_Chromosome_21]}
 } % def mtauthor
%
\def\authorslist{
 The Author/s {\mdseries\small\dotfill \mtauthor } \\
 % Other authors here...\\
 } % def authorslist
\def\authorshort{
 Authors list here % Other authors here...
 } % def authorshort
%
\def\license{GNU General Public License (GNU-GPL)}
%
\def\progdesc{
Short description of your program here !!!
 } % def progdesc
%
\def\showaffiliation{
\scalebox{0.9 1}{\Large\textsl{\genomelab}}\\
Grup de Recerca en Infom\`atica Biom\`edica\\
Institut Municipal d'Investigaci\'o M\`edica\\
Universitat Pompeu Fabra\\[2ex]
 } % def showaffiliation
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Setting text for footers and headers
\fancyhead{} % clear all fields
\fancyfoot{} % clear all fields
\fancyhead[RO,LE]{\thepage}
\fancyhead[LO,RE]{\tit\quad\rightmark}
\fancyfoot[LO,LE]{\small\textbf{\genomelab}}
\fancyfoot[CO,CE]{\small\textsl{\authorshort}}
\fancyfoot[RO,RE]{\small\textbf{\today}}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
%
@

<<HIDE: new LaTeX commands>>=
@ 
<<HIDE: new LaTeX pstricks>>=
@ 
<<HIDE: new LaTeX urls>>=
@ 
<<HIDE: new LaTeX definitions>>=
@ 
<<HIDE: new defs TODO>>=
@ 

\thispagestyle{empty}

\begin{titlepage}

\ \vfill
\begin{center}
\textbf{\Huge \progname}\\[5ex]

% \textbf{\Large Authors List Here}\\[1ex]
\textbf{\Large Authors List Here}\\[5ex] 
        % \raisebox{0.85ex}{\footnotesize$\,\dag$}\\[0.5ex]

\textbf{\large --- \today ---}\\[10ex]

\begin{abstract}
\begin{center}
\parbox{0.75\linewidth}{
\progdesc
} % parbox
\end{center}
\end{abstract}

\vfill

\begin{raggedleft}
\showaffiliation
\raisebox{0.85ex}{\footnotesize$\dag\,$}{\large e-mail: \mtauthor}\\
\end{raggedleft}
\end{center}

\end{titlepage} %'

%
%%%%%%%%%%%%%%%%%%%% FRONTMATTER

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\pagenumbering{roman}
\setcounter{page}{1}
\pagestyle{fancy}
% Marks redefinition must go here because pagestyle 
% resets the values to the default ones.
\renewcommand{\sectionmark}[1]{\markboth{}{\thesection.\ #1}}
\renewcommand{\subsectionmark}[1]{\markboth{}{\thesubsection.\ \textsl{#1}}}

\tableofcontents
\listoftables
\listoffigures

\vfill
\begin{center}
{\small$<$ \verb$Id: Human_Chromosome_21.nw,v 1.2 2001-10-13 18:53:10 gparra Exp $$>$ }
\end{center}

%%%%%%%%%%%%%%%%%%%% MAINMATTER

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pagenumbering{arabic}
\setcounter{page}{1}

\sctn{Introduction}
The goal of this project is to generate as fast as posible \sgp predictions of chromosome 21. geneid and SGP using hsp must be run, evaluated, and analized in three days.
\sctn{Precition on chr21}

\subsctn{Working on data}

The following data is required :
\begin{itemize}
\item tblastx result from running chr21 Golden path april01 against WGS
\item chr21 Golden path april01 masked sequence
\item Ensenmbl annotation coordinates from Goldenpath.
\end{itemize}

<<BASH commands>>=
# Generating the datasets directory 
mkdir $DATASETS \
      $DATASETS/annotation/ $DATASETS/fasta/ $DATASETS/_tmp/ $DATASETS/_docs/ \
      $DATASETS/annotation/ensembl/ \
      $DATASETS/fasta/masked/ \
# Filling up the directories
# Annotations
grep chr21 \
   /seq/genomes/H.sapiens/releases/golden_path-01apr2001/database/ensGene.txt \
   > $DATASETS/annotation/ensembl/ensGene.chr21.txt
# Sequence 
# Pankaj has sent us the splitted sequence of hte chr21, only the fragment he 
# ran tblastx with. /projects/datasets/chr21/fasta/pankaj_fragments/
# Therefore we copy the original masked sequence obtained from the goldenpath
cp /seq/genomes/H.sapiens/releases/golden_path-01apr2001/chromFaMasked/21/chr21.fa.masked \
  $DATASETS/fasta/masked/chr21
# At this point we also cp the blast result sent by pankaj.
mkdir $ANALYSIS/blast $ANALYSIS/blast/wublast.tblastx 

cp ~pagarwal/tbx.tar.gz $ANALYSIS/_tmp/Pankaj/
@
%$

\subsctn{Processing {\tbx} results from Pankaj}

{\tbx} results provided by Pankaj must be parsed and mapped to the corresponding coords in the {\chr} sequence. The reason for such mapping is that we have multiple 100Kbp fragments from the original chromosomic sequence, which were used to run {\tbx} against mouse WGS-3X database. We had to deal with the frame issue of the HSPs fragments; once the HSP coords were mapped to the chromosome, frames also must be recomputed taking into account if HSP was in forward or in reverse strand.

<<BASH commands ANALYSIS>>=
#
# RUNNING TBLASTX
ChckDirs $ANALYSIS/blast $ANALYSIS/blast/wublast.tblastx \
         $ANALYSIS/blast/wublast.tblastx/masked3X+ ;
#
# Filtering HSPs from tblastx output (Pankaj)
IDIR="$ANALYSIS/_tmp/Pankaj/tbx" ;
ODIR="$ANALYSIS/blast/wublast.tblastx/masked3X+";
ChckDirs $ODIR $ODIR/out $ODIR/gff $ODIR/aplot $ODIR/ps $ODIR/logs ;
#
max=44800000;
counter=0 ;
while [ $counter -le $max ] ;
  do {
    echo "### COUNTER: $counter" 1>&2 ;
    if [ -e "$IDIR/chr21_"$counter"_201000" ] ;
      then
        echo "### RUNNING PARSEBLAST on $IDIR/chr21_"$counter"_201000" 1>&2 ;
        gawk '$1~/^>/ { $1=$1":"$2; gsub(/[\|]/,":",$1); }
                      { print $0; }' $IDIR/chr21_$counter"_201000" | \
        parseblast --fullgff --full-scores --comments --verbose --bit-score - \
                   2> $ODIR/logs/parseblast.chr21_$counter"_201000" | \
        gawk 'BEGIN{ OFS="\t";
                     c=ARGV[1]; SEQlen=ARGV[2]; ARGV[1]=ARGV[2]="";
                     frame[0]=3; frame[1]=1; frame[2]=2; }
              $0 !~ /^[ \t]*$/ {
                  $1="chr21"; $4+=c; $5+=c;
                  if ($7=="-") { $8=frame[((SEQlen - $5 + 1) % 3)] }
                  else { $8=frame[($4 % 3)] };
                  print $0;
              }' $counter 44907570 - ;
      fi;
    counter=`expr $counter + 200000` ;
    } ;
  done | gawk '$3 =="hsp" {print}' | sort +3n -6 +6 -7 > $ODIR/gff/chr21 ; 

#
@ 
%$

\subsctn{Running sgp}

<<BASH Functions: Running SGP>>=
run_mod_SGP () 
{
  #
  # run_mod_SGP - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGP testname sequence hspdata chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  locus="$4";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs tbx gff gtf2 cds prot logs tmp ps ps/_tmp geneid_format ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  LSEQ=$5 ;
  echo "### Building $BASE/tmp/$locus.termini file" ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"cap\", -2, 0, \".\",  
              \"+\", 0}" > $BASE/tmp/$locus.termini ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"poly\", $LSEQ - 1, $LSEQ - 1,
              \".\", \"+\", 0}" >> $BASE/tmp/$locus.termini ;
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -DE $EW -P $PARAM -S $BASE/hsp-rs/$locus \
          -R $BASE/tmp/$locus.termini $ISEQ/$locus | grep -v evidence \
          > $BASE/geneid_format/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
} 
@ 


<<BASH Functions: Filtering GENEID RAW Output>>=
#
# Script from gparra to retrieve GFF annotation from geneid big output
geneid_raw2GFF ()
{
  # USAGE:  geneid_raw2GFF output_dir geneid_file
  # filtering geneid output (obtained with "-D" option -> default output+cDNA)
  PD=$1 ;
  /bin/rm -vf $PD/gff/* $PD/prot/* $PD/cds/* ;
  gawk 'BEGIN{ OFS="\t"; odir=ARGV[1]; ARGV[1]="" }
    { if ($2=="Sequence") seqname=$3;
      if ($2=="Gene") gene=$3;
      if (NF>8 && substr($1,1,1)!="#" && $1!="Annotation")
        print seqname,"geneid_v1.1",$1,$2,$3,$4,$5,$6,seqname"_"gene \
              > odir "/gff/" seqname"_"gene;
      if (substr($1,1,1)==">") {
        if (substr($1,length($1)-1,2)=="NN") {
          print ">"seqname"_"gene > odir "/cds/" seqname"_"gene;
          bol=1;
        } else if (substr($1,length($1)-1,2)=="AA") {
          print ">"seqname"_"gene > odir "/prot/" seqname"_"gene;
          bol=2;
        };
      } else {
        if (bol==1 && NF==1 && substr($1,1,1)!=">" ) 
          print $0 > odir "/cds/" seqname"_"gene;
      };
      if (bol==2 && NF==1 && substr($1,1,1)!=">" )
        print $0 > odir "/prot/" seqname"_"gene;
    }' $PD $2 ;
}
#
@ 


<<BASH commands ANALYSIS>>=
## Running sgp
# USAGE: run_mod_SGP testname sequence hspdata chr seqlength
run_mod_SGP Hsap.masked.3X+ $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr21 44907570 ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;


## 
$SGPBIN/evaluation  $ANALYSIS/blast/wublast.tblastx/masked3X+/gff/chr22 \
    $DATASETS/annotation/set/cds/chr22 

@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{comment}
\end{comment}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%% BACKMATTER

% \newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% \bibliographystyle{apalike}
% \bibliography{/home1/rguigo/docs/biblio/References}

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\appendix

\sctn{Common code blocks}

\subsctn{PERL scripts}

<<PERL shebang>>=
#!/usr/bin/perl -w
# This is perl, version 5.005_03 built for i386-linux
#
<<Program Description>>
#
<<GNU License>>
#
<<Version Control Id Tag>>
#
use strict;
#
<<Program Info>>
my $DATE = localtime;
my $USER = defined($ENV{USER}) ? $ENV{USER} : 'Child Process';
my $host = `hostname`;
chomp($host);
#
@

<<Global Constants - Boolean>>=
my ($T,$F) = (1,0); # for 'T'rue and 'F'alse
@ %def $T $F


\subsubsctn{Timing our scripts}

The '[[Benchmark]]' module encapsulates a number of routines to help to figure out how long it takes to execute a piece of code and the whole script.

<<Use Modules - Benchmark>>=
use Benchmark;
  <<Timer ON>>
@ 

See '[[man Benchmark]]' for further info about this package. 
We set an array to keep record of timing for each section.

<<Timer ON>>=
my @Timer = (new Benchmark);
@ 

<<Common PERL subs - Benchmark>>=
sub timing() {
    push @Timer, (new Benchmark);
    # partial time 
    $_[0] || 
        (return timestr(timediff($Timer[$#Timer],$Timer[($#Timer - 1)])));
    # total time
    return timestr(timediff($Timer[$#Timer],$Timer[0]));
} # timing
@ 


\subsubsctn{Printing complex Data Structures}

With '[[Data::Dumper]]' we are able to pretty print complex data structures for debugging them.


<<Use Modules - Dumper>>=
use Data::Dumper;
local $Data::Dumper::Purity = 0;
local $Data::Dumper::Deepcopy = 1;
@ 


\subsubsctn{Common functions}

<<Skip comments and empty records>>=
next if /^\#/o;
next if /^\s*$/o;
chomp;
@

<<Common PERL subs - Min Max>>=
#
sub max() {
    my $z = shift @_;
    foreach my $l (@_) { $z = $l if $l > $z };
    return $z;
} # max
sub min() {
    my $z = shift @_;
    foreach my $l (@_) { $z = $l if $l < $z };
    return $z;
} # min
@

<<Common PERL subs - Text fill>>=
#
sub fill_right() { $_[0].($_[2] x ($_[1] - length($_[0]))) }
sub fill_left()  { ($_[2] x ($_[1] - length($_[0]))).$_[0] }
sub fill_mid()   { 
    my $l = length($_[0]);
    my $k = int(($_[1] - $l)/2);
    ($_[2] x $k).$_[0].($_[2] x ($_[1] - ($l+$k)));
} # fill_mid
@

These functions are used to report to STDERR a single char for each record processed (useful for reporting parsed records).

<<Common PERL subs - Counter>>=
#
sub counter { # $_[0]~current_pos++ $_[1]~char
    print STDERR "$_[1]";
    (($_[0] % 50) == 0) && (print STDERR "[".&fill_left($_[0],6,"0")."]\n");
} # counter
#
sub counter_end { # $_[0]~current_pos   $_[1]~char
    (($_[0] % 50) != 0) && (print STDERR "[".&fill_left($_[0],6,"0")."]\n");
} # counter_end
@

<<Global Vars - Counter>>=
my ($n,$c); # counter and char (for &counter function)
@ %def $n $c


\subsubsctn{Common functions for reporting program processes}
\label{sec:messagerpt}

Function '[[report]]' requires that a hash variable '[[%MessageList]]' has been set, such hash contains the strings for each report message we will need. The first parameter for '[[report]]' is a key for that hash, in order to retrieve the message string, the other parameters passed are processed by the [[sprintf]] function on that string.

<<Common PERL subs - STDERR>>=
sub report() { print STDERR sprintf($MessageList{ shift @_ },@_) }
@

The same happens to '[[warn]]' function which also requires a hash variable '[[%ErrorList]]' containing the error messages.

<<Common PERL subs - STDERR>>=
sub warn() { print STDERR sprintf($ErrorList{ shift @_ }, @_) }
@

\subsctn{AWK scripts}

<<GAWK shebang>>=
#!/usr/bin/gawk -f
# GNU Awk 3.0.4
<<Version Control Id Tag>>
@

\subsctn{BASH scripts}

<<BASH shebang>>=
#!/usr/bin/bash
# GNU bash, version 2.03.6(1)-release (i386-redhat-linux-gnu)
<<Version Control Id Tag>>
#
SECONDS=0 # Reset Timing
# Which script are we running...
L="####################"
{ echo "$L$L$L$L";
  echo "### RUNNING [$0]";
  echo "### Current date:`date`";
  echo "###"; } 1>&2;
@

<<BASH script end>>=
{ echo "###"; echo "### Execution time for [$0] : $SECONDS secs";
  echo "$L$L$L$L";
  echo ""; } 1>&2;
#
exit 0
@

\subsctn{Version control tags}

This document is under Revision Control System (RCS). The version you are currently reading is the following:

<<Version Control Id Tag>>=
# $Id: Human_Chromosome_21.nw,v 1.2 2001-10-13 18:53:10 gparra Exp $
@ 

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Extracting code blocks from this document}

From this file we can obtain both the code and the
documentation. The following instructions are needed:

\subsctn{Extracts Script code chunks from the {\noweb} file} % \\[-0.5ex]

Remember when tangling that '-L' option allows you to include program line-numbering relative to original {\noweb} file. Then the first line of the executable files is a comment, not a shebang, and must be removed to make scripts runnable.

<<tangling>>=
# showing line numbering comments in program
notangle -L -R"Human_Chromosome_21" $WORK/$nwfile.nw | \
    perl -ne '$.>1 && print' | cpif $BIN/Human_Chromosome_21 ;
chmod a+x $BIN/Human_Chromosome_21 ;
@ 

<<tangling>>=
# reformating program with perltidy
notangle -R"Human_Chromosome_21" $WORK/$nwfile.nw | \
    perltidy - | cpif $BIN/Human_Chromosome_21 ;
# html pretty-printing program with perltidy
notangle -R"Human_Chromosome_21" $WORK/$nwfile.nw | \
    perltidy -html - | cpif $DOCS/html/Human_Chromosome_21.html ;
#
@ 

\subsctn{Extracting different Config Files} % \\[-0.5ex]

<<tangling>>=
notangle -R"root" $WORK/$nwfile.nw | \
         cpif $DATA/root_config ;
@ %$

\subsctn{Extracting documentation and \LaTeX{}'ing it} % \\[-0.5ex] %'

<<tangling>>=
notangle -Rweaving  $WORK/$nwfile.nw | cpif $WORK/nw2tex ;
notangle -RLaTeXing $WORK/$nwfile.nw | cpif $WORK/ltx ;
chmod a+x $WORK/nw2tex $WORK/ltx;
@ 

<<tangling complementary LaTeX files>>=
notangle -R"HIDE: LaTeX new definitions" $WORK/$nwfile.nw | cpif $DOCS/defs.tex ;
notangle -R"HIDE: TODO" $WORK/$nwfile.nw | cpif $DOCS/todo.tex ; 
@ 

<<weaving>>=
<<BASH shebang>>
# weaving and LaTeXing
<<BASH Environment Variables>>
<<tangling complementary LaTeX files>>
noweave -v -t4 -delay -x -filter 'elide "HIDE: *"' \
        $WORK/$nwfile.nw | cpif $DOCS/$nwfile.tex ;
# noweave -t4 -delay -index $WORK/$nwfile.nw > $DOCS/$nwfile.tex 
pushd $DOCS/ ;
#
latex $nwfile.tex ;
dvips $nwfile.dvi -o $nwfile.ps -t a4 ;
#
popd;
<<BASH script end>>
@ 

<<LaTeXing>>=
<<BASH shebang>>
# only LaTeXing
<<BASH Environment Variables>>
pushd $DOCS/ ;
#
echo "### RUNNING LaTeX on $nwfile.tex" 1>&2 ;
latex $nwfile.tex ; 
latex $nwfile.tex ; 
latex $nwfile.tex ;
dvips $nwfile.dvi -o $nwfile.ps -t a4 ;
#
# pdflatex $nwfile.tex ;
echo "### CONVERTING PS to PDF: $nwfile" 1>&2 ;
ps2pdf $nwfile.ps $nwfile.pdf ;
#
popd ;
<<BASH script end>>
@ %$

\subsctn{Defining working shell variables for the current project} % \\[-0.5ex]

<<BASH Environment Variables>>=
#
# Setting Global Variables
WORK="/projects/sgp/chr21/_docs" ;
BIN="$WORK/bin" ;
PARAM="$BIN/param" ;
SRC="$WORK/src" ; # where to put the distributable files
DOCS="$WORK/docs" ;
DATA="$WORK/data" ;
TEST="$WORK/tests" ;
nwfile="Human_Chromosome_21" ;
export WORK BIN PARAM DOCS DATA nwfile ;
#
DATASETS="/projects/datasets/chr21" ;
ANALYSIS="/projects/sgp/chr21" ;
SGPBIN="/projects/sgp/bin" ;
SGPPARAM="$SGPBIN/param" ;
export DATASETS ANALYSIS SGPBIN SGPPARAM;
# Allowing for users and group file permisions
umask 002;
@ 

<<tangling>>=
# 
# BASH Environment Variables
notangle -R'BASH Environment Variables' $WORK/$nwfile.nw | \
         cpif $WORK/.bash_VARS ; 
source $WORK/.bash_VARS ;
#
@

%
\end{document}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
