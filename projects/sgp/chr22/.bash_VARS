#
# NOWEB Document Variables
# 
WORK="$HOME/development/projects/sgp/chr22" ;
BIN="$WORK/bin" ;
PARAM="$BIN/param" ;
DOCS="$WORK/docs" ;
DATA="$WORK/data" ;
nwfile="Human_Chromosome_22" ;
export WORK BIN PARAM DOCS DATA nwfile ;
#
# CHR22 Dataset Variables
#
DATASETS="/projects/datasets/chr22" ;
ANALYSIS="/projects/sgp/chr22" ;
SGPBIN="/projects/sgp/bin" ;
SGPPARAM="$SGPBIN/param" ;
#
ID="$DATASETS/id" ;
HSAP="$DATASETS/id.Hsap" ;
MMUS="$DATASETS/id.Mmus" ;
export DATASETS ANALYSIS SGPBIN SGPPARAM ID HSAP MMUS ;
#
SPLICING="/projects/splicing/chr22" ;
export SPLICING ;
# Allowing for users and group file permisions
umask 002;
#
# BASIC Shell Functions
#
ChckDirs ()
{
  #
  # USAGE: ChckDirs <path_list>
  #
  for name in "$@" ;
    do {
         [ -d "$name" ] && 
           echo "### Directory Already Exist: $name" ||
             mkdir --verbose $name ;
      } ;
    done ;
}
#
renameSEQS ()
{
  #
  # USAGE: renameSEQS ls_command reg_exp substitution_value
  # Example: renameSEQS 'ls -1 HOXa*' '^HOXa' 'HOXA'
  #
  $1 | while read n ; 
    do {
      k=`echo $n | sed "s/$2/$3/"` ;
      [ -e "$n" ] && mv -v $n $k || echo "## FILE DOES NOT EXIST: $n" ;
    } ;
    done ;
}
#
MergeFiles ()
{
  #
  # USAGE: MergeFiles <working_path>
  #
  echo "### REMOVING OLD FILES..." ;
  [ -e $1/all.Hsap ] && 
    /bin/rm --force --verbose $1/all.Hsap ;
  [ -e $1/all.Mmus ] &&
    /bin/rm --force --verbose $1/all.Mmus ;
  echo "### WORKING on HUMAN LOCI..." ;
  cat $HSAP | while read locus ;
    do { cat $1/$locus >> $1/all.Hsap ; } ; done ;
  echo "### WORKING on MOUSE LOCI..." ;
  cat $MMUS | while read locus ;
    do { cat $1/$locus >> $1/all.Mmus ; } ; done ;
  echo "### MERGING HUMAN and MOUSE..." ;
  cat $1/all.Hsap $1/all.Mmus > $1/all ;
}
#
MergeGFF () 
{
  #
  # USAGE: MergeGFF <working_path> <species_id> <flag>
  #
  flag=0 ;
  [ "$3" = "1" ] && flag=1 ; 
  echo "### REMOVING OLD FILES..." ;
  [ -e $1/all.$2 ] && 
    /bin/rm --force --verbose $1/all.$2 ;
  echo "### WORKING on $2 LOCI..." ;
  c=0 ;
  while read locus ;
    do {
         let c=c+1 ;
         [ $c -gt 1 ] && echo '#$ ' >> $1/all.$2 ;
         [ $flag -eq 1 ] &&
             cat $DATASETS/annotation/length/$locus >> $1/all.$2 ;
         gawk 'BEGIN{OFS="\t"}
             ($1 !~ /^#/ && $3 != "Gene") {
                 print $0;
             }' $1/$locus | sort +3n -5 - >> $1/all.$2 ; 
       } ;
    done < $DATASETS/id.$2 ;
}
#
MergeALLGFF () 
{
  #
  # USAGE: MergeGFF <working_path>
  #
  echo "### WORKING on HUMAN LOCI..." ;
  MergeGFF $1 Hsap 1 ;
  echo "### WORKING on MOUSE LOCI..." ;
  MergeGFF $1 Mmus 1 ;
  echo "### MERGING HUMAN and MOUSE..." ;
  echo '#$ ' | cat $1/all.Hsap - $1/all.Mmus > $1/all ;
}
#
# Processing GTF annotation files
get_annotation ()
{
  # USAGE:  get_annotation GFFfeature input_file
  perl -ne 'BEGIN{ $feat = shift @ARGV; }
      chomp;
      if ($_ =~ m/^\#/o) {
          print STDERR "$_\n";
      } else {
          @fields = split /\s+/og, $_;
          ($fields[2] eq $feat) && do {
              $fields[0] = "chr22";
              ($fields[8] = $fields[9]) =~ s/[";]//og; 
              print STDOUT join("\t",@fields[0 .. 8])."\n";
          };
      } ' $1 $2 | sort +0 -1 +3n +4n ;
}
#
#
# PREPARING EVALUATION STUFF
export GENEIDVERSION="geneid v1.1" ;
#
run_evaluation ()
{
  #
  # USAGE:
  #     run_evaluation #chrom program param prog_results_dir annotation_dir testset
  # run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/all all ;
  #
  CHR="$1" ;
  prog="$2" ;
  PROG=`echo $prog | tr a-z A-Z` ;
  RUN="$3" ;
  BASE="$4/$RUN" ;
  RESULTS="$BASE/gff/chr$CHR" ;
  SUBSET="$6" ;
  TESTSET="$5/chr$CHR" ;
  LONG_OUTPUT="$BASE/eval_$prog.$RUN.chr${CHR}_$SUBSET" ;
  SHORT_OUTPUT="$BASE/eval_${prog}_brief.$RUN.chr${CHR}_$SUBSET" ;
  GVER="------------------------- <${GENEIDVERSION}> -------------------------";
  # EVALUATION tool command-line options:
  #  -v: Verbose. Print all messages
  #  -a: Average. Print average stats (more than 1 sequence)
  #  -t: Total. Print total stats (more than 1 sequence)
  #  -s: Short. Print a short output
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $LONG_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $LONG_OUTPUT ;
  $SGPBIN/evaluation -ta $RESULTS $TESTSET >> $LONG_OUTPUT ;
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $SHORT_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $SHORT_OUTPUT ;
  $SGPBIN/evaluation -tsa $RESULTS $TESTSET >> $SHORT_OUTPUT ;
}
#
#
# RUNNING GENEID
run_GENEID () 
{
  #
  # run_GENEID - Running GENEID on a chromosome
  #
  # USAGE: run_GENEID testname sequence chr geneidversion
  #
  SECONDS=0;
  PROG="GENEID" ; prog="geneid" ;
##  GENEID="/projects/sgp/param/geneid/human3iso.param" ;
##  CMD="/projects/sgp/bin/geneid -vG" ;
  version=$4 ;
  [ "$version" ] || { 
      echo "### Running version 1.0 by default"; version="1.0"; };
  if [ "$version" == "1.0" ] ;
    then 
      GENEID="/usr/local/molbio/Install/geneid_v1.0/param/human3iso.param" ;
      CMD="/usr/local/molbio/bin/geneid -vG" ;
    else
      GENEID="/home/ug/gparra/Research/selfgenome/src/geneid_v1.1/param/human3iso.param" ;
      CMD="/home/ug/gparra/Research/selfgenome/bin/geneid -vG" ;
  fi ;
      # GENEID tool command-line options:
      #  '-v' be verbose
      #  '-G' GFF output
  # Setting VARS
  MAIN="$ANALYSIS/geneid" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  locus="$3";
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Run program
  echo "### Running $PROG on $locus ..." 1>&2 ;
  $CMD $ISEQ/$locus > $ODIR/$locus 2> $EDIR/$locus ;
  cp $ODIR/$locus $ODIR/$locus.${prog}_v$version ;
  #
  { echo "###"; echo "### Execution time for [$0] : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
#
#
# RUNNING SGP
run_GENEIDevidences () 
{
  #
  # run_GENEIDevidences - Running geneid for a given sequence set
  #
  # USAGE: run_GENEIDevidences testname sequence evidence_file chr
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="GENEID" ; prog="geneid" ;
  # Setting VARS
  MAIN="$ANALYSIS/geneid" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  EVIDENCES="$3" ;
  locus="$4" ;
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs geneid_format tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  GNDBIN="/home/ug/gparra/Research/selfgenome" ;
  GENEID="$GNDBIN/bin/geneid" ;
  PARAM="$GNDBIN/src/geneid_v1.1/param/human3iso.param" ;
  echo "### Running geneid" ;
  $GENEID -v -D -E $EW -P $PARAM \
          -R $EVIDENCES $ISEQ/$locus \
          2>&1 > $BASE/geneid_format/$locus | tee $BASE/logs/geneid.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
#
#
# Script from gparra to retrieve GFF annotation from geneid big output
geneid_raw2GFF ()
{
  # USAGE:  geneid_raw2GFF output_dir geneid_file
  # filtering geneid output (obtained with "-D" option -> default output+cDNA)
  PD=$1 ;
  /bin/rm -vf $PD/gff/* $PD/prot/* $PD/cds/* ;
  gawk 'BEGIN{ OFS="\t"; odir=ARGV[1]; ARGV[1]="" }
    { if ($2=="Sequence") seqname=$3;
      if ($2=="Gene") gene=$3;
      if (NF>8 && substr($1,1,1)!="#" && $1!="Annotation")
        print seqname,"geneid_v1.1",$1,$2,$3,$4,$5,$6,seqname"_"gene \
              > odir "/gff/" seqname"_"gene;
      if (substr($1,1,1)==">") {
        if (substr($1,length($1)-1,2)=="NN") {
          print ">"seqname"_"gene > odir "/cds/" seqname"_"gene;
          bol=1;
        } else if (substr($1,length($1)-1,2)=="AA") {
          print ">"seqname"_"gene > odir "/prot/" seqname"_"gene;
          bol=2;
        };
      } else {
        if (bol==1 && NF==1 && substr($1,1,1)!=">" ) 
          print $0 > odir "/cds/" seqname"_"gene;
      };
      if (bol==2 && NF==1 && substr($1,1,1)!=">" )
        print $0 > odir "/prot/" seqname"_"gene;
    }' $PD $2 ;
}
#
#
# RUNNING SGP
run_mod_SGP () 
{
  #
  # run_mod_SGP - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGP testname sequence hspdata chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  locus="$4";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  # SGP2="/home/ug/rguigo/research/humus/SGP2-2/sggp2/bin" ;
  # GENEID="$SGP2/geneid" ; # geneid v1.0
  # PARAM="$SGP2/human3iso.param" ;
  # # GENEID="/home/ug/gparra/Research/selfgenome/bin/geneid" ; # geneid v1.1
  # # PARAM="/home/ug/gparra/Research/selfgenome/src/geneid_v1.1/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  LSEQ=$5 ;
  echo "### Building $BASE/tmp/$locus.termini file" ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"cap\", -2, 0, \".\",  
              \"+\", 0}" > $BASE/tmp/$locus.termini ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"poly\", $LSEQ - 1, $LSEQ - 1,
              \".\", \"+\", 0}" >> $BASE/tmp/$locus.termini ;
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -E $EW -GP $PARAM -S $BASE/hsp-rs/$locus \
          -R $BASE/tmp/$locus.termini $ISEQ/$locus | grep -v evidence \
          > $BASE/gff/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
} 
#
# Geneid compiled on ik13 but when running on monstre we got this:
#
#  /home/ug/gparra/Research/selfgenome/bin/geneid: 
#    /lib/libc.so.6: version 'GLIBC_2.1.3' not found 
#    (required by /home/ug/gparra/Research/selfgenome/bin/geneid)
#
#
# RUNNING SGP + Evidences
#
run_mod_SGPevidences () 
{
  #
  # run_mod_SGPevidences - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGPevidences testname sequence hspdata evidences chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  EVIDENCES="$4" ;
  locus="$5";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  LSEQ=$6 ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs geneid_format tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -D -E $EW -P $PARAM -S $BASE/hsp-rs/$locus \
          -R $EVIDENCES $ISEQ/$locus \
          > $BASE/geneid_format/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
# 
#
# Preparing SGP files
set_feats_sgp ()
{
  # USAGE:  set_feats_sgp input_dir
  IDIR="$1";
  #
  # set tblastx GFF files from last SGP run
  ODIR="$IDIR/ps/_tmp/sr" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SR.3X"; $8="." };
          print $0;
          }' $IDIR/sr/$CHR > $ODIR/$CHR ;
  ODIR="$IDIR/ps/_tmp/sr-rs" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SR-RS.3X"; $8="." };
          print $0;
          }' $IDIR/hsp-rs/$CHR > $ODIR/$CHR ;
  #
  # set SGP GFF files from SGP run
  ODIR="$IDIR/ps/_tmp/sgp" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SGP.3X" };
          print $0;
          }' $IDIR/gff/$CHR > $ODIR/$CHR ;
}
#
#
# Extracting list of coords for predicted genes
get_gene_boundaries ()
{
  # USAGE:  get_gene_boundaries input_dir
  IDIR="$1" ;
  ODIR="$IDIR/ps/_tmp" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  
}
#
#
run_GFF2PS ()
{
  # 
  # run_GFF2PS - Making plots with gff2ps (a4+a3+wide formats)
  #
  # USAGE: run_GFF2PS working_dir "GFF_files_list" custom_file_root [ps_tail]
  #
  # 'working_dir' where to save plots
  # "GFF_files_list" a list of GFF files (with full path) to be plotted
  #
  ODIR="$1/gff2ps" ;
  GFFfiles="$2" ;
  PARM="$BIN/param/gff2ps/$3" ;
  [ "$4" ] && XTR="$4" || XTR="";
  #
  ChckDirs $ODIR \
           $ODIR/a3      $ODIR/a4      $ODIR/wide \
           $ODIR/a3/logs $ODIR/a4/logs $ODIR/wide/logs ;
  #
  CHR="chr22" ;
  START="-S 13000000" ;
  #
  gff2ps -VC ${PARM}_wide.rc $START -- $GFFfiles \
          2>&1 > $ODIR/wide/${CHR}${XTR} | tee $ODIR/wide/logs/${CHR}${XTR} ;
#  gff2ps -VC ${PARM}_a4.rc   $START -- $GFFfiles \
#          2>&1 > $ODIR/a4/${CHR}${XTR}   | tee $ODIR/a4/logs/${CHR}${XTR}   ;
#  gff2ps -VC ${PARM}_a3.rc   $START -- $GFFfiles \
#          2>&1 > $ODIR/a3/${CHR}${XTR}   | tee $ODIR/a3/logs/${CHR}${XTR}   ;
}
#
