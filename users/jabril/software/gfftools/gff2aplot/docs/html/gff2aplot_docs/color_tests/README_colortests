##################################################
#
# README_colortests
#
# This README runs as a shell script.
# Here you can find the commands
# we used to produce all the figures for:
#
#   "Color Tests for GFF2APLOT HOWTO"
#      Showing and playing with available colors and gradients.
#
# $Id: README_colortests,v 1.1 2003-02-07 19:03:26 jabril Exp $
#
##################################################
#
SECONDS=0 ;
#
#
echo "# Getting the PostScripts with GFF2APLOT" ;
#
echo "#  -> Empty Plot" ;
#
cat > empty.gff <<'+++EOF+++'
+++EOF+++
#
$BIN/gff2aplot.pl                         \
    --logs-filename color_tests_empty.log \
    --title "Empty Plot"                  \
    -- empty.gff                          \
     > color_tests_empty.ps               \
    2> color_tests_empty.err              ;
#
$BIN/gff2aplot.pl                         \
    --nopswarnings                        \
    --logs-filename color_tests_empty.log \
    -- empty.gff                          \
     > color_tests_Empty.ps               \
    2> color_tests_Empty.err              ;
#
echo "#  -> Generating color boxes custom file" ;
#
perl -e '
  use strict;
  my $file = shift @ARGV;
  my @tonerange = reverse (qw/ verydeep deep verydark dark /, "",
                           qw/ light verylight pale verypale /);
  my @colorname = qw/ grey pink magenta violet blue skyblue cyan
                      seagreen green limegreen yellow orange red brown /;
  open(RCF,"> $file.rc");
  print RCF "#\n# Axes annotation for color example\n";
  print RCF <<"+++EOD+++";
# X #

# box <Xori> <Xend> <Yori> <Yend>
#     [ L:<line_color> ] [ S:<line_style> ] [ W:<line_width> ]
#     [ F:<fill_color> ] [ K:<score> ]
+++EOD+++
  my ($ox,$oy,$s) = (25,25,100);
  my ($x,$y,$lx,$ly,$c,$t);
  $x = $ox;
  foreach $c (@colorname) {
    $y  = $oy;
    $lx = $x + $s;
    foreach $t (@tonerange) {
      $ly = $y + $s;
      print RCF "box $x $lx $y $ly L:black S:solid W:1pt F:$t$c\n";
      $y = $ly;
    }; # foreach $t
    $x = $lx;
  }; # foreach $c
  print RCF "### EOF ###\n";
  close(RCF);
  open(GFF,"> $file.gff");
  print GFF "#\n# Axes annotation for color example\n";
  $x = $ox + ($s / 2);
  foreach $c (@colorname) {
    print GFF "color name label $x $x . . . color; id \"$c\"\n";
    $x += $s;
  }; # foreach $c
  $y = $oy + ($s / 2);
  foreach $t (@tonerange) {
    $t eq "" && ($t = "rawcolor");
    print GFF "tone range label $y $y . . . color; id \"$t\"\n";
    $y += $s;
  }; # foreach $t
  print GFF "### EOF ###\n";
  close(GFF);
 ' color_boxes
#
echo "#  -> Standard Color Map" ;
#
$BIN/gff2aplot.pl                         \
    --logs-filename color_tests_scmap.log \
    --custom-filename color_boxes.rc      \
    --hide-grid                           \
    -- color_boxes.gff                    \
     > color_tests_scmap.ps               \
    2> color_tests_scmap.err              ;
#
$BIN/gff2aplot.pl                         \
    --logs-filename color_tests_SCMap.log \
    --custom-filename color_boxes.rc      \
    --hide-grid                           \
    --nopswarnings                        \
    --x-sequence-coords 0..1450           \
    --y-sequence-coords 0..950            \
    --aplot-xy-noteq                      \
    --feature-var '*::show_feature_label=on' \
    --feature-var '*@rawcolor::hide=on'      \
    --group-var   '*::show_group_label=off'  \
    --group-var   '*::group_shape=none'      \
    -- color_boxes.gff                    \
     > color_tests_SCMap.ps               \
    2> color_tests_SCMap.err              ;
#
cat > color_tests_SCMAP.rc <<'+++EOF+++'
#
# color_tests_SCMAP.rc
#
# L #
#
show_grid=off
show_ps_warnings=off
x_sequence_coords=0..1450
y_sequence_coords=0..950
aplot_xy_same_length=off
#
show_aplot_x_ticks=off
show_aplot_y_ticks=off
#
x_label_fontsize=25pt
y_label_fontsize=25pt
#
group_label_fontsize=0pt
#
feature_label_font=helvetica-bold
feature_label_fontsize=10pt
feature_x_label_angle=45
feature_y_label_angle=270
#
# F #
#
*::show_feature_label=on
*@rawcolor::hide=on
#
# G #
#
*::show_group_label=off
*::group_shape=none
### EOF ###
+++EOF+++
#
$BIN/gff2aplot.pl                         \
    --logs-filename color_tests_SCMAP.log \
    --custom-filename color_boxes.rc      \
    --custom-filename color_tests_SCMAP.rc \
    -T "GFF2APLOT"                        \
    -t "Standard Color Palette"           \
    --layout-var 'subtitle_fontsize=30pt' \
    -X "Color Names"  -Y "Tone Range"     \
    -- color_boxes.gff                    \
     > color_tests_SCMAP.ps               \
    2> color_tests_SCMAP.err              ;

#
echo "#  -> Multiple Alignment Colors Example..." ;
#



#
#
# Preparing web images
#
filenames () {
  cat << 'EOF';
color_tests_empty
color_tests_Empty
color_tests_scmap
color_tests_SCMap
color_tests_SCMAP
EOF
};
#
# echo "# Using \"ghostscript\" to obtain JPEG images from PS files" ;
echo "# Using \"ghostscript\" to obtain PNG images from PS files" ;
#
GS="/usr/local/bin/gs";
#
filenames | while read n ;
  do { 
    echo "# -> $n" ;
    $GS -dBATCH -dNOPAUSE -r300        \
        -sPAPERSIZE=a4 -sDEVICE=png16m \
        -sOutputFile=$n.png $n.ps      ;
    cp -v $n.png $n.s.png ;
    # mogrify is a ImageMagick tool that allow us to transform images on batch,
    # large high-resolution jpeg files are scaled down to thumbnail resolution (2479x3508=>123x175)
    # it overwrites original file (so that we previously get a renamed copy for each jpeg to process). 
    mogrify -verbose -geometry 5% $n.s.png ;
    #
    # $GS -dBATCH -dNOPAUSE -r300      \
    #     -sPAPERSIZE=a4 -sDEVICE=jpeg \
    #     -sOutputFile=$n.jpg $n.ps    ;
    # png large version is pretty smaller than jpeg
    # cp -v $n.jpg $n.s.jpg ;
    # mogrify -verbose -geometry 5% $n.s.jpg ;
    };
  done ;
convert 'vid:*.s.png'  plot_layers.summary.png 
#
echo "# Using \"ghostscript\" to obtain PDF documents from PS files" ;
#
filenames | while read n ;
  do { 
    echo "# -> $n" ;
    $GS -dBATCH -dNOPAUSE -r300          \
        -sPAPERSIZE=a4 -sDEVICE=pdfwrite \
        -sOutputFile=$n.pdf $n.ps        ;
    };
  done ;
#
#
echo "# LaTeXing all figures together..." ;
#
T="colortests";
latex $T.tex;
dvips $T.dvi -o $T.ps;
#
#
echo "###" ;
echo "### TOTAL TIME: $SECONDS seconds..." ; 
#
#
# That's all folks... ;^D
#
#        >> Copyleft (C) 2002 - Josep F. Abril <<
#
