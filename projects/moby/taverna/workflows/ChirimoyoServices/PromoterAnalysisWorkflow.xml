<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:ESYKMFO3T83" author="" title="" />
  <s:processor name="map2" boring="true">
    <s:stringconstant>map2</s:stringconstant>
  </s:processor>
  <s:processor name="MobyChangeArticleName_1">
    <s:beanshell>
      <s:scriptvalue>import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

String OutObj="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";


DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource Source1 = new InputSource(new StringReader(input));
InputSource SourceSkel = new InputSource(new StringReader(skel));

Document doc1=db.parse(Source1);
Document docsalida=db.parse(SourceSkel);

XMLSerializer serializer = new XMLSerializer();
StringWriter sw=new StringWriter();

// First, Simples
NodeList nodelist1an = doc1.getElementsByTagName("moby:Simple");
NodeList nodelist1a = doc1.getElementsByTagName("Simple");
// Second, Collection
NodeList nodelist1bn = doc1.getElementsByTagName("moby:Collection");
NodeList nodelist1b = doc1.getElementsByTagName("Collection");
// Third, secondary Parameter
NodeList nodelist1cn = doc1.getElementsByTagName("moby:Parameter");
NodeList nodelist1c = doc1.getElementsByTagName("Parameter");

NodeList[] globalS={nodelist1an,nodelist1a};
NodeList[] globalC={nodelist1bn,nodelist1b,nodelist1cn,nodelist1c};

NodeList nodelistfinal = docsalida.getElementsByTagName("moby:mobyData");

serializer.setOutputCharStream(sw);

Node comienzo = nodelistfinal.item(0);

// Common index variable for all this work
int gi;
int maxgi;

for(gi=0,maxgi=globalS.length;gi&lt;maxgi;gi++) {
	if(globalS[gi].getLength()&gt;0) {
		Node found=globalS[gi].item(0);
		// Skipping Simples inside collections
		String nname=found.getParentNode().getNodeName();
		if(nname.equals("moby:Collection") || nname.equals("Collection"))  next;
		Node changed=docsalida.importNode(found,true);
		changed.setAttribute("articleName",articleName);
		comienzo.appendChild(changed);
		break;
	}
}

if(gi==maxgi) {
	for(gi=0,maxgi=globalC.length;gi&lt;maxgi;gi++) {
		if(globalC[gi].getLength()&gt;0) {
			Node found=globalC[gi].item(0);
			// Skipping Simples inside collections
			Node changed=docsalida.importNode(found,true);
			changed.setAttribute("articleName",articleName);
			comienzo.appendChild(changed);
			break;
		}
	}
}

// Last step!!!
serializer.serialize(docsalida);
OutObj = sw.toString();

output = OutObj;</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/xml'">input</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">articleName</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/xml'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="map1" boring="true">
    <s:stringconstant>map1</s:stringconstant>
  </s:processor>
  <s:processor name="MobyChangeArticleName_2">
    <s:beanshell>
      <s:scriptvalue>import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

String OutObj="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";


DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource Source1 = new InputSource(new StringReader(input));
InputSource SourceSkel = new InputSource(new StringReader(skel));

Document doc1=db.parse(Source1);
Document docsalida=db.parse(SourceSkel);

XMLSerializer serializer = new XMLSerializer();
StringWriter sw=new StringWriter();

// First, Simples
NodeList nodelist1an = doc1.getElementsByTagName("moby:Simple");
NodeList nodelist1a = doc1.getElementsByTagName("Simple");
// Second, Collection
NodeList nodelist1bn = doc1.getElementsByTagName("moby:Collection");
NodeList nodelist1b = doc1.getElementsByTagName("Collection");
// Third, secondary Parameter
NodeList nodelist1cn = doc1.getElementsByTagName("moby:Parameter");
NodeList nodelist1c = doc1.getElementsByTagName("Parameter");

NodeList[] globalS={nodelist1an,nodelist1a};
NodeList[] globalC={nodelist1bn,nodelist1b,nodelist1cn,nodelist1c};

NodeList nodelistfinal = docsalida.getElementsByTagName("moby:mobyData");

serializer.setOutputCharStream(sw);

Node comienzo = nodelistfinal.item(0);

// Common index variable for all this work
int gi;
int maxgi;

for(gi=0,maxgi=globalS.length;gi&lt;maxgi;gi++) {
	if(globalS[gi].getLength()&gt;0) {
		Node found=globalS[gi].item(0);
		// Skipping Simples inside collections
		String nname=found.getParentNode().getNodeName();
		if(nname.equals("moby:Collection") || nname.equals("Collection"))  next;
		Node changed=docsalida.importNode(found,true);
		changed.setAttribute("articleName",articleName);
		comienzo.appendChild(changed);
		break;
	}
}

if(gi==maxgi) {
	for(gi=0,maxgi=globalC.length;gi&lt;maxgi;gi++) {
		if(globalC[gi].getLength()&gt;0) {
			Node found=globalC[gi].item(0);
			// Skipping Simples inside collections
			Node changed=docsalida.importNode(found,true);
			changed.setAttribute("articleName",articleName);
			comienzo.appendChild(changed);
			break;
		}
	}
}

// Last step!!!
serializer.serialize(docsalida);
OutObj = sw.toString();

output = OutObj;</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/xml'">input</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/plain'">articleName</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/xml'">output</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="createComparisonPairs">
    <s:description>Consumes a list of strings and returns two lists intended to be interpreted as the 'all against all' set of the inputs. By default this excludes duplicates (i.e. matching a-a) and inverses (so includes a-b but not b-a), if you want to change this then you can edit the beanshell script and follow the enclosed instructions (right click on the processor and select the 'configure beanshell' option).</s:description>
    <s:beanshell>
      <s:scriptvalue>/**
 * Script to create an all against all target from a list
 * of inputs. Configure the 'allowSelf' and 'allowInverse'
 * options to suit whether you want to allow self comparisons
 * (i.e. a-a) and inverse duplicates (i.e. both a-b and b-a) 
 * in the output.
 * tmo@ebi.ac.uk, 5th August 2005
 */

import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

boolean allowSelf = false;
boolean allowInverse = false;

String OutObj_1="";
String OutObj_2="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";


DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource Source = new InputSource(new StringReader(input));

InputSource SourceSkel_1 = new InputSource(new StringReader(skel));
InputSource SourceSkel_2 = new InputSource(new StringReader(skel));

Document doc_input=db.parse(Source);

Document docsalida_1=db.parse(SourceSkel_1);
Document docsalida_2=db.parse(SourceSkel_2);

XMLSerializer serializer_1 = new XMLSerializer();
StringWriter sw_1=new StringWriter();
XMLSerializer serializer_2 = new XMLSerializer();
StringWriter sw_2=new StringWriter();

// Simples
NodeList globalS1 = doc_input.getElementsByTagName("moby:Simple");
NodeList globalS2 = doc_input.getElementsByTagName("Simple");

NodeList[] globalS={globalS1,globalS2};

System.err.println ("nb nodes in S: " + globalS.length);
System.err.println ("nb nodes in S1: " + globalS1.getLength());

NodeList nodelistfinal_1 = docsalida_1.getElementsByTagName("moby:mobyData");
NodeList nodelistfinal_2 = docsalida_2.getElementsByTagName("moby:mobyData");

serializer_1.setOutputCharStream(sw_1);
serializer_2.setOutputCharStream(sw_2);

Node comienzo_1 = nodelistfinal_1.item(0);
Node comienzo_2 = nodelistfinal_2.item(0);

for (int i = 0; i &lt; globalS1.getLength(); i++) {
  Node foundi=globalS1.item(i);
  for (int j = 0; j &lt; globalS1.getLength(); j++) {
    Node foundj=globalS1.item(j);

    if (foundj != null) {
	System.err.println ("i, " + i + ", j, " + j + ". foundj not null");
    }
    else {
	System.err.println ("i, " + i + ", j, " + j + ". foundj is null");
    }

    if ((i != j || allowSelf) &amp;&amp; (i &lt;= j || allowInverse)) {
      Node transfered_1=docsalida_1.importNode(foundi,true);
      Node transfered_2=docsalida_2.importNode(foundj,true);

      comienzo_1.appendChild(transfered_1);
      comienzo_2.appendChild(transfered_2);

    }
  }
}

serializer_1.serialize(docsalida_1);
serializer_2.serialize(docsalida_2);

OutObj_1 = sw_1.toString();
OutObj_2 = sw_2.toString();

map1 = OutObj_1;
map2 = OutObj_2;</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/xml'">input</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="l('text/xml')">map1</s:beanshelloutput>
        <s:beanshelloutput s:syntactictype="l('text/xml')">map2</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:processor name="Create_moby_genelist_data">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.CreateMobyData</s:local>
  </s:processor>
  <s:processor name="runMatScanGFF_2">
    <s:description>Promoter regions analysis program. Matscan is a program to search putative binding sites in genomic sequences. You can search for example the Transfac database, but also MEME or jaspar matrices. This service only accepts a simple DNASequence object and returns a simple GFF object. If you want to give MatScan output to Meta-alignment program, you MUST use the 'log-likelihood matrix' mode.</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://chirimoyo.ac.uma.es/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>runMatScanGFF</s:serviceName>
      <s:authorityName>genome.imim.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="getUpstreamSeqfromEnsembl">
    <s:description>Upstream sequence retrieval tool from Ensembl database. It returns the upstream sequence of a given set of Ensembl gene identifiers. This identifiers could be external ones, such as Refseq Ids or Affymetrix ids.
 In case you select the orthologous mode, it will returns the upstream sequence of all orthologous genes of a given input gene (only one input gene identifier in that case)</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://chirimoyo.ac.uma.es/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>getUpstreamSeqfromEnsembl</s:serviceName>
      <s:authorityName>genome.imim.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="runMatScanGFF_1">
    <s:description>Promoter regions analysis program. Matscan is a program to search putative binding sites in genomic sequences. You can search for example the Transfac database, but also MEME or jaspar matrices. This service only accepts a simple DNASequence object and returns a simple GFF object. If you want to give MatScan output to Meta-alignment program, you MUST use the 'log-likelihood matrix' mode.</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://chirimoyo.ac.uma.es/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>runMatScanGFF</s:serviceName>
      <s:authorityName>genome.imim.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="runMetaAlignment">
    <s:description>Promoter regions analysis program. Meta-alignment produces alignments of sequences of TF binding sites. Use runMatScanGFF to produce the input GFF files</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://chirimoyo.ac.uma.es/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>runMetaAlignment</s:serviceName>
      <s:authorityName>genome.imim.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:link source="gene_ids_list" sink="Create_moby_genelist_data:stringvalue" />
  <s:link source="id" sink="Create_moby_genelist_data:id" />
  <s:link source="namespace" sink="Create_moby_genelist_data:namespace" />
  <s:link source="Create_moby_genelist_data:mobydata" sink="getUpstreamSeqfromEnsembl:text-formatted(genes)" />
  <s:link source="MobyChangeArticleName_1:output" sink="runMetaAlignment:GFF(map1)" />
  <s:link source="MobyChangeArticleName_2:output" sink="runMetaAlignment:GFF(map2)" />
  <s:link source="createComparisonPairs:map1" sink="runMatScanGFF_1:DNASequence(upstream_sequences)" />
  <s:link source="createComparisonPairs:map2" sink="runMatScanGFF_2:DNASequence(upstream_sequences)" />
  <s:link source="getUpstreamSeqfromEnsembl:output" sink="createComparisonPairs:input" />
  <s:link source="map1:value" sink="MobyChangeArticleName_1:articleName" />
  <s:link source="map2:value" sink="MobyChangeArticleName_2:articleName" />
  <s:link source="runMatScanGFF_1:GFF(matscan_predictions)" sink="MobyChangeArticleName_1:input" />
  <s:link source="runMatScanGFF_2:GFF(matscan_predictions)" sink="MobyChangeArticleName_2:input" />
  <s:link source="Create_moby_genelist_data:mobydata" sink="Gene_Id_Moby" />
  <s:link source="MobyChangeArticleName_1:output" sink="MatScan_Moby_1" />
  <s:link source="getUpstreamSeqfromEnsembl:output" sink="Seq1_Moby" />
  <s:link source="runMetaAlignment:output" sink="Meta_Moby_output" />
  <s:source name="namespace" />
  <s:source name="gene_ids_list" />
  <s:source name="id" />
  <s:sink name="Meta_Moby_output" />
  <s:sink name="MatScan_Moby_1" />
  <s:sink name="Gene_Id_Moby" />
  <s:sink name="Seq1_Moby" />
</s:scufl>


