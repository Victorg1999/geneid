package qalign.algo;

/**
 * @author micha
 *
 * To change this generated comment edit the template variable "typecomment":
 * Window>Preferences>Java>Templates.
 * To enable and disable the creation of type comments go to
 * Window>Preferences>Java>Code Generation.
 */
public class CostTable {
	
	public static String[] names= {"DNA",
							"RNA",
							"DNA/RNA IUPAC",
							"UNIT COST",
							"BLOSUM30",
							"BLOSUM45",
							"BLOSUM62",
							"PAM160",
							"PAM250",
							"GONNET250",
							"GONNET120"
	};

	/**
	 * Identifier for standard dna cost matrix (without ambiguities).
	 */
	public static final int DNA= 0;

	/**
	 * Identifier for standard dna cost matrix (without ambiguities).
	 */
	public static final int RNA= 1;

	/**
	 * Identifier for standard nucleotide cost matrix.
	 */
	public static final int DNARNA= 2;	

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int UNITCOST= 3;

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int BLOSUM30= 4;

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int BLOSUM45= 5;

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int BLOSUM62= 6;
	
	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int PAM160= 7;

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int PAM250= 8;

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int GONNET120= 9;

	/**
	 * Identifier for standard protein cost matrix.
	 */
	public static final int GONNET250= 10;


	static byte[][] dna= {
		{ 8},
		{'-', 0},
		{'A', 2, 0},
		{'C', 2, 2, 0},
		{'G', 2, 1, 2, 0},
		{'T', 2, 2, 1, 2, 0},
		//	  -  A  C  G  T
	};

	static byte[][] rna= {
		{ 4},
		{'-', 0},
		{'A', 2, 0},
		{'C', 2, 5, 0},
		{'G', 2, 2, 5, 0},
		{'U', 2, 5, 2, 5, 0},
		//	  -  A  C  G  U
	};

	static byte[][] dnarna= {
		{15},
		{'-', 0},
		{'A', 3, 0},
		{'C', 3, 7, 0},
		{'G', 3, 7, 7, 0},
		{'T', 3, 7, 7, 7, 0},
		{'U', 3, 7, 7, 7, 0, 0},
		{'R', 3, 3, 5, 3, 5, 5, 3},
		{'Y', 3, 5, 3, 5, 3, 3, 0, 3},	// (Y,R) not resolved
		{'K', 3, 6, 6, 3, 3, 3, 4, 4, 3},
		{'M', 3, 3, 3, 6, 6, 6, 4, 4, 0, 3},  // (M,K) not resolved
		{'S', 3, 6, 3, 3, 6, 6, 4, 4, 4, 4, 3},
		{'W', 3, 3, 6, 6, 3, 3, 4, 4, 4, 4, 0, 3},	// (W,S) not resolved
		{'B', 3, 6, 3, 3, 3, 3, 4, 3, 3, 4, 3, 4, 3},
		{'D', 3, 3, 6, 3, 3, 3, 3, 4, 3, 4, 4, 3, 4, 3},
		{'H', 3, 3, 3, 6, 3, 3, 4, 3, 4, 3, 4, 3, 4, 4, 3},
		{'V', 3, 3, 3, 3, 6, 6, 3, 4, 4, 3, 3, 4, 4, 4, 4, 3},
		{'N', 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3},
		{'X', 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3}
		//	  -  A  C  G  T  U  R  Y  K  M  S  W  B  D  H  V  N(X)		
	};

	static byte[][] pam250= {
		{ 8 },
		{'-', 0}, 
		{'C', 12,  5},
		{'S', 12, 17, 15},
		{'T', 12, 19, 16, 14},
		{'P', 12, 20, 16, 17, 11},
		{'A', 12, 19, 16, 16, 16, 15},
		{'G', 12, 20, 16, 17, 18, 16, 12},
		{'N', 12, 21, 16, 17, 18, 17, 17, 15},
		{'D', 12, 22, 17, 17, 18, 17, 16, 15, 13},
		{'E', 12, 22, 17, 17, 18, 17, 17, 16, 14, 13},
		{'Q', 12, 22, 18, 18, 17, 17, 18, 16, 15, 15, 13},
		{'H', 12, 20, 18, 18, 17, 18, 19, 15, 16, 16, 14, 11},
		{'R', 12, 21, 17, 18, 17, 19, 20, 17, 18, 18, 16, 15, 11},
		{'K', 12, 22, 17, 17, 18, 18, 19, 16, 17, 17, 16, 17, 14, 12},
		{'M', 12, 22, 19, 18, 19, 18, 20, 19, 20, 19, 18, 19, 17, 17, 11},
		{'I', 12, 19, 18, 17, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 15, 12},
		{'L', 12, 23, 20, 19, 20, 19, 21, 20, 21, 20, 19, 19, 20, 20, 13, 15, 11},
		{'V', 12, 19, 18, 17, 18, 17, 18, 19, 19, 19, 19, 19, 19, 19, 15, 13, 15, 13},
		{'F', 12, 21, 20, 20, 22, 21, 22, 21, 23, 22, 22, 19, 21, 22, 17, 16, 15, 18,  8},
		{'Y', 12, 17, 20, 20, 22, 20, 22, 19, 21, 21, 21, 17, 21, 21, 19, 18, 18, 19, 10,  7},
		{'W', 12, 25, 19, 22, 23, 23, 24, 21, 24, 24, 22, 20, 15, 20, 21, 22, 19, 23, 17, 17,  0}
	};

	static byte[][] pam160= {
		{ 8 },
		{'-',  0},
		{'C', 12,  5},
		{'S', 12, 18, 15},
		{'T', 12, 22, 16, 13},
		{'P', 12, 22, 17, 18, 10},
		{'A', 12, 21, 16, 16, 17, 14},
		{'G', 12, 23, 17, 19, 20, 17, 11},
		{'N', 12, 24, 17, 17, 19, 18, 18, 14},
		{'D', 12, 26, 18, 19, 20, 18, 18, 15, 12},
		{'E', 12, 26, 19, 19, 19, 18, 19, 17, 13, 12},
		{'Q', 12, 26, 19, 20, 18, 19, 21, 18, 16, 15, 11},
		{'H', 12, 23, 20, 21, 19, 21, 23, 16, 18, 18, 14,  9},
		{'R', 12, 22, 19, 20, 19, 21, 22, 19, 21, 21, 17, 17, 10},
		{'K', 12, 26, 19, 18, 20, 20, 21, 17, 19, 19, 18, 19, 14, 11},
		{'M', 12, 26, 21, 19, 21, 20, 23, 21, 23, 22, 19, 22, 19, 17,  8},
		{'I', 12, 21, 21, 18, 21, 19, 23, 21, 22, 21, 22, 23, 21, 21, 16, 11},
		{'L', 12, 27, 23, 21, 21, 21, 24, 22, 24, 23, 21, 21, 23, 23, 14, 16, 11},
		{'V', 12, 21, 20, 18, 20, 18, 21, 21, 22, 21, 21, 22, 22, 22, 16, 13, 17, 12},
		{'F', 12, 25, 22, 23, 23, 23, 23, 22, 26, 26, 25, 21, 23, 25, 18, 17, 17, 21,  7},
		{'Y', 12, 18, 22, 22, 26, 22, 25, 20, 24, 23, 24, 18, 25, 26, 23, 20, 20, 22, 11,  6},
		{'W', 12, 28, 20, 25, 26, 26, 28, 25, 28, 29, 26, 25, 16, 24, 27, 27, 28, 27, 18, 19,  0}
//		  -   C   S   T   P   A   G   N   D   E   Q   H   R   K   M   I   L   V   F   Y   W
	};

	static byte[][] blosum30= {
		{ 10},
		{'-',  0},
		{'C', 11,  3},
		{'S', 11, 22, 16},
		{'T', 11, 22, 18, 15},
		{'P', 11, 23, 21, 20,  9},
		{'A', 11, 23, 19, 19, 21, 16},
		{'G', 11, 24, 20, 22, 21, 20, 12},
		{'N', 11, 21, 20, 19, 23, 20, 20, 12},
		{'D', 11, 23, 20, 21, 21, 20, 21, 19, 11},
		{'E', 11, 19, 20, 22, 19, 20, 22, 21, 19, 14},
		{'Q', 11, 22, 21, 20, 20, 19, 22, 21, 21, 18, 12},
		{'H', 11, 25, 21, 22, 19, 22, 23, 21, 22, 20, 20,  6},
		{'R', 11, 22, 21, 23, 21, 21, 22, 22, 21, 21, 17, 21, 12},
		{'K', 11, 23, 20, 21, 19, 20, 21, 20, 20, 18, 20, 18, 19, 16},
		{'M', 11, 22, 22, 20, 24, 19, 22, 20, 23, 21, 21, 18, 20, 18, 14},
		{'I', 11, 22, 21, 20, 23, 20, 21, 20, 24, 23, 22, 22, 23, 22, 19, 14},
		{'L', 11, 20, 22, 20, 23, 21, 22, 22, 21, 21, 22, 21, 22, 22, 18, 18, 16},
		{'V', 11, 22, 21, 19, 24, 19, 23, 22, 22, 23, 23, 23, 21, 22, 20, 16, 19, 15},
		{'F', 11, 23, 21, 22, 24, 22, 23, 21, 25, 24, 23, 23, 21, 21, 22, 20, 18, 19, 10},
		{'Y', 11, 26, 22, 21, 22, 24, 23, 24, 21, 22, 21, 20, 20, 21, 21, 21, 17, 19, 17, 11},
		{'W', 11, 22, 23, 25, 23, 25, 19, 27, 24, 21, 21, 25, 20, 22, 23, 23, 22, 23, 19, 15,  0}
//	      -   C   S   T   P   A   G   N   D   E   Q   H   R   K   M   I   L   V   F   Y   W
	};

	
	static byte[][] blosum45= {
		{ 10},
		{'-',  0},
		{'C',  9,  3},
		{'S',  9, 16, 11},
		{'T',  9, 16, 13, 10},
		{'P',  9, 19, 16, 16,  6},
		{'A',  9, 16, 14, 15, 16, 10},
		{'G',  9, 18, 15, 17, 17, 15,  8},
		{'N',  9, 17, 14, 15, 17, 16, 15,  9},
		{'D',  9, 18, 15, 16, 16, 17, 16, 13,  8},
		{'E',  9, 18, 15, 16, 15, 16, 17, 15, 13,  9},
		{'Q',  9, 18, 15, 16, 16, 16, 17, 15, 15, 13,  9},
		{'H',  9, 18, 16, 17, 17, 17, 17, 14, 15, 15, 14,  5},
		{'R',  9, 18, 16, 16, 17, 17, 17, 15, 16, 15, 14, 15,  8},
		{'K',  9, 18, 16, 16, 16, 16, 17, 15, 15, 14, 14, 16, 12, 10},
		{'M',  9, 17, 17, 16, 17, 16, 17, 17, 18, 17, 15, 15, 16, 16,  9},
		{'I',  9, 18, 17, 16, 17, 16, 19, 17, 19, 18, 17, 18, 18, 18, 13, 10},
		{'L',  9, 17, 18, 16, 18, 16, 18, 18, 18, 17, 17, 17, 17, 18, 13, 13, 10},
		{'V',  9, 16, 16, 15, 18, 15, 18, 18, 18, 18, 18, 18, 17, 17, 14, 12, 14, 10},
		{'F',  9, 17, 17, 16, 18, 17, 18, 17, 19, 18, 19, 17, 17, 18, 15, 15, 14, 15,  7},
		{'Y',  9, 18, 17, 16, 18, 17, 18, 17, 17, 17, 16, 13, 16, 16, 15, 15, 15, 16, 12,  7},
		{'W',  9, 20, 19, 18, 18, 17, 17, 19, 19, 18, 17, 18, 17, 17, 17, 17, 17, 18, 14, 12,  0}
	//     -   C   S   T   P   A   G   N   D   E   Q   H   R   K   M   I   L   V   F   Y   W		
	};
	
	static byte[][] blosum62= {
		{ 6 },
		{'-', 0}, 
		{'C', 10,  2},
		{'S', 10, 12,  7},
		{'T', 10, 12, 10,  6},
		{'P', 10, 14, 12, 12,  4},
		{'A', 10, 11, 10, 11, 12,  7},
		{'G', 10, 14, 11, 13, 13, 11,  5},
		{'N', 10, 14, 10, 11, 13, 13, 11,  5},
		{'D', 10, 14, 11, 12, 12, 13, 12, 10,  5},
		{'E', 10, 15, 11, 12, 12, 12, 13, 11,  9,  6},
		{'Q', 10, 14, 11, 12, 12, 12, 13, 11, 11,  9,  6},
		{'H', 10, 14, 12, 13, 13, 13, 13, 10, 12, 11, 11,  3},
		{'R', 10, 14, 12, 12, 13, 12, 13, 11, 13, 11, 10, 11,  6},
		{'K', 10, 14, 11, 12, 12, 12, 13, 11, 12, 10, 10, 12,  9,  6},
		{'M', 10, 12, 12, 12, 13, 12, 14, 13, 14, 13, 11, 13, 12, 12,  6},
		{'I', 10, 12, 13, 12, 14, 12, 15, 14, 14, 14, 14, 14, 14, 14, 10,  7},
		{'L', 10, 12, 13, 12, 14, 12, 15, 14, 15, 14, 13, 14, 13, 13,  9,  9,  7},
		{'V', 10, 12, 13, 11, 13, 11, 14, 14, 14, 13, 13, 14, 14, 13, 10,  8, 10,  7},
		{'F', 10, 13, 13, 13, 15, 13, 14, 14, 14, 14, 14, 12, 14, 14, 11, 11, 11, 12,  5},
		{'Y', 10, 13, 13, 13, 14, 13, 14, 13, 14, 13, 12,  9, 13, 13, 12, 12, 12, 12,  8,  4},
		{'W', 10, 13, 14, 13, 15, 14, 13, 15, 15, 14, 13, 13, 14, 14, 12, 14, 13, 14, 10,  9,  0}
	};


	static byte[][] gonnet120= {
		
		{ 17},
		{'-',  0},
		{'C', 10,  2},
		{'S', 10, 17, 11},
		{'T', 10, 19, 14, 10},
		{'P', 10, 23, 17, 18,  6},
		{'A', 10, 17, 15, 16, 17, 11},
		{'G', 10, 21, 17, 20, 21, 17,  8},
		{'N', 10, 21, 16, 17, 20, 19, 17,  9},
		{'D', 10, 24, 17, 18, 19, 18, 18, 14,  8},
		{'E', 10, 23, 18, 18, 19, 18, 20, 17, 13,  9},
		{'Q', 10, 22, 17, 18, 18, 18, 20, 17, 17, 14,  9},
		{'H', 10, 20, 18, 18, 20, 19, 20, 15, 17, 17, 15,  6},
		{'R', 10, 21, 18, 18, 20, 19, 20, 18, 19, 18, 15, 17,  8},
		{'K', 10, 23, 18, 17, 19, 19, 20, 16, 17, 16, 15, 17, 13, 10},
		{'M', 10, 19, 20, 18, 22, 18, 23, 21, 23, 21, 18, 19, 20, 19,  7},
		{'I', 10, 20, 21, 18, 22, 19, 25, 22, 25, 22, 21, 21, 22, 21, 14,  9},
		{'L', 10, 21, 21, 20, 21, 20, 25, 23, 25, 22, 20, 21, 21, 21, 13, 14, 10},
		{'V', 10, 18, 19, 17, 21, 17, 23, 22, 23, 20, 20, 21, 21, 21, 16, 12, 15, 10},
		{'F', 10, 19, 22, 21, 24, 21, 26, 22, 25, 24, 22, 18, 23, 23, 16, 17, 15, 18,  6},
		{'Y', 10, 19, 20, 21, 23, 21, 24, 19, 22, 22, 20, 14, 20, 21, 19, 20, 19, 20, 11,  6},
		{'W', 10, 20, 22, 23, 26, 23, 23, 23, 26, 24, 22, 19, 20, 23, 20, 21, 20, 23, 14, 13,  0}
	//   -   C   S   T   P   A   G   N   D   E   Q   H   R   K   M   I   L   V   F   Y   W

	};
	
	
	static byte[][] gonnet250= {
		{ 14},
		{'-',  0},
		{'C',  8,  3},
		{'S',  8, 14, 12},
		{'T',  8, 15, 13, 12},
		{'P',  8, 17, 14, 14,  7},
		{'A',  8, 14, 13, 14, 14, 12},
		{'G',  8, 16, 14, 15, 16, 14,  8},
		{'N',  8, 16, 13, 14, 15, 15, 14, 10},
		{'D',  8, 17, 14, 14, 15, 15, 14, 12, 10},
		{'E',  8, 17, 14, 14, 15, 14, 15, 13, 12, 11},
		{'Q',  8, 17, 14, 14, 14, 14, 15, 14, 13, 13, 12},
		{'H',  8, 16, 14, 15, 15, 15, 16, 13, 14, 14, 13,  8},
		{'R',  8, 16, 14, 14, 15, 15, 15, 14, 15, 14, 13, 14, 10},
		{'K',  8, 17, 14, 14, 15, 15, 15, 13, 14, 13, 13, 14, 12, 11},
		{'M',  8, 15, 16, 15, 17, 15, 18, 16, 17, 16, 15, 16, 16, 16, 10},
		{'I',  8, 15, 16, 15, 17, 15, 19, 17, 18, 17, 16, 16, 17, 16, 12, 10},
		{'L',  8, 16, 16, 16, 17, 15, 19, 17, 18, 17, 16, 16, 16, 16, 11, 11, 10},
		{'V',  8, 14, 15, 14, 16, 14, 18, 16, 17, 16, 16, 16, 16, 16, 13, 11, 12, 11},
		{'F',  8, 15, 17, 16, 18, 17, 19, 17, 19, 18, 17, 14, 17, 18, 13, 13, 12, 14,  7},
		{'Y',  8, 15, 16, 16, 17, 16, 18, 16, 17, 17, 16, 12, 16, 16, 14, 15, 14, 15,  9,  6},
		{'W',  8, 15, 18, 18, 19, 18, 18, 18, 19, 19, 17, 15, 16, 18, 15, 16, 15, 17, 11, 10,  0}
	};
//         -   C   S   T   P   A   G   N   D   E   Q   H   R   K   M   I   L   V   F   Y   W

	static byte[][] unitcost= {
		{  0},
		{'-',  0},
		{'A', 10,  0},
		{'B', 10, 10,  0},
		{'C', 10, 10, 10,  0},
		{'D', 10, 10, 10, 10,  0},
		{'E', 10, 10, 10, 10, 10,  0},
		{'F', 10, 10, 10, 10, 10, 10,  0},
		{'G', 10, 10, 10, 10, 10, 10, 10,  0},
		{'H', 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'I', 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'J', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'K', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'L', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'M', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'N', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'O', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'P', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'Q', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'R', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'S', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'T', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'U', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'V', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'W', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'X', 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0},
		{'Y', 10, 10, 10, 10,  0, 10, 10, 10, 10, 10, 10, 10,  0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0}
	//     -   A   B   C   D   E   F   G   H   I   J   K   L   M   N   O   P   Q   R   S   T   U   V   W   X   Y
	};
	
	public static byte[][] getPAM250() {
		
		return pam250;
	}
	
	public static byte[][] getBlosum62() {
		
		return blosum62;
	}
	
	public static byte[][] getBlosum45() {
		
		return blosum45;
	}
	
	public static byte[][] getBlosum30() {
		
		return blosum30;
	}	
	
	public static byte[][] getUnitCost() {
		
		return unitcost;
	}
	
	public static byte[][] getGonnet120() {
		
		return gonnet120;
	}			
	
	public static byte[][] getGonnet250() {
		
		return gonnet250;
	}				
	
	public static byte[][] getPAM160() {
		
		return pam160;
	}	
	
	public static byte[][] getCostTable(int type) {
		
		switch(type) {
			case DNA:
				return dna;
			case RNA:
				return rna;
			case DNARNA:
				return dnarna;
			case UNITCOST:
				return unitcost;
			case PAM160:
				return pam160;
			case PAM250:
				return pam250;
			case BLOSUM30:
				return blosum30;
			case BLOSUM45:
				return blosum45;
			case BLOSUM62:
				return blosum62;
			case GONNET120:
				return gonnet120;
			case GONNET250:
				return gonnet250;
		}
		
		return null;
	}
	
	public static byte[][] getDNARNA() {
		
		return dnarna;
	}	

	public static byte[][] getDNA() {
		
		return dna;
	}
	
	public static byte[][] getRNA() {
		
		return rna;
	}		
	
	public static String[] getNames() {
		
		return names;
	}
	
	public static boolean isProteinMatrix(int type) {
		
		if ((type== PAM250)
			|| (type== PAM160)
			|| (type== BLOSUM62)
			|| (type== BLOSUM45)
			|| (type== BLOSUM30)
			|| (type== GONNET120)
			|| (type== GONNET250)
			|| (type== UNITCOST))
			return true;
		
		return false;
	}
	
	public static boolean isNucleotideMatrix(int type) {
		
		if ((type== UNITCOST)
			|| (type== DNA)
			|| (type== RNA)
			|| (type== DNARNA))
			return true;

		return false;
	}	
}
