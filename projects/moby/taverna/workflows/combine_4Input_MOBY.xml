<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:AHTHN6PNI32" author="" title="" />
  <s:processor name="Combine4Moby">
    <s:beanshell>
      <s:scriptvalue>import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

String OutObj="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";


DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource Source1 = new InputSource(new StringReader(MobyA));
InputSource Source2 = new InputSource(new StringReader(MobyB));
InputSource Source3 = new InputSource(new StringReader(MobyC));
InputSource Source4 = new InputSource(new StringReader(MobyD));
InputSource SourceSkel = new InputSource(new StringReader(skel));

Document doc1=db.parse(Source1);
Document doc2=db.parse(Source2);
Document doc3=db.parse(Source3);
Document doc4=db.parse(Source4);
Document docsalida=db.parse(SourceSkel);

XMLSerializer serializer = new XMLSerializer();
StringWriter sw=new StringWriter();

// First, Simples
NodeList nodelist1an = doc1.getElementsByTagName("moby:Simple");
NodeList nodelist1a = doc1.getElementsByTagName("Simple");
NodeList nodelist2an = doc2.getElementsByTagName("moby:Simple");
NodeList nodelist2a = doc2.getElementsByTagName("Simple");
NodeList nodelist3an = doc3.getElementsByTagName("moby:Simple");
NodeList nodelist3a = doc3.getElementsByTagName("Simple");
NodeList nodelist4an = doc4.getElementsByTagName("moby:Simple");
NodeList nodelist4a = doc4.getElementsByTagName("Simple");
// Second, Collection
NodeList nodelist1bn = doc1.getElementsByTagName("moby:Collection");
NodeList nodelist1b = doc1.getElementsByTagName("Collection");
NodeList nodelist2bn = doc2.getElementsByTagName("moby:Collection");
NodeList nodelist2b = doc2.getElementsByTagName("Collection");
NodeList nodelist3bn = doc3.getElementsByTagName("moby:Collection");
NodeList nodelist3b = doc3.getElementsByTagName("Collection");
NodeList nodelist4bn = doc4.getElementsByTagName("moby:Collection");
NodeList nodelist4b = doc4.getElementsByTagName("Collection");
// Third, secondary Parameter
NodeList nodelist1cn = doc1.getElementsByTagName("moby:Parameter");
NodeList nodelist1c = doc1.getElementsByTagName("Parameter");
NodeList nodelist2cn = doc2.getElementsByTagName("moby:Parameter");
NodeList nodelist2c = doc2.getElementsByTagName("Parameter");
NodeList nodelist3cn = doc3.getElementsByTagName("moby:Parameter");
NodeList nodelist3c = doc3.getElementsByTagName("Parameter");
NodeList nodelist4cn = doc4.getElementsByTagName("moby:Parameter");
NodeList nodelist4c = doc4.getElementsByTagName("Parameter");

// We will iterate over these lists
NodeList[] globalS={
	nodelist1an,
	nodelist1a,
	nodelist2an,
	nodelist2a,
	nodelist3an,
	nodelist3a,
	nodelist4an,
	nodelist4a,
};

NodeList[] globalC={
	nodelist1bn,
	nodelist1b,
	nodelist2bn,
	nodelist2b,
	nodelist3bn,
	nodelist3b,
	nodelist4bn,
	nodelist4b,
	nodelist1cn,
	nodelist1c,
	nodelist2cn,
	nodelist2c,
	nodelist3cn,
	nodelist3c,
	nodelist4cn,
	nodelist4c,
};

NodeList nodelistfinal = docsalida.getElementsByTagName("moby:mobyData");

serializer.setOutputCharStream(sw);

Node comienzo = nodelistfinal.item(0);

// Common index variable for all this work
int gi;
int maxgi;

// We are skipping over Collected Simples
for(gi=0,maxgi=globalS.length;gi&lt;maxgi;gi++) {
	int i;
	int maxi;
	for(i=0,maxi=globalS[gi].getLength();i&lt;maxi;i++) {
		Node found=globalS[gi].item(i);
		String nname=found.getParentNode().getNodeName();
		if(nname.equals("moby:Collection") || nname.equals("Collection"))  next;
		comienzo.appendChild(docsalida.importNode(found,true));
	}
}

for(gi=0,maxgi=globalC.length;gi&lt;maxgi;gi++) {
	int i;
	int maxi;
	for(i=0,maxi=globalC[gi].getLength();i&lt;maxi;i++) {
		Node found=globalC[gi].item(i);
		comienzo.appendChild(docsalida.importNode(found,true));
	}
}

// Last step!!!
serializer.serialize(docsalida);
OutObj = sw.toString();

CombinedMOBY = OutObj;</s:scriptvalue>
      <s:beanshellinputlist>
        <s:beanshellinput s:syntactictype="'text/xml'">MobyA</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/xml'">MobyB</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/xml'">MobyC</s:beanshellinput>
        <s:beanshellinput s:syntactictype="'text/xml'">MobyD</s:beanshellinput>
      </s:beanshellinputlist>
      <s:beanshelloutputlist>
        <s:beanshelloutput s:syntactictype="'text/xml'">CombinedMOBY</s:beanshelloutput>
      </s:beanshelloutputlist>
    </s:beanshell>
  </s:processor>
  <s:link source="MobyA" sink="Combine4Moby:MobyA" />
  <s:link source="MobyB" sink="Combine4Moby:MobyB" />
  <s:link source="MobyC" sink="Combine4Moby:MobyC" />
  <s:link source="MobyD" sink="Combine4Moby:MobyD" />
  <s:link source="Combine4Moby:CombinedMOBY" sink="MobyOutput" />
  <s:source name="MobyA">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:source>
  <s:source name="MobyB">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:source>
  <s:source name="MobyC">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:source>
  <s:source name="MobyD">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:source>
  <s:sink name="MobyOutput">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
</s:scufl>
