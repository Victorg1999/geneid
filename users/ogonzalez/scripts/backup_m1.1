#!/bin/bash

# farem un backup total un cop al mes, el primer dissabte
# farem un backup incremental diari, excepte el dia que toqui total
#
# el backup total crea un nou fitxer de referencia; aixi l'incremental
# torna a comencar de zero des de la data del total. guardo la
# referencia al mateix disc on guardo el backup, per si pogues fer falta
#
# els backups s'arrencaran a la 1 de la matinada 
#
# els backups es faran als discos sdb, sdc i sdd, tots de 17 Gb.
# en aquests moments, un du dels discos de monstre1 dona 12 Gb no
# comprimits, i el backup total ha ocupat 5.2 Gb.  emprarem aquests
# dos valors com a referencia
#
# en fer un total canviarem de disc. Si el volum lliure no sembla prou
# per ficar un backup total (emprant les referencies 12 i 5 d'abans),
# esborrarem el total mes antic i els incrementals associats
#
# ---------------- ATENCIO ----------------
# AIXO NOMES FUNCIONA DES DEL DIRECTORI /root/BACKUP_M1 DE monstre2
# NOMES root POT EXECUTAR-LO
# -----------------------------------------
#
# parametres:
#   -h: ajuda
#   -i: fer incremental
#   -t: fer total. te preferencia sobre -i


# nomes funciona des de root@monstre2:/root/BACKUP_M1
if [ `pwd` != "/root/BACKUP_M1" ]
then
   echo No som a /root/BACKUP_M1
   exit
elif [ `hostname -s` != "monstre2" ]
then
   echo No som a monstre2
   exit
elif [ `whoami` != "root" ]
then
   echo No som root
   exit
fi

estrategia=incremental # per omisio fem incremental
opcio_i=0

while [ $# != 0 ]
do
   case $1 in
      -i ) opcio_i=1
           ;;
      -t ) estrategia=total
           ;;
      *  ) echo "-h: ajuda"
           echo "-i: fer incremental"
           echo "-t: fer total. te preferencia sobre -i"
           exit
           ;;
   esac
   shift
done

# necessito un fitxer que contingui el disc local a emprar; si no hi
# es, el backup ha de ser total
if [ ! -s disc.info ]
then
   estrategia=total
fi

# tambe vull tenir un fitxer d'index (a quin disc ha anat a parar cada
# backup total + incrementals associats; si no existeix, el creo
if [ ! -s index.log ]
then
   touch index.log
fi

# trobem si avui es el primer dissabte del mes per fer
# backup total (si no hem especifitat -i)
diames=`date +%e`
diasetmana=`date +%a`
if (( diames < 8 )) && [ $diasetmana = Sat -a $opcio_i = 0 ]
then
   estrategia=total
fi

# data i hora d'avui. agafo l'hora per si de cas coincideixen 2 backups el
# mateix dia per qualsevol motiu
avui=`date +%Y%m%d-%H%M` 

# si l'estrategia es total, canvio de disc; si sembla que no hi cabra,
# esborro el total mes antic i els incrementals "associats".
# el directori actual es diu '<data inici>-actual' i en acabar es dira
# '<data inici>-<data final>'
if [ $estrategia = total ]
then
   if [ -s disc.info ]
   then # si existeix el fitxer disc.info, faig rotacio de discos
      discactual=`cat disc.info`
      mount /dev/$discactual backup
      nomdarrer=`basename backup/*actual`
      inicidarrer=${nomdarrer%-actual}
      finaldarrer=`date -r backup/$nomdarrer +%Y%m%d`
      mv backup/$nomdarrer backup/$inicidarrer-$finaldarrer
      echo "$avui: backups de $inicidarrer a $finaldarrer a disc $discactual" >>index.log
      umount backup
      case $discactual in
         sdb1 ) discnou=sdc1
                ;;
         sdc1 ) discnou=sdd1
                ;;
         sdd1 ) discnou=sdb1
                ;;
         *    ) echo ERROR: DISC INCORRECTE A ./disc.info
                exit
                ;;
      esac
   else # si no existeix, comencem emprant el primer disc
      discnou=sdb1
   fi
   echo $discnou >disc.info
   mount /dev/$discnou backup
   rm -rf backup/200* # esborro qualsevol backup antic que hi pugui haver
   mkdir backup/`date +%Y%m%d`-actual
   echo >>index.log
   echo $avui: disc actual canviat a $discnou >>index.log
else
   mount /dev/`cat disc.info` backup
fi

# monstre1: fem backup de /var/lib/mysql, /usr/local i /mnt/MD2_RAID (ftp i prediccions)
# resta   : fem backup de /usr/local
mount -t nfs -o ro monstre1:/var/lib/mysql mounts/monstre1/var/lib/mysql
mount -t nfs -o ro monstre1:/usr/local mounts/monstre1/usr/local
mount -t nfs -o ro monstre1:/mnt/MD2_RAID mounts/monstre1/mnt/MD2_RAID
mount -t nfs -o ro darwin:/aplicacions/genomics/linux mounts/general/usr/local

# tar: no cal especificar si es total o incremental. depen de l'existencia
# del fitxer de referencia
NOM=$avui-$estrategia
DIREC=`basename backup/*actual`
tar -cz -g backup/$DIREC/referencia -f backup/$DIREC/$NOM.tgz --exclude lost+found mounts 2>/tmp/$avui.log

echo -n "$avui: backup $estrategia a `cat disc.info`; " >>index.log
bytes=`ls -l backup/$DIREC/$NOM.tgz | awk '{ print $5 }'`
while [ `echo $bytes. | egrep -c '[0-9]{4}\.'` = 1 ]
do
   tmp=${bytes%%???.*}
   bytes=$tmp.${bytes#$tmp}
done

echo ${bytes%.} bytes >>index.log

# envio els logs a STDOUT perque l'script principal els envii per mail
tail -1 index.log
echo
cat /tmp/$avui.log

# guardo una copia a index.log
paste - /tmp/$avui.log >>index.log <<EOF
EOF
rm /tmp/$avui.log

# desmuntem allo que hem muntat
umount mounts/monstre1/var/lib/mysql mounts/monstre1/usr/local mounts/monstre1/mnt/MD2_RAID
umount mounts/general/usr/local
umount backup
