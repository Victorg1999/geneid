#
umask 002 ;
#
BASE="/projects" ;
HUMUS="$BASE/H.sapiens" ;
BBIN="/usr/local/molbio/share/sgp" ;
BIN="$BBIN/bin" ;
MySQLPAR="$BBIN/mySQL" ;
LIBPERL="$BBIN/libperl" ;
LIBSTEP="$BBIN/libstep" ;
SRC="$BBIN/src" ;
export BASE HUMUS BBIN BIN MySQLPAR LIBPERL LIBSTEP SRC ;
#
#
PERL5OPT="-I$BBIN/libperl" ;
export PERL5OPT;
#
#
#
# BASIC Shell Functions
#
function CheckDirs () {
  #
  # USAGE: ChckDirs <path_list>
  #
  for name in "$@" ;
    do {
         [ -d "$name" ] && 
           echo "### Directory Already Exist: $name" ||
             mkdir --verbose $name ;
      } ;
    done ;
}
#
function is_exec () {
  # USAGE: is_exec <filename_0>...<filename_N>
  for file in $@; do { [ -x $file ] || chmod a+x $file ; }; done
}
#
# Script from gparra to retrieve GFF annotation from geneid big output
geneid_raw2GFF ()
{
  # USAGE:  geneid_raw2GFF output_dir geneid_file
  # filtering geneid output (obtained with "-D" option -> default output+cDNA)
  PD=$1 ;
  /bin/rm -vf $PD/gff/* $PD/prot/* $PD/cds/* ;
  gawk 'BEGIN{ OFS="\t"; odir=ARGV[1]; ARGV[1]="" }
    { if ($2=="Sequence") seqname=$3;
      if ($2=="Gene") gene=$3;
      if (NF>8 && substr($1,1,1)!="#" && $1!="Annotation")
        print seqname,"geneid_v1.1",$1,$2,$3,$4,$5,$6,seqname"_"gene \
              > odir "/gff/" seqname"_"gene;
      if (substr($1,1,1)==">") {
        if (substr($1,length($1)-1,2)=="NN") {
          print ">"seqname"_"gene > odir "/cds/" seqname"_"gene;
          bol=1;
        } else if (substr($1,length($1)-1,2)=="AA") {
          print ">"seqname"_"gene > odir "/prot/" seqname"_"gene;
          bol=2;
        };
      } else {
        if (bol==1 && NF==1 && substr($1,1,1)!=">" ) 
          print $0 > odir "/cds/" seqname"_"gene;
      };
      if (bol==2 && NF==1 && substr($1,1,1)!=">" )
        print $0 > odir "/prot/" seqname"_"gene;
    }' $PD $2 ;
}
#
#
# Counting gene number found in geneid output
get_geneid_genes ()
{
  #
  # USAGE: get_geneid_genes geneid_out.gff > gene_list.rpt
  #
  gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }
  ' $1 | sort +1n +2n -3 - ;
}
#
#
# PREPARING EVALUATION STUFF
export GENEIDVERSION="geneid v1.1" ;
#
run_evaluation ()
{
  #
  # USAGE:
  #     run_evaluation #chrom program param       prog_results_dir \
  #                    annotation_dir           testset  lenght
  # Ex: run_evaluation 22     geneid  Hsap.masked $ANALYSIS/geneid \
  #                    $DATASETS/annotation/all all ;
  #
  CHR="$1" ;
  prog="$2" ;
  PROG=`echo $prog | tr a-z A-Z` ;
  RUN="$3" ;
  BASE="$4" ;
  RESULTS="$BASE/gff/chr$CHR" ;
  SUBSET="$6" ;
  TESTSET="$5/chr$CHR" ;
  LENSEQ="$7";
  FINALTESTSET="/tmp/tmp$$" ;
  LONG_OUTPUT="$BASE/eval_$prog.$RUN.chr${CHR}_$SUBSET" ;
  SHORT_OUTPUT="$BASE/eval_${prog}_brief.$RUN.chr${CHR}_$SUBSET" ;
  GVER="------------------------- <${GENEIDVERSION}> -------------------------";
  # EVALUATION tool command-line options:
  #  -v: Verbose. Print all messages
  #  -a: Average. Print average stats (more than 1 sequence)
  #  -t: Total. Print total stats (more than 1 sequence)
  #  -s: Short. Print a short output
  # TEMPORAL FILE ADDING A RECORD WITH THE LENGHT OF THE SEQUENCE
  gawk "BEGIN{OFS=\"\t\";\
        print \"chr\"$CHR,1,\"Sequences\",1,$LENSEQ,\".\",\".\",\".\",1}\
        {print}" $TESTSET > /tmp/tmp$$;
  # /tmp/tmp$$ temporal file containing lenght+annotation gff records
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $LONG_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $LONG_OUTPUT ;
  $SGPBIN/evaluation -ta $RESULTS $FINALTESTSET >> $LONG_OUTPUT ;
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $SHORT_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $SHORT_OUTPUT ;
  $SGPBIN/evaluation -tsa $RESULTS $FINALTESTSET >> $SHORT_OUTPUT ;
}
#
#
