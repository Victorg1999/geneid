% -*- mode: Noweb; noweb-code-mode: perl-mode; tab-width: 4 -*-
\documentclass[11pt]{article}
%
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%        1         2         3         4         5         6         7         8
%
% $Id: Human_Chromosome_22.nw,v 0.9 2001-10-24 11:05:59 gparra Exp $
%
\usepackage{noweb}
\usepackage[a4paper,offset={0pt,0pt},hmargin={2cm,2cm},vmargin={1cm,1cm}]{geometry}
\usepackage{graphics}
\usepackage[dvips]{graphicx}
%% pstricks
\usepackage[dvips]{pstcol}
\usepackage{pstricks}
%\usepackage{pst-node}
%\usepackage{pst-char}
%\usepackage{pst-grad}
%% bibliography
\usepackage{natbib}
%% latex2html
\usepackage{url}
\usepackage{html}     
\usepackage{htmllist} 
%% tables    
%\usepackage{colortbl}
%\usepackage{multirow}
%\usepackage{hhline}
%\usepackage{tabularx}
%\usepackage{dcolumn}
%% seminar
%\usepackage{semcolor,semlayer,semrot,semhelv,sem-page,slidesec}
%% draft watermark
%\usepackage[all,dvips]{draftcopy}
%\draftcopySetGrey{0.9}
%\draftcopyName{CONFIDENTIAL}{100}
%% layout
\usepackage{fancyhdr} % Do not use \usepackage{fancybox} -> TOCs disappear
%\usepackage{lscape}
\usepackage{rotating}
\usepackage{moreverb}
%\usepackage{multicol}
%% fonts
\usepackage{times}\fontfamily{ptm}\selectfont
\usepackage{t1enc}

% noweb options
\noweboptions{smallcode}
\def\nwendcode{\endtrivlist \endgroup} % relax page breaking scheme
\let\nwdocspar=\par                    %
 
% Colors for gff2ps
\input ColorDefs.tex
% New Commands are defined here
\newcommand{\sctn}[1]{\section{#1}}
\newcommand{\subsctn}[1]{\subsection{#1}}
\newcommand{\subsubsctn}[1]{\subsubsection{#1}}
\newcommand{\subsubsubsctn}[1]{\paragraph{#1}\vskip 1ex}
\newcommand{\desc}[1]{\item[#1] \ \\}

% PSTRICKs definitions
\pslongbox{ExFrame}{\psframebox}
\newcommand{\cln}[1]{\fcolorbox{black}{#1}{\textcolor{#1}{\rule[-.3ex]{1cm}{1ex}}}}
\newpsobject{showgrid}{psgrid}{subgriddiv=0,griddots=1,gridlabels=6pt}
% \pscharpath[fillstyle=solid, fillcolor=verydarkcyan, linecolor=black, linewidth=1pt]{\sffamily\scshape\bfseries\veryHuge #1 }

%%%%% global urls
% \newcommand{\getpsf}[1]{\html{(\htmladdnormallink{Get PostScript file}{./Psfiles/#1})}}   
\def\mtjabril{\htmladdnormallink{\textbf{jabril@imim.es}}{MAILTO:jabril@imim.es?subject=[CHR22 HOMOLOGY]}}
\def\mthomology{\htmladdnormallink{\textbf{homology@viaken.com}}{MAILTO:homology@viaken.com?subject=[CHR22 HOMOLOGY]}}

% defs
\def\biop{\textsc{BioPerl}}
\def\rptm{\textsc{RepeatMasker}}
\def\bl{\textsc{Blast}}
\def\bn{\textsc{blastn}}
\def\bx{\textsc{blastx}}
\def\bp{\textsc{blastp}}
\def\tbn{\textsc{tblastn}}
\def\tbx{\textsc{tblastx}}
\def\pb{\texttt{parseblast}}
\def\ps{\textsc{PostScript}}
\def\gnid{\texttt{geneid}}
\def\gnsc{\texttt{genscan}}
\def\twsc{\texttt{twinscan}}
\def\slam{\textsc{slam}}
\def\sgp{\textsc{sgp}}
\def\gps{\texttt{gff2ps}}
\def\aps{\texttt{aplot}}
\def\data{\textbf{Chromosome 22 Dataset}}
\def\chr{\textbf{Chromosome 22}}

% Setting text for footers and headers

\def\tit{\textsc{Chromosome 22 Dataset }}
\fancyhead{} % clear all fields
\fancyfoot{} % clear all fields
\fancyhead[RO,LE]{\thepage}
\fancyhead[LO,RE]{\rightmark}
\fancyfoot[LO,LE]{\small\textbf{Genome Informatics Research Lab}}
\fancyfoot[CO,CE]{\small\textsl{Abril, JF; Parra, G; Guig\'o, R}}
\fancyfoot[RO,RE]{\small\textbf{\today}}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}
@ 
\thispagestyle{empty}

\begin{titlepage}

\ \vfill
\begin{center}
\textbf{\Huge Building\\ Chromosome 22\\[1ex] Dataset}\\[5ex]

%\textbf{\Large Authors List Here}\\[1ex]
\textbf{\Large Josep F. Abril}\\[1ex]
\textbf{\Large Gen\'{\i}s Parra}\\[1ex]
\textbf{\Large Roderic Guig\'o}\\[5ex] % \raisebox{0.85ex}{\footnotesize$\,\dag$}\\[0.5ex]

\textbf{\large --- \today ---}\\[10ex]

\begin{abstract}
\begin{center}
\parbox{0.75\linewidth}{
} % parbox
\end{center}
\end{abstract}

\vfill

\begin{raggedleft}
\scalebox{0.9 1}{\Large\textsl{\textbf{Genome Informatics Research Lab}}}\\
Grup de Recerca en Infom\`atica Biom\`edica\\
Institut Municipal d'Investigaci\'o M\`edica\\
Universitat Pompeu Fabra\\[2ex]
\raisebox{0.85ex}{\footnotesize$\dag\,$}{\large e-mail: \mtjabril}\\
\end{raggedleft}
\end{center}

\end{titlepage} %'

%%%%%%%%%%%%%%%%%%%% FRONTMATTER

\newpage
\pagenumbering{roman}
\setcounter{page}{1}
\pagestyle{fancy}
% Marks redefinition must go here because pagestyle 
% resets the values to the default ones.
\renewcommand{\sectionmark}[1]{\markboth{}{\thesection.\ #1}}
\renewcommand{\subsectionmark}[1]{\markboth{}{\thesubsection.\ \textsl{#1}}}

\tableofcontents
\listoftables
\listoffigures

\vfill
\begin{center}
{\small$<$ \verb$Id: Human_Chromosome_22.nw,v 0.9 2001-10-24 11:05:59 gparra Exp $$>$ }
\end{center}

%%%%%%%%%%%%%%%%%%%% MAINMATTER

\newpage
\pagenumbering{arabic}
\setcounter{page}{1}

\sctn{Introduction}

Sequence comparisons at nucleotide/aminoacid level among phylogenetically related species would help to produce better annotations and to find new genes, as it has been suggested in the literature. At this moment, in which it has been obtained the first draf of the human genome and the mouse genome project is reaching a good sequence coverage, that approach will we useful in the re-annotation of the current human genes and in the search of novel human genes. 
\begin{comment}
Homology between human and mouse sequences serves as a useful guide for identifying genes in both organisms. Additionally, conserved sequences that have no coding potential are good candidates for regulatory elements.
-- From \url|http://bio.cse.psu.edu/mousegroup/doc.html|
An annotation of the orthologous test set of genomic sequences and their regulatory regions is available at \url|http://bio.cse.psu.edu/mousegroup/test8/|
\end{comment}

This document contains the procedures we followed to test our gene-prediction tools applying the knowledge from the training sequences (say here SCIMIT/8 Orthologous sequences) at a chromosomic scale. We work on chromosome 22, due to the fact that its assembly is almost finished (it was the first human genome finished and fully annotated [Ref DUNHAM99]). All the command-line scripts are detailed on the main sections, while stand-alone scripts are described and implemented in the appendixes. There you can also find the results for some of the analysis performed on the sequences. 

\begin{comment} 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[Ref DUNHAM99]

``The DNA sequence of human chromosome 22''
  Nature 402, 489 - 495 (dec 2, 1999)
     
I. DUNHAM, A. R. HUNT, J. E. COLLINS, R. BRUSKIEWICH, D. M. BEARE,
M. CLAMP, L. J. SMINK, R. AINSCOUGH, J. P. ALMEIDA, A. BABBAGE,
C. BAGGULEY, J. BAILEY, K. BARLOW, K. N. BATES, O. BEASLEY,
C. P. BIRD, S. BLAKEY, A. M. BRIDGEMAN, D. BUCK, J. BURGESS,
W. D. BURRILL, J. BURTON, C. CARDER, N. P. CARTER, Y. CHEN, G. CLARK,
S. M. CLEGG, V. COBLEY, C. G. COLE, R. E. COLLIER, R. E. CONNOR,
D. CONROY, N. CORBY, G. J. COVILLE, A. V. COX, J. DAVIS, E. DAWSON,
P. D. DHAMI, C. DOCKREE, S. J. DODSWORTH, R. M. DURBIN, A. ELLINGTON,
K. L. EVANS, J. M. FEY, K. FLEMING, L. FRENCH, A. A. GARNER,
J. G. R. GILBERT, M. E. GOWARD, D. GRAFHAM, M. N. GRIFFITHS, C. HALL,
R. HALL, G. HALL-TAMLYN, R. W. HEATHCOTT, S. HO, S. HOLMES,
S. E. HUNT, M. C. JONES, J. KERSHAW, A. KIMBERLEY, A. KING,
G. K. LAIRD, C. F. LANGFORD, M. A. LEVERSHA, C. LLOYD, D. M. LLOYD,
I. D. MARTYN, M. MASHREGHI-MOHAMMADI, L. MATTHEWS, O. T. MCCANN,
J. MCCLAY, S. MCLAREN, A. A. MCMURRAY, S. A. MILNE, B. J. MORTIMORE,
C. N. ODELL, R. PAVITT, A. V. PEARCE, D. PEARSON, B. J. PHILLIMORE,
S. H. PHILLIPS, R. W. PLUMB, H. RAMSAY, Y. RAMSEY, L. ROGERS,
M. T. ROSS, C. E. SCOTT, H. K. SEHRA, C. D. SKUCE, S. SMALLEY,
M. L. SMITH, C. SODERLUND, L. SPRAGON, C. A. STEWARD, J. E. SULSTON,
R. M. SWANN, M. VAUDIN, M. WALL, J. M. WALLIS, M. N. WHITELEY,
D. WILLEY, L. WILLIAMS, S. WILLIAMS, H. WILLIAMSON, T. E. WILMER,
L. WILMING, C. L. WRIGHT, T. HUBBARD, D. R. BENTLEY, S. BECK,
J. ROGERS, N. SHIMIZU, S. MINOSHIMA, K. KAWASAKI, T. SASAKI,
S. ASAKAWA, J. KUDOH, A. SHINTANI, K. SHIBUYA, Y. YOSHIZAKI, N. AOKI,
S. MITSUYAMA, B. A. ROE, F. CHEN, L. CHU, J. CRABTREE, S. DESCHAMPS,
A. DO, T. DO, A. DORMAN, F. FANG, Y. FU, P. HU, A. HUA, S. KENTON,
H. LAI, H. I. LAO, J. LEWIS, S. LEWIS, S.-P. LIN, P. LOH, E. MALAJ,
T. NGUYEN, H. PAN, S. PHAN, S. QI, Y. QIAN, L. RAY, Q. REN, S. SHAULL,
D. SLOAN, L. SONG, Q. WANG, Y. WANG, Z. WANG, J. WHITE, D. WILLINGHAM,
H. WU, Z. YAO, M. ZHAN, G. ZHANG, S. CHISSOE, J. MURRAY, N. MILLER,
P. MINX, R. FULTON, D. JOHNSON, G. BEMIS, D. BENTLEY, H. BRADSHAW,
S. BOURNE, M. CORDES, Z. DU, L. FULTON, D. GOELA, T. GRAVES,
J. HAWKINS, K. HINDS, K. KEMP, P. LATREILLE, D. LAYMAN, P. OZERSKY,
T. ROHLFING, P. SCHEET, C. WALKER, A. WAMSLEY, P. WOHLDMANN, K. PEPIN,
J. NELSON, I. KORF, J. A. BEDELL, L. HILLIER, E. MARDIS, R. WATERSTON,
R. WILSON, B. S. EMANUEL, T. SHAIKH, H. KURAHASHI, S. SAITTA,
M. L. BUDARF, H. E. MCDERMID, A. JOHNSON, A. C. C. WONG, B. E. MORROW,
L. EDELMANN, U. J. KIM, H. SHIZUYA, M. I. SIMON, J. P. DUMANSKI,
M. PEYRARD, D. KEDRA, E. SEROUSSI, I. FRANSSON, I. TAPIA, C. E. BRUDER
& K. P. O'BRIEN

ABSTRACT: Knowledge of the complete genomic DNA sequence of an
organism allows a systematic approach to defining its genetic
components. The genomic sequence provides access to the complete
structures of all genes, including those without known function, their
control elements, and, by inference, the proteins they encode, as well
as all other biologically important sequences. Furthermore, the
sequence is a rich and permanent source of information for the design
of further biological studies of the organism and for the study of
evolution through cross-species sequence comparison. The power of this
approach has been amply demonstrated by the determination of the
sequences of a number of microbial and model organisms.  The next step
is to obtain the complete sequence of the entire human genome. Here we
report the sequence of the euchromatic part of human chromosome
22. The sequence obtained consists of 12 contiguous segments spanning
33.4 megabases, contains at least 545 genes and 134 pseudogenes, and
provides the first view of the complex chromosomal landscapes that
will be found in the rest of the genome.

Abstract URL: \url|http://www.nature.com/cgi-taf/DynaPage.taf?file=/nature/journal/v402/n6761/abs/402489a0_fs.html&_UserReference=C0A804EC46B418A9D0386D625A953B867124|

\url|http://www.sanger.ac.uk/HGP/Chr22/|
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[Ref HATTORI00]

``The DNA sequence of human chromosome 21''
  Nature 405, 311 - 319 (may 18, 2000)

M. HATTORI, A. FUJIYAMA, T. D. TAYLOR, H. WATANABE, T. YADA,
H.-S. PARK, A. TOYODA, K. ISHII, Y. TOTOKI, D.-K. CHOI, E. SOEDA,
M. OHKI, T. TAKAGI, Y. SAKAKI, S. TAUDIEN, K. BLECHSCHMIDT, A. POLLEY,
U. MENZEL, J. DELABAR, K. KUMPF, R. LEHMANN, D. PATTERSON,
K. REICHWALD, A. RUMP, M. SCHILLHABEL, A. SCHUDY, W. ZIMMERMANN,
A. ROSENTHAL, J. KUDOH, K. SHIBUYA, K. KAWASAKI, S. ASAKAWA,
A. SHINTANI, T. SASAKI, K. NAGAMINE, S. MITSUYAMA, S. E. ANTONARAKIS,
S. MINOSHIMA, N. SHIMIZU, G. NORDSIEK, K. HORNISCHER, P. BRANDT,
M. SCHARFE, O. SCH\"ON, A. DESARIO, J. REICHELT, G. KAUER, H. BL\"OCKER,
J. RAMSER, A. BECK, S. KLAGES, S. HENNIG, L. RIESSELMANN, E. DAGAND,
T. HAAF, S. WEHRMEYER, K. BORZYM, K. GARDINER, D. NIZETIC, F. FRANCIS,
H. LEHRACH, R. REINHARDT & M.-L. YASPO

ABSTRACT: Chromosome 21 is the smallest human autosome. An extra copy
of chromosome 21 causes Down syndrome, the most frequent genetic cause
of significant mental retardation, which affects up to 1 in 700 live
births. Several anonymous loci for monogenic disorders and
predispositions for common complex disorders have also been mapped to
this chromosome, and loss of heterozygosity has been observed in
regions associated with solid tumours. Here we report the sequence and
gene catalogue of the long arm of chromosome 21. We have sequenced
33,546,361 base pairs (bp) of DNA with very high accuracy, the largest
contig being 25,491,867 bp. Only three small clone gaps and seven
sequencing gaps remain, comprising about 100 kilobases. Thus, we
achieved 99.7\% coverage of 21q. We also sequenced 281,116 bp from the
short arm. The structural features identified include duplications
that are probably involved in chromosomal abnormalities and repeat
structures in the telomeric and pericentromeric regions. Analysis of
the chromosome revealed 127 known genes, 98 predicted genes and 59
pseudogenes.

Abstract URL: \url|http://www.nature.com/cgi-taf/DynaPage.taf?file=/nature/journal/v405/n6784/abs/405311a0_fs.html|

\url|http://chr21.rz-berlin.mpg.de/|
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
\end{comment}

<<BASH Commands>>=
grep -v "^>" /projects/datasets/chr22/_tmp/MichaelBrent/chr22.fa | \
  fold -1 | sort | uniq -c | sort -nr | \
  perl -ane 'BEGIN{$cnt=0}
             print "@F\n"; $cnt+=$F[0];
             END{print "$cnt TOTAL BP\n"}' ;
     13876897 N
      6332938 a
      6306417 t
      5819310 c
      5817180 g
      2504453 A
      2484855 T
      2262438 C
      2258158 G
           16 n
     47662662 TOTAL BP
grep -v "^>" /projects/datasets/chr22/_tmp/MichaelBrent/chr22.fa | \
  fold -1 | tr 'a-z' 'A-Z' | sort | uniq -c | sort -nr | \
  perl -ane 'BEGIN{$cnt=0}
             print "@F\n"; $cnt+=$F[0];
             END{print "$cnt TOTAL BP\n"}' ;
     13876913 N
      8837391 A
      8791272 T
      8081748 C
      8075338 G
     47662662 TOTAL BP
grep -v "^>" /projects/datasets/chr22/_tmp/MichaelBrent/chr22.fa | \
  fold -1 | perl -ne 'chomp; $_ !~ "N" && print "$.\n"' | head -1 ; 
     13000001
@ %$

\begin{comment}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsctn{Internet resources}

Sanger Centre
       \url|http://www.sanger.ac.uk/|
   Ensembl
       \url|http://www.ensembl.org/|
   Chr22
       \url|ftp://ftp.sanger.ac.uk/pub/human/chr22/sequences/Chr_22/complete_sequence/|
   Clipped Mouse data at Sanger Center
       \url|ftp://ftp.sanger.ac.uk/pub/image/tmp/NCBI/|
%
UCSC (U. California Santa Cruz)
       \url|http://www.ucsc.edu|
   Genomics Group (David Haussler)
       \url|http://www.cse.ucsc.edu/centers/cbe/Genome/|
   Golden Path - Human genome project working draft at UCSC (the Golden Path) 
       \url|http://genome.cse.ucsc.edu/|
   Chr22 Sequence
       \url|http://genome.cse.ucsc.edu/goldenPath/01apr2001/chromosomes/|
%
The Berkeley Genome Pipeline
   A pipeline for real-time comparative analysis of the human and mouse genomes
       \url|http://pipeline.lbl.gov/|
   Hsap/Mmus homology
       \url|http://pipeline.lbl.gov/cgi-bin/test.pl|
       \url|http://pipeline.lbl.gov/indexOctober.html|
%
NCBI (National Center for Biotechnology Information)
       \url|http://www.ncbi.nlm.nih.gov/|
   Human genome
       \url|http://www.ncbi.nlm.nih.gov/genome/seq/HsProgress.shtml|
       \url|http://www.ncbi.nlm.nih.gov/genome/guide/human| (by chromosome + contig)
   Chr22
       \url|http://www.ncbi.nlm.nih.gov/cgi-bin/Entrez/maps.cgi?ORG=hum&MAPS=ideogr,est,loc&LINKS=ON&VERBOSE=ON&CHR=22|
   Hsap/Mmus homology
       \url|http://www.ncbi.nlm.nih.gov/Homology/|
   Mouse genome
       \url|http://www.ncbi.nlm.nih.gov/genome/seq/MmProgress.shtml|
       \url|http://www.ncbi.nlm.nih.gov/genome/guide/M_musculus.html|
   Clipped mouse reads at NCBI
       \url|ftp://ftp.ncbi.nlm.nih.gov/pub/TraceDB/mus_musculus/ClipReads/|
%
Washington University in St. Louis --School of Medicine--
       \url|http://medschool.wustl.edu/|
   Center for Computational Biology (Michael Brent)
       \url|http://www.ccb.wustl.edu/|
   Computational Genomics Page
       \url|http://www.cs.wustl.edu/%7Ebrent/Bio/index.html|
   Results on human/mouse 8 orthologous
       \url|http://genes.cs.wustl.edu/8-orthologs/|
   Twinscan server
       \url|http://genes.cs.wustl.edu/|
   Chr22
       \url|http://genes.cs.wustl.edu/data/|
%
Columbia University, Columbia Genome Center, Department of Computer Science
       \url|http://www.cs.columbia.edu/home/|
   Computational Biology Group (Victoria Haghighi)
       \url|http://www.cs.columbia.edu/compbio/|
   Transfer Sanger Annotation to GBD
       \url|http://www.cs.columbia.edu/~vic/sanger2gbd/|
%
% End of internet resources
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{comment}

\subsctn{Main goals}

\subsctn{Protocol outline}

Here we are drawing the main steps we followed 

\begin{description}
 \item[Masking Sequences] 

    Fasta sequence were masked by [Pankaj] using RepeatBlaster.

\begin{comment}
% Masking references
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+ RepeatMasker:

  Smit, AFA \& Green, P. 
  RepeatMasker at \url|http://ftp.genome.washington.edu/RM/RepeatMasker.html|

+ MaskerAid:

  Bedell JA, Korf I, Gish W.
  ``MaskerAid: a performance enhancement to RepeatMasker.''
  Bioinformatics 2000 Nov; 16(11):1040-1

  ABSTRACT: Identifying and masking repetitive elements is usually the
  first step when analyzing vertebrate genomic sequence. Current
  repeat identification software is sensitive but slow, creating a
  costly bottleneck in large-scale analyses. We have developed
  MaskerAid, a software enhancement to RepeatMasker that increased the
  speed of masking more than 30-fold at the most sensitive setting.

  Abstract URL: \url|http://bioinformatics.oupjournals.org/cgi/content/abstract/16/11/1040|

  \url|http://sapiens.wustl.edu/MaskerAid/|

+ Tandem Repeats Finder:

  G. Benson,
  ``Tandem repeats finder: a program to analyze DNA sequences.''
  Nucleic Acids Research (1999) Vol. 27, No. 2, pp. 573-580.

  ABSTRACT: A tandem repeat in DNA is two or more contiguous,
  approximate copies of a pattern of nucleotides. Tandem repeats have
  been shown to cause human disease, may play a variety of regulatory
  and evolutionary roles and are important laboratory and analytic
  tools. Extensive knowledge about pattern size, copy number,
  mutational history, etc. for tandem repeats has been limited by the
  inability to easily detect them in genomic sequence data. In this
  paper, we present a new algorithm for finding tandem repeats which
  works without the need to specify either the pattern or pattern
  size. We model tandem repeats by percent identity and frequency of
  indels between adjacent pattern copies and use statistically based
  recognition criteria. We demonstrate the algorithm's speed and its
  ability to detect tandem repeats that have undergone extensive
  mutational change by analyzing four sequences: the human frataxin
  gene, the human beta T cellreceptor locus sequence and two yeast
  chromosomes. These sequences range in size from 3 kb up to 700 kb. A
  World Wide Web server interface atc3.biomath.mssm.edu/trf.html has
  been established for automated use of the program.

  Abstract URL: \url|http://nar.oupjournals.org/cgi/content/abstract/27/2/573|

  \url|http://c3.biomath.mssm.edu/trf.test.html|

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
\end{comment} % Masking references

 \item[Homology Search]
 \item[Gene-Finding]

\begin{comment}
% SCIMIT references
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
+ SC (Sanger Center) 

  N. Jareborg, E. Birney, and R. Durbin 
  ``Comparative Analysis of Noncoding Regions of 77 Orthologous Mouse and Human Gene Pairs.''
  Genome Research (1999) Vol. 9, No. 9, pp 815-824.

  ABSTRACT: A data set of 77 genomic mouse/human gene pairs has been
  compiled from the EMBL nucleotide database, and their corresponding
  features determined. This set was used to analyze the degree of
  conservation of noncoding sequences between mouse and human. A new
  alignment algorithm was developed to cope with the fact that large
  parts of noncoding sequences are not alignable in a meaningful way
  because of genetic drift. This new algorithm, DNA Block Aligner (DBA),
  finds colinear-conserved blocks that are flanked by nonconserved
  sequences of varying lengths. The noncoding regions of the data set
  were aligned with DBA. The proportion of the noncoding regions covered
  by blocks >60% identical was 36% for upstream regions, 50% for 5'
  UTRs, 23% for introns, and 56% for 3' UTRs. These blocks of high
  identity were more or less evenly distributed across the length of the
  features, except for upstream regions in which the first 100 bp
  upstream of the transcription start site was covered in up to 70% of
  the gene pairs. This data set complements earlier sets on the basis of
  cDNA sequences and will be useful for further comparative studies.

  Abstract URL: \url|http://www.genome.org/cgi/content/abstract/9/9/815|

+ MIT

  S. Batzoglou, L. Pachter, J. P. Mesirov, B. Berger, and E. S. Lander
  ``Human and Mouse Gene Structure: Comparative Analysis and Application to Exon Prediction.''
  Genome Research (2000) Vol. 10, No 7, pp 950-958 

  ABSTRACT: We describe a novel analytical approach to gene
  recognition based on cross-species comparison. We first undertook a
  comparison of orthologous genomic loci from human and mouse, studying
  the extent of similarity in the number, size and sequence of exons and
  introns. We then developed an approach for recognizing genes within
  such orthologous regions by first aligning the regions using an
  iterative global alignment system and then identifying genes based on
  conservation of exonic features at aligned positions in both
  species. The alignment and gene recognition are performed by new
  programs called GLASS and ROSETTA, respectively. ROSETTA performed
  well at exact identification of coding exons in 117 orthologous pairs
  tested.

  Abstract URL: \url|http://www.genome.org/cgi/content/abstract/10/7/950|

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{comment} % Masking references

 \item[Syntenic Gene-Prediction]
 \item[Sequence Analysis] \ \\
   \begin{description}
    \item[G+C Content]
    \item[Splice Sites Distribution]
    \item[Exonic Structure Conservation]
   \end{description}
\end{description}

\subsctn{The {\chr} sequence}

We are using the ***WHICH VERSION*** verion of the {\chr} sequence. It has ***bp length, and originally contains ***bp 'N's representing assembly gaps (or non-sequenced heterochromatin).

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Building orthologous dataset}

\subsctn{Downloading Data set}

Pankaj has sent us the sequence and its masked version (he run repeatblaster on the raw sequence). After running {\bl}, he used his own blast2hsps to filter the {\bl} results into HSPs. He used the {\chr} sequence from the URL which is identical to the one in April goldenPath from UCSC.

<<BASH commands DATASETS>>=
#
# Preparing some dirs
ChckDirs $DATASETS/fasta $DATASETS/fasta/raw $DATASETS/fasta/masked \
         $DATASETS/annotation $DATASETS/annotation/desc ;
#
# MOVING and RENAMING fasta files
IDIR="$DATASETS/_tmp/Pankaj/seq" ;
#
# Merging raw sequences
ODIR="$DATASETS/fasta/raw" ;
counter=0 ; # fix for missing counter values on file names...(i.e. line674)
while [ -e "$IDIR/chr22_$counter" ] ;
  do {
    echo "### Processing $IDIR/chr22_$counter" 1>&2 ;
    gawk '$0 !~/^>|^[ \t]*$/ {print $0}' $IDIR/chr22_$counter | \
        perl -e ' # Removing "N"bp from overlapping sequences
            $seq=""; $count= shift @ARGV; $bases= shift @ARGV;
            while (<>) { chomp; $seq.=$_; };
            $count > 0 && ($out=substr($seq,$bases)) || ($out=$seq);
            ($i,$e) = (1, length($out));
            while ($i<=$e) { print substr($out,$i-1,60)."\n"; $i += 60; };
          ' $counter 1000 - ;
    counter=`expr $counter + 100000` ;
    } ;
  done | (echo ">chr22"; cat -) > $ODIR/chr22.tmp ;
perl -e ' # Reformatting fasta sequence
    use lib qw( /usr/lib/perl5/site_perl/5.005/ /usr/lib/perl5/5.00503/ ) ;
    use Bio::Seq;
    use Bio::SeqIO;
    my $seqin  = Bio::SeqIO->new(-format => "largefasta", -fh => \*STDIN );
    my $seqout = Bio::SeqIO->new(-format => "largefasta", -fh => \*STDOUT);
    while (my $sequence = $seqin->next_seq()) {
        $seqout->write_seq($sequence);
    }; # while
    exit(0);
  ' < $ODIR/chr22.tmp | \
  gawk '($0 !~/^>|^[ \t]*$/ || NR==1) {print $0}' - > $ODIR/chr22 ;
# looking for errors... 
wc $ODIR/chr22* ;
  953256  953255 48615924 _tmp/MichaelBrent/chr22.fa
  794538  794538 48457206 chr22/fasta/raw/chr22.tmp
  794379  794379 48457047 chr22/fasta/raw/chr22
gawk 'length($0)!=60 {print NR, $0}' $ODIR/chr22.tmp | wc ;
     478     956   22823
gawk 'length($0)!=60 {print NR, $0}' $ODIR/chr22 | wc ;
       2       4      59
    :: 000001 >chr22
    :: 794379 GGTATGGCGGGAAGGAGGCTGGTGCCAGAGTGGATTCGGATT
perl -ne 'chomp; /^\s*$/o && print "$. \"$_\"\n"' $ODIR/chr22 ;
perl -ne 'chomp;    /^>/o && print "$. \"$_\"\n"' $ODIR/chr22 ;
grep -v "^>" $ODIR/chr22 | fold -1 | sort | uniq -c | sort -nr | \
  perl -ane 'BEGIN{$cnt=0}
             print "@F\n"; $cnt+=$F[0];
             END{print "$cnt TOTAL BP\n"}' ;
     13876913 N
      8837391 A
      8791272 T
      8081748 C
      8075338 G
     47662662 TOTAL BP
grep -v "^>" $DATASETS/fasta/raw/chr22 | fold -1 | \
  perl -ne 'chomp; $_ !~ "N" && print "$.\n"' | head -1 ;
     13000001
TblToFasta /projects/datasets/chr22/_tmp/MichaelBrent/chr22.tbl | \
           tr  a-z A-Z | diff - $DATASETS/fasta/raw/chr22 | more ;
     1c1
     < >CHR22
     ---
     > >chr22
## Raw sequences
#
@ 

\subsctn{Getting annotations}

As the annotations are provided in GTF, we need to filter to GFF files.

<<BASH Functions: GTF to GFF>>=
#
# Processing GTF annotation files
get_annotation ()
{
  # USAGE:  get_annotation GFFfeature input_file
  perl -ne 'BEGIN{ $feat = shift @ARGV; }
      chomp;
      if ($_ =~ m/^\#/o) {
          print STDERR "$_\n";
      } else {
          @fields = split /\s+/og, $_;
          ($fields[2] eq $feat) && do {
              $fields[0] = "chr22";
              ($fields[8] = $fields[9]) =~ s/[";]//og; 
              print STDOUT join("\t",@fields[0 .. 8])."\n";
          };
      } ' $1 $2 | sort +0 -1 +3n +4n ;
}
#
@

We obtained the chromosome annotaions from \url|http://genes.cs.wustl.edu/data/|, we have to reformat into GFF due to redundant data contained in the GTF original file.

<<BASH commands DATASETS>>=
#
IDIR="$DATASETS/_tmp/MichaelBrent" ;
ODIR="$DATASETS/annotation" ;
ChckDirs $ODIR/all $ODIR/fixed ;
get_annotation CDS $IDIR/All_genes_plus.gene+cds.frameV2.noPseudogenes.GBD.gtf \
       > $ODIR/all/chr22 ;
# We remove "dJ437M21.C22.1b" because it has same coords as "dJ437M21.C22.1"
get_annotation CDS $IDIR/chr22-fixed.gtf | \
       grep -v "dJ437M21.C22.1b" > $ODIR/fixed/chr22 ;
#
# Checking GFF files for annotations 
grep -v "^#" all/chr22 | wc
   3627   32643  223781
 grep -v "^#" all/chr22 | gawk '{print $9}' | sort | uniq -c | sort -nr | wc
    538    1076   15275
# so there are 538 genes in all/chr22
grep -v "^#" fixed/chr22 | wc
   3766   33894  214107 
grep -v "^#" fixed/chr22 | gawk '{print $9}' | sort | uniq -c | sort -nr | wc
    553    1106   13253 
# so there are 553 genes in fixed/chr22 ?????
@ 

We also downloaded Victoria Haghighi's annotation dataset from \url|http://www.cs.columbia.edu/~vic/sanger2gbd/| %'
(\url|vic@cs.columbia.edu|).

<<BASH commands DATASETS>>=
#
IDIR="$DATASETS/_tmp/VictoriaHaghighi" ;
ODIR="$DATASETS/annotation/set" ;
ChckDirs $ODIR $ODIR/cds $ODIR/exons $ODIR/pseudo $ODIR/evidences ;
# Only CDS (554genes - 1)
# We remove "dJ437M21.C22.1b" because it has same coords as "dJ437M21.C22.1"
perl -pne 's/^\s+//o' $IDIR/Chr22.2.x.cds.frameV1.GBD.gtf.txt | \
       get_annotation CDS - | \
       grep -v "dJ437M21.C22.1b" > $ODIR/cds/chr22 ;
# Only exons (722genes - 1)
# We remove "bK250D10.C22.6c.mRNA" because it has same coords as "bK250D10.C22.6.mRNA"
# there were 9 CDS genes in $IDIR/All_genes_plus.gene+cds.frameV1.noPseudogenes.GBD.gtf.txt
# gparra fixed it taking missing CDS from $IDIR/Chr22.2.x.cds.frameV1.GBD.gtf.txt
# (without "dJ437M21.C22.1b") and joining into 
# $IDIR/All_genes_plus.gene+cds.frameV1.noPseudogenes.fixed.gtf
# then, we get 730 genes in this file.
perl -pne 's/^\s+//o' $IDIR/All_genes_plus.gene+cds.frameV1.noPseudogenes.fixed.gtf | \
       get_annotation exon - | \
       egrep -v 'dJ(437M21.C22.1b|402G11.C22.8.1)|(bK(250D10.C22.6c|125H2.C22.1b|216E10.C22.2b)|Em:AP000354.C22.3).mRNA' \
     > $ODIR/exons/chr22 ;
# Pseudogenes - only exons (157pseudogenes)
perl -pne 's/^\s+//o' $IDIR/All_genes_plus.gene.GBD.gtf.txt > $IDIR/All_genes_plus.gene.GBD.gtf.tmp ;
grep "Pseudogene" $IDIR/All_genes_plus.gene.GBD.gtf.tmp | \
     gawk '{print $2}' > PseudoGene.list ;
gawk 'BEGIN{ while (getline < ARGV[1] >0) { pseudo[$1] = $1 };
             ARGV[1]=""; }
      $1!~/^#/{ n=$10; gsub(/\"/,"",n);
             if (n in pseudo) {$3="exon_pseudo";print $0}
           }' $IDIR/PseudoGene.list \
      $IDIR/All_genes_plus.gene.GBD.gtf.tmp > $IDIR/PseudoGene.gff ;
get_annotation exon_pseudo $IDIR/PseudoGene.gff > $ODIR/pseudo/chr22 ;
#
gawk '{print $9}' $ODIR/cds/chr22 | sort | uniq -c | wc ;
    553    1106   13253
gawk '{print $9}' $ODIR/exons/chr22 | sort | uniq -c | wc ;
    726    1452   20464
#   721    1442   20358 # All_genes_plus.gene+cds.frameV1.noPseudogenes.GBD.gtf.txt
gawk '{print $9}' $ODIR/pseudo/chr22 | sort | uniq -c | wc ;
    157     314    3920 
#
cat  $ODIR/exons/chr22 $ODIR/pseudo/chr22 | sort +3n | \
gawk '($1 != "#") {
        if (START[$9]==0 || $4 < START[$9]) {
           START[$9]=$4; STRAND[$9]=$7};
           if ($5>STOP[$9]) STOP[$9]=$5;
        }
      END{
        for (locus in START) 
          print "chr22\tsanger\tGENE\t" START[locus] "\t" STOP[locus] "\t.\t" STRAND[locus] "\t.\t"locus;
      }' | sort +3n | \
gawk 'BEGIN{OFS="\t"}
      {if ($4 < STOPant+500 ) {
           $4=STARTant;
           $9=gene_ant"_"$9;
           if ($5<STOPant){
             $5=STOPant;}
       } else if (NR!=1)
           print "chr22\tsanger\tGENE\t" STARTant "\t" STOPant "\t.\t" STRAND "\t.\t" gene_ant;
       STARTant=$4;STOPant=$5; gene_ant=$9;STRAND=$7;
       }
       END{
         print "chr22\tsanger\tGENE\t" STARTant "\t" STOPant "\t.\t" STRAND "\t.\t" gene_ant;
       }' | \
gawk 'BEGIN{OFS="\t"}{$3="Annotation";$9=NR;print;}' > $ODIR/evidences/chr22 ;
# (726evidences)
@

\subsctn{Preparing masked sequences}

<<BASH commands DATASETS>>=
#
# perl -ne 'BEGIN{ print ">bigseq\n"; } 
#           $_ !~ /^>|^\s*$/o && print ;
#          ' $INDIR/*.fa
#
# Merging masked sequences
ODIR="$DATASETS/fasta/masked" ;
counter=0 ; # fix for missing counter values on file names...(i.e. line674)
while [ -e "$IDIR/chr22_$counter.masked" ] ;
  do {
    echo "### Processing $IDIR/chr22_$counter.masked" 1>&2 ;
    gawk '$0 !~/^>|^[ \t]*$/ {print $0}' $IDIR/chr22_$counter.masked | \
        perl -e ' # Removing "N"bp from overlapping sequences
            $seq=""; $count= shift @ARGV; $bases= shift @ARGV;
            while (<>) { chomp; $seq.=$_; };
            $count > 0 && ($out=substr($seq,$bases)) || ($out=$seq);
            ($i,$e) = (1, length($out));
            while ($i<=$e) { print substr($out,$i-1,60)."\n"; $i += 60; };
          ' $counter 1000 - ;
    counter=`expr $counter + 100000` ;
    } ;
  done |  (echo ">chr22"; cat -) > $ODIR/chr22.tmp ;
perl -e ' # Reformatting fasta sequence
    use lib qw( /usr/lib/perl5/site_perl/5.005/ /usr/lib/perl5/5.00503/ ) ;
    use Bio::Seq;
    use Bio::SeqIO;
    my $seqin  = Bio::SeqIO->new(-format => "largefasta", -fh => \*STDIN );
    my $seqout = Bio::SeqIO->new(-format => "largefasta", -fh => \*STDOUT);
    while (my $sequence = $seqin->next_seq()) {
        $seqout->write_seq($sequence);
    }; # while
    exit(0);
  ' < $ODIR/chr22.tmp | \
  gawk '($0 !~/^>|^[ \t]*$/ || NR==1) {print $0}' - > $ODIR/chr22 ;
# looking for errors...
wc $ODIR/chr22* ;
   953256  953255 48615924 _tmp/MichaelBrent/chr22.fa
   794538  794538 48457206 chr22/fasta/masked/chr22.tmp
   794379  794379 48457047 chr22/fasta/masked/chr22
gawk 'length($0)!=60 {print NR, $0}' $ODIR/chr22.tmp | wc ;
      478     956   22823
gawk 'length($0)!=60 {print NR, $0}' $ODIR/chr22 | wc ;
       2       4      59
    :: 000001 >chr22
    :: 794379 GGTATGGCGGGAAGGAGGCTGGTGCCAGAGTGGATTCGGATT
perl -ne 'chomp; /^\s*$/o && print "$. \"$_\"\n"' $ODIR/chr22 ;
perl -ne 'chomp;    /^>/o && print "$. \"$_\"\n"' $ODIR/chr22 ;
grep -v "^>" $ODIR/chr22 | fold -1 | sort | uniq -c | sort -nr | \
  perl -ane 'BEGIN{$cnt=0}
             print "@F\n"; $cnt+=$F[0];
             END{print "$cnt TOTAL BP\n"}' ;
     27534498 N
      5144849 A
      5124474 T
      4931681 C
      4927160 G
     47662662 TOTAL BP
## Masked sequences
#
@ 

<<BASH commands DATASETS>>=
#
# MASKING FASTA SEQUENCES
ChckDirs $DATASETS/masking ;
#
# Merging results from RepeatBlaster (Pankaj)
IDIR="$DATASETS/_tmp/Pankaj/out" ;
ODIR="$DATASETS/masking/default" ;
ChckDirs $ODIR $ODIR/gff $ODIR/gff-projection $ODIR/logs ;
#
max=48000000 ; # it is 47600000 but just to ensure...
counter=0 ;
while [ $counter -le $max ] ;
  do {
    echo "### COUNTER: $counter" 1>&2 ;
    if [ -e "$IDIR/chr22_$counter.out" ] ;
      then
        echo "### Processing $IDIR/chr22_$counter.out" 1>&2 ;
        gawk 'BEGIN{ OFS="\t"; cnt=ARGV[1]; ARGV[1]=""; }
          {
            str = ($9!="C") ? "+" : "-";
            $6+=cnt; $7+=cnt;
            if ($1~/^[0-9]+$/) {
              print "chr22\tRepeatMasker",
                    $11,$6,$7,$1,str,".",$10"."NR-3,"# "$5;
            } else {
              print $0 | "cat 1>&2";
            };
          }' $counter $IDIR/chr22_$counter.out ;
      fi;
    counter=`expr $counter + 100000` ;
    } ;
  done > $ODIR/gff/chr22 ;
gawk '{print $3}' $ODIR/gff/chr22 | sort | uniq -c | sort -nr \
                > $ODIR/repeat_summary ;
#
@ 

There are 65307 masked regions in the whole {\chr} sequence.


\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Homology Search}

\subsctn{Processing {\tbx} results from Pankaj}

{\tbx} results provided by Pankaj must be parsed and mapped to the corresponding coords in the {\chr} sequence. The reason for such mapping is that we have multiple 100Kbp fragments from the original chromosomic sequence, which were used to run {\tbx} against mouse WGS-3X database. We had to deal with the frame issue of the HSPs fragments; once the HSP coords were mapped to the chromosome, frames also must be recomputed taking into account if HSP was in forward or in reverse strand (see figure~\ref{fig:blastframes}).

<<BASH commands ANALYSIS>>=
#
# RUNNING TBLASTX
ChckDirs $ANALYSIS/blast $ANALYSIS/blast/wublast.tblastx \
         $ANALYSIS/blast/wublast.tblastx/masked3X \
         $ANALYSIS/blast/wublast.tblastx/masked3X+ ;
#
# Filtering HSPs from tblastx output (Pankaj)
IDIR="$DATASETS/_tmp/Pankaj/tbx" ;
# ODIR="$ANALYSIS/blast/wublast.tblastx/masked3X";
ODIR="$ANALYSIS/blast/wublast.tblastx/masked3X+";
ChckDirs $ODIR $ODIR/out $ODIR/gff $ODIR/aplot $ODIR/ps $ODIR/logs ;
#
max=47600000 ;
counter=0 ;
while [ $counter -le $max ] ;
  do {
    echo "### COUNTER: $counter" 1>&2 ;
    if [ -e "$IDIR/chr22_$counter" ] ;
      then
        echo "### RUNNING PARSEBLAST on $IDIR/chr22_$counter" 1>&2 ;
        gawk '$1~/^>/ { $1=$1":"$2; gsub(/[\|]/,":",$1); }
                      { print $0; }' $IDIR/chr22_$counter | \
        parseblast --fullgff --full-scores --comments --verbose --bit-score - \
                   2> $ODIR/logs/parseblast.chr22_$counter | \
        gawk 'BEGIN{ OFS="\t";
                     c=ARGV[1]; SEQlen=ARGV[2]; ARGV[1]=ARGV[2]="";
                     frame[0]=3; frame[1]=1; frame[2]=2; }
              $0 !~ /^[ \t]*$/ {
                  $1="chr22"; $4+=c; $5+=c;
                  if ($7=="-") { $8=frame[((SEQlen - $5 + 1) % 3)] }
                  else { $8=frame[($4 % 3)] };
                  print $0;
              }' $counter 47662662 - ;
      fi;
    counter=`expr $counter + 100000` ;
    } ;
  done | gawk '$3 =="hsp" {print}' | sort +3n -6 +6 -7 > $ODIR/gff/chr22 ; 
                                                       # $ODIR/gff/chr22.frame
#
diff chr22.old chr22 | grep "<" | wc
  43281 1817802 10984908
wc chr22*
 192721 7901561 48561489 chr22
# There were 43281 HSPs with wrong frame
@

\newcommand{\tss}[1]{\textsf{\scriptsize #1}}
\newcommand{\msf}[1]{\mbox{\textsf{\footnotesize #1}}}
\newcommand{\tofrm}[4]{#1 \:\Rightarrow\: ( #1 - #2 + 1 ) \: mod \: 3 = #3 \:\Rightarrow\: #4}
\newcommand{\torfrm}[5]{#1 \:\Rightarrow\: \msf{rev\_comp(#1,#3)} = #2 \:\Rightarrow\: ( #3 - #2 + 1 ) \: mod \: 3 = #4 \:\Rightarrow\: #5}
\begin{figure}[!ht] 
\begin{center}
\small
\setlength{\unitlength}{1cm}
\fbox{
\begin{minipage}{16.5cm}
\begin{tabular}{cc}
\rule[-5mm]{0pt}{25mm}
\begin{minipage}[b]{5cm}
\fbox{\begin{picture}(5,1.5)
% figure
\linethickness{1.5pt}
\put(0.5,0.5){\line(1,0){2}}
\put(3.5,0.5){\line(1,0){1}}
\put(0.5,0.45){\line(0,1){0.1}}
\put(4.5,0.45){\line(0,1){0.1}}
\put(2.520,0.35){\framebox(0.97,0.3){\tss{feature}}}
% dotted lines
\linethickness{0.25pt}
\put(0.5,0.55){\qbezier[20](0,0)(0,0.2)(0,0.4)}
\put(2.5,0.65){\qbezier[15](0,0)(0,0.15)(0,0.3)}
\put(3.5,0.65){\qbezier[15](0,0)(0,0.15)(0,0.3)}
\put(4.5,0.55){\qbezier[20](0,0)(0,0.2)(0,0.4)}
% labels
\put(1.25,0.40){\makebox(0,0)[t]{\tss{sequence}}}
\put(0.5,1.05){\makebox(0,0)[b]{\tss{FIRST}}}
\put(2.5,1.05){\makebox(0,0)[b]{\tss{start}}}
\put(3.5,1.05){\makebox(0,0)[b]{\tss{end}}}
\put(4.5,1.05){\makebox(0,0)[b]{\tss{LAST}}}
\end{picture}}
\end{minipage}
&
\raisebox{9mm}{
\begin{minipage}[b][0cm][c]{10cm}
\[
\left.
\begin{array}{r@{}c@{}l}
\multicolumn{3}{l}{\mbox{\textbf{Forward strand}:}} \\[0.25ex] 
\:\:\:\:\msf{frame} & \:\:=\: & (\msf{start} - \msf{FIRST} + 1) \: mod \: 3
 \\[0.75ex] 
\multicolumn{3}{l}{\mbox{\textbf{Reverse strand}:}} \\[0.25ex]  
\:\:\:\:\msf{frame} & \:\:=\: & (\msf{LAST} - \msf{end} + 1) \: mod \: 3
 \\
\end{array}
\:\:\right|\:\:
\mbox{\textbf{frame}} \left\{
\begin{array}{c@{\:\Rightarrow\:}c}
0 & 3 \\
1 & 1 \\
2 & 2 \\
\end{array}
\right\} \mbox{\raisebox{-1ex}{\textbf{\shortstack{{\bl}\\frame}}}}
\]
\end{minipage}
} % raisebox
\\
\end{tabular}
\vskip 1ex
\hrulefill
\vskip 0.5ex
\[
\begin{array}{r@{\:=\:}r}
\msf{FIRST} & 1 \\
\msf{LAST}  & 40 \\
\end{array}
\:\left|\:
\begin{array}{cl}
\mbox{\raisebox{-1ex}{\textbf{\shortstack{Forward\\Strand}}}} &
\msf{start} = \left\{ 
\begin{array}{l}
\tofrm{21}{1}{0}{3} \\
\tofrm{22}{1}{1}{1} \\
\tofrm{22}{1}{2}{2} \\
\end{array}
\right.
\\[3.5ex]
\mbox{\raisebox{-1ex}{\textbf{\shortstack{Reverse\\Strand}}}} &
\msf{start} = \left\{ 
\begin{array}{l}
\torfrm{21}{20}{40}{0}{3} \\
\torfrm{22}{19}{40}{1}{1} \\
\torfrm{22}{18}{40}{2}{2} \\[1ex]
where \:\:\: \msf{rev\_comp(pos,LAST)} = \msf{LAST} - \msf{pos} + 1\\
\end{array}
\right.
\\
\end{array}
\right.
\]
\vskip 0.8ex
\end{minipage}
} % fbox
\caption[Mapping frames of HSPs from {\tbx} results]{\label{fig:blastframes} Mapping frames of HSPs from {\tbx} results from chromosome fragments when we mapped their coords to the original chromosomic coords. If we make a reverse complement of the sequence (so coords are swapped) we must obtain the same frames in forward and the reversed ``forward'' strand for the same position (we found that {\bl} programs compute frame for reverse strand counting from sequence last position, so we verify the formulas in such way).}
\end{center}
\end{figure}

\begin{comment}
<<BASH commands ANALYSIS>>=
#
# Preparing files for Jim Kent
ODIR="$ANALYSIS/blast/wublast.tblastx" ;
# EXP="tbx_chr22" ; # < $ANALYSIS/blast/wublast.tblastx/masked3X+/gff/chr22.hsp.old
EXP="tbx_chr22_3X+" ;
ChckDirs $ODIR/$EXP ;
perl -ane '($F[8]=$F[9])=~ s/[";]//og; 
           print STDOUT (join("\t",@F[0 .. 8]))."\n";
          ' $ANALYSIS/blast/wublast.tblastx/masked3X+/gff/chr22 \
          > $ODIR/$EXP/chr22.hsp ;
# cp $ANALYSIS/sgp/Hsap.masked.3X+/sr/chr22 $ODIR/chr22.sr ;
cp $ANALYSIS/sgp/Hsap.masked.3X+.fix/sr/chr22 $ODIR/$EXP/chr22.sr ;
gawk 'BEGIN{n="#\n## Filtered from chr22.sr - Score Cutoff: <26\n#"}
      $6>=26 {print $0}
      $0 ~ /^#/ {
         if ($2=="Created") {$0=$0"\n"n};
         print $0;
      }' $ODIR/$EXP/chr22.sr > $ODIR/$EXP/chr22.sr-rs ;
pushd $ODIR ;
star $EXP.tar.gz $EXP ; # move to ftp dir...
popd ;
#
@
\end{comment}

\begin{description}
\item[tblastx parameters] \ \\ % chr22 x WGS3X+
\begin{verbatim}
    -nogap
    Z=3000000000
    E=0.01
    W=5
    B=10000
    V=10000
    -hspmax=4
    -topcomboN=4
    -filter=xnu
    -matrix=blosum62mod
\end{verbatim}
<<HIDE: BASH commands>>=
#
ls -1 chr22_* | while read n ;
  do {
    perl -ne 'BEGIN{$prt=0};
      $_ =~ s/^(Parameters):/$1/o && ($prt=1);
      s/:\s+/= /o;
      $prt && print $_' $n;
    } ; 
  done | perl -ne '$follow=0;
      $_ =~ /^\s+([^\s].*?)=(.*)$/ && ($v=$1,$c=$2,$follow=1);
      $follow || next;
      defined($vars{$v}) || do {
          push @{ $vars{$v} }, $c;
      };
      (grep (/^$c$/, @{ $vars{$v} })>0) || do {
          push @{ $vars{$v} }, $c;
      };
      END{
        foreach $n (keys %vars) {
            print "$n :: ".(join(" * ", @{ $vars{$n} }))."\n";
        };
      }' - > kk
#
@

\item[From Pankaj:]
In addition to the topcombon=4, another difference between the 2 analysis, we use the masked WGS from NCBI and removed all mouse sequences that did not have at leat 50 bp contiguous of unmasked mosue sequence. Thus, the effective mouse WGS database size was 10,513,154 sequences; 6,054,167,851 total letters. But presumably this is a more enriched source (slightly more X coverage), so sensitivity should be slightly higher as observed.
\end{description}

\begin{comment}
**Problem** (from HSPs filtered by Pankaj)
From this record:
chr22_13000000 gnl|ti|9493919_44_700 101 13025701 13025621 168 248 27 18 20 3 657 3.8e-11
which is the bit-score ?
does the strand/frame pair correspond to query or to sequence ?
we have to convert to:
Hsap_BTK   TBLASTX HSP  66384 67763 1031.0 + 3 0 
\end{comment}

We check if we did right mapping to the chromosome coords the HSPs filtered from the multiple blast-output files (computed on 100Kbp length subsequences from the {\chr}).

<<BASH commands ANALYSIS>>=
#
# Checking filtered blast results
#
# excerpt from HSPs GFF file chr22/blast/wublast.tblastx/masked3X/gff/chr22
chr22 TBLASTX hsp 13393381 13393968 159.1 - 1 Target "gnl_ti_6891896_47_706_G10P675981FG7.T0" 19 606; Strand -; Frame 1; E_value 1.5e-37; P_sum 1.5e-37; Aln_Score 341; Bit_Score 159.1; Idn_Score 37.76 (74/196); Gaps 0.00 (Q:0|S:0); Lengths Q:196|S:196|T:196
chr22 TBLASTX hsp 13393966 13394019 22.6 - 1 Target  "gnl_ti_6891896_47_706_G10P675981FG7.T0" 605 658; Strand -; Frame 3; E_value 1.5e-37; P_sum 1.5e-37; Aln_Score 43; Bit_Score 22.6; Idn_Score 44.44 (8/18); Gaps 0.00 (Q:0|S:0); Lengths Q:18|S:18|T:18
#
# excerpt from blast file chr22/_tmp/Pankaj/tbx/chr22_13300000
...
 Score = 341 (159.1 bits), Expect = 1.5e-37, Sum P(3) = 1.5e-37, Group = 1
 Identities = 74/196 (37%), Positives = 108/196 (55%), Frame = -1 / -1
Query: 93968 PMYMFLGNFSFLEIWYVSSTVPKMLVNFLSEKKNISFAGCFLQXXXXXSLGTSECLLLTV 93789
             P    L   S +++ Y+S+TVPKM  NFLS +K+ISF GC +Q     ++  SE LLL
Sbjct:   606 PHDFLLSQLSLMDLMYISTTVPKMAFNFLSGQKSISFLGCGVQSFFFLTMACSEGLLLAS 427
Query: 93788 MAFDQYLAICRPLLYPNIMTGHLYAKLVILCWVCGFLWFLIPIVLISQMPFCGPNIIDHV 93609
             MA+D+++AIC PL YP  M+  +  K++I  W+ G +  L   V    +P+C    I+H
Sbjct:   426 MAYDRFVAICHPLHYPIRMSKIMCLKMIIGSWILGSINSLAHTVYALHIPYCHSRSINHF 247
Query: 93608 VCDPGPRFALDCVSAPRIQLFCYTLSSLVIFGNFLFIIGSYTLVLKAMLGMPSSTGRHKA 93429
              CD      L C+     +   +  +SL +   FL I  SY  VL A+  M S  G+ KA
Sbjct:   246 FCDVPAMLPLACMDTWVYEYMVFVSTSLFLLLPFLGITASYGRVLFAVFHMRSKEGKKKA 67
Query: 93428 FSTCGSHLAVVSLCYS 93381
             F+TC +HL VV+  Y+
Sbjct:    66 FTTCSTHLTVVTFYYA 19
...
 Score = 43 (22.6 bits), Expect = 1.5e-37, Sum P(3) = 1.5e-37, Group = 1
 Identities = 8/18 (44%), Positives = 11/18 (61%), Frame = -1 / -3
Query: 94019 GNGAIAFVLWCDRRLHTP 93966
             GN  +  ++  D RLHTP
Sbjct:   658 GNSGMIHLIRVDPRLHTP 605
...
#
# Extracting subfragments of chr22 seq
perl -e ' # geting fragments of large fasta sequence
    use lib qw( /usr/lib/perl5/site_perl/5.005/ /usr/lib/perl5/5.00503/ ) ;
    use Bio::Seq;
    use Bio::SeqIO;
    @coord_pairs = ( 13393381, 13393968,
                     13393966, 13394019 );
    my $seqin  = Bio::SeqIO->new(-format => "largefasta", -fh => \*STDIN );
    my $seqout = Bio::SeqIO->new(-format => "fasta", -fh => \*STDOUT);
    while (my $sequence = $seqin->next_seq()) {
        for (my $p = 0; $p <= $#coord_pairs; $p+=2) {
            my ($o,$e,$subseq);
            $subseq = Bio::Seq->new();
            ($o,$e) = @coord_pairs[$p..($p + 1)];
            $subseq = $sequence->trunc($o,$e); # ($o,($e - $o + 1)));
            $subseq->display_id("chr22\_$o\_$e");
            $subseq = $subseq->revcom();
            $seqout->write_seq($subseq);
            $subseq = $subseq->translate;
            $seqout->write_seq($subseq);
        }; # for
    }; # while
    exit(0);
  ' < $DATASETS/fasta/masked/chr22 ;
#
-------------------- WARNING ---------------------
MSG: Sequence is not dna or rna, but []. Attempting to revcom, but unsure if this is right
---------------------------------------------------
>chr22_13393381_13393968
CCCATGTACATGTTCCTGGGAAATTTCTCCTTTTTAGAGATATGGTATGTCTCTTCTACA
GTTCCCAAGATGTTGGTCAACTTCCTTTCAGAGAAAAAAAACATCTCCTTTGCTGGATGT
TTTCTCCAGTTTTATTTCTTCTTCTCTTTGGGTACATCAGAATGCTTGCTTTTGACTGTG
ATGGCCTTTGATCAGTACCTTGCTATCTGCCGTCCCTTGCTCTATCCTAATATCATGACT
GGGCATCTCTATGCCAAACTGGTCATACTGTGCTGGGTTTGTGGATTTCTGTGGTTCCTG
ATCCCCATTGTTCTCATCTCTCAGATGCCCTTCTGTGGCCCAAACATTATTGACCATGTT
GTGTGTGACCCAGGGCCACGATTTGCATTGGATTGTGTTTCTGCCCCAAGAATCCAACTG
TTTTGCTACACTCTAAGCTCATTAGTTATTTTTGGTAACTTCCTCTTTATTATTGGATCC
TATACTCTTGTCCTGAAAGCTATGTTGGGTATGCCTTCAAGCACTGGGAGACATAAGGCC
TTCTCTACCTGTGGGTCTCATTTGGCTGTGGTATCACTGTGCTATAGC
>chr22_13393381_13393968
PMYMFLGNFSFLEIWYVSSTVPKMLVNFLSEKKNISFAGCFLQFYFFFSLGTSECLLLTV
MAFDQYLAICRPLLYPNIMTGHLYAKLVILCWVCGFLWFLIPIVLISQMPFCGPNIIDHV
VCDPGPRFALDCVSAPRIQLFCYTLSSLVIFGNFLFIIGSYTLVLKAMLGMPSSTGRHKA
FSTCGSHLAVVSLCYS
-------------------- WARNING ---------------------
MSG: Sequence is not dna or rna, but []. Attempting to revcom, but unsure if this is right
---------------------------------------------------
>chr22_13393966_13394019
GGGAATGGAGCCATTGCTTTTGTCCTGTGGTGTGACCGGCGACTTCACACTCCC
>chr22_13393966_13394019
GNGAIAFVLWCDRRLHTP
-------------------- EXCEPTION --------------------
MSG: Attempting to get a subseq out of range 13393381:13393968 vs
STACK Bio::Seq::LargePrimarySeq::subseq /usr/lib/perl5/site_perl/5.005//Bio/Seq/LargePrimarySeq.pm:156
STACK Bio::PrimarySeqI::trunc /usr/lib/perl5/site_perl/5.005//Bio/PrimarySeqI.pm:467
STACK Bio::Seq::LargeSeq::trunc /usr/lib/perl5/site_perl/5.005//Bio/Seq/LargeSeq.pm:110
STACK toplevel -e:14
-------------------------------------------
#
Subject: Re: [Bioperl-l] Processing large fasta sequences throught SeqIO
   Date: Sat, 1 Sep 2001 16:41:09 -0400 (EDT)
   From: Jason Stajich <jason@chg.mc.duke.edu>

Tracked down the bug - it is in Bio::SeqIO::largefasta.pm

You can do the following to fix your code w/o upgrading your bioperl
code locally ( since it is only checked in to the bioperl CVS repository).

where you have a loop getting all the sequences from the seqio stream -
> while ( $seq = $seqio->next_seq ) 
change it to
> while ( $seq = $seqio->next_seq && $seq->length() > 0 )

This is of course a workaround, but should take care of things.  
#
@ 

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Gene predictions}

We analyzed the {\data} sequence dataset with different gene-prediction tools and evaluated their accuracy (sensitivity and specificity). We included results provided by other groups when possible (cite TWINSCAN/SLAM).

.........PUT HERE a LIST of them.....

\subsctn{Gene-prediction evaluation}



Genscan predictions were obtained from Goldenpath resources.

<<BASH commands ANALYSIS>>=
# Generating gff file for genscan predictions of chromosome 22
sed 's/,/ /g' $ANALYSIS/genscan/Hsap.masked/goldenpath/goldenpath/chr22 |  \
   gawk 'BEGIN{OFS="\t"}{num_exons=$8;for (cont=1;cont<=num_exons;cont++) \
   print $2,"genscan","CDS",$(9+cont-1)+1,$(9+cont+num_exons-1),".",$3,".",$1;}'\
     | sort +3n > $ANALYSIS/genscan/Hsap.goldenpath/gff/chr22
# Evaluatio the results
run_evaluation 22 genscan Hsap.goldenpath  $ANALYSIS/genscan/ \
    $DATASETS/annotation/set/cds VH_cds 47662662;
$ENSCRIPT  $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan.Hsap.goldenpath.chr22_VH_cds
$ENSCRIPT -r $ANALYSIS/genscan/Hsap.goldenpath/eval_genscan_brief.Hsap.goldenpath.chr22_VH_cds

@


<<BASH Functions: Gene-Prediction Evaluation>>=
#
# PREPARING EVALUATION STUFF
export GENEIDVERSION="geneid v1.1" ;
#
run_evaluation ()
{
  #
  # USAGE:
  #     run_evaluation #chrom program param prog_results_dir annotation_dir testset lenght
  # run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/all all ;
  #
  CHR="$1" ;
  prog="$2" ;
  PROG=`echo $prog | tr a-z A-Z` ;
  RUN="$3" ;
  BASE="$4/$RUN" ;
  RESULTS="$BASE/gff/chr$CHR" ;
  SUBSET="$6" ;
  TESTSET="$5/chr$CHR" ;
  LENSEQ="$7";
  FINALTESTSET="/tmp/tmp$$" ;
  LONG_OUTPUT="$BASE/eval_$prog.$RUN.chr${CHR}_$SUBSET" ;
  SHORT_OUTPUT="$BASE/eval_${prog}_brief.$RUN.chr${CHR}_$SUBSET" ;
  GVER="------------------------- <${GENEIDVERSION}> -------------------------";
  # EVALUATION tool command-line options:
  #  -v: Verbose. Print all messages
  #  -a: Average. Print average stats (more than 1 sequence)
  #  -t: Total. Print total stats (more than 1 sequence)
  #  -s: Short. Print a short output
  # TEMPORAL FILE ADDING A RECORD WITH THE LENGHT OF THE SEQUENCE
  gawk "BEGIN{OFS=\"\t\";\
        print \"chr\"$CHR,1,\"Sequences\",1,$LENSEQ,\".\",\".\",\".\",1}\
        {print}" $TESTSET > /tmp/tmp$$;
  # /tmp/tmp$$ temporaal file containing lenght+annotation gff records
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $LONG_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $LONG_OUTPUT ;
  $SGPBIN/evaluation -ta $RESULTS $FINALTESTSET >> $LONG_OUTPUT ;
  { echo "###" ; echo "### EVALUATION of $PROG RESULTS on CHR $CHR ($RUN)" ; echo "###" ;
    echo "### $SHORT_OUTPUT" ; echo "###" ;
    echo "### "`whoami`" - "`date` ; echo "###" ;
    echo "### $GVER" ; echo "###" ; } > $SHORT_OUTPUT ;
  $SGPBIN/evaluation -tsa $RESULTS $FINALTESTSET >> $SHORT_OUTPUT ;
}
#
@ 

\subsctn{Running {\gnid}} 

<<BASH Functions: Running GENEID>>=
#
# RUNNING GENEID
run_GENEID () 
{
  #
  # run_GENEID - Running GENEID on a chromosome
  #
  # USAGE: run_GENEID testname sequence chr geneidversion
  #
  SECONDS=0;
  PROG="GENEID" ; prog="geneid" ;
##  GENEID="/projects/sgp/param/geneid/human3iso.param" ;
##  CMD="/projects/sgp/bin/geneid -vG" ;
  version=$4 ;
  [ "$version" ] || { 
      echo "### Running version 1.0 by default"; version="1.0"; };
  if [ "$version" == "1.0" ] ;
    then 
      GENEID="/usr/local/molbio/Install/geneid_v1.0/param/human3iso.param" ;
      CMD="/usr/local/molbio/bin/geneid -vG" ;
    else
      GENEID="/home/ug/gparra/Research/selfgenome/src/geneid_v1.1/param/human3iso.param" ;
      CMD="/home/ug/gparra/Research/selfgenome/bin/geneid -vG" ;
  fi ;
      # GENEID tool command-line options:
      #  '-v' be verbose
      #  '-G' GFF output
  # Setting VARS
  MAIN="$ANALYSIS/geneid" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  locus="$3";
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Run program
  echo "### Running $PROG on $locus ..." 1>&2 ;
  $CMD $ISEQ/$locus > $ODIR/$locus 2> $EDIR/$locus ;
  cp $ODIR/$locus $ODIR/$locus.${prog}_v$version ;
  #
  { echo "###"; echo "### Execution time for [$0] : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
#
@

<<BASH commands ANALYSIS>>=
#
# Testing on Hsap_BTK
run_GENEID test /projects/datasets/orthologous/fasta/masked Hsap_BTK 1.0 ;
enscript -1C -Gjf Courier7 -M A4 gff/Hsap_BTK.geneid_v1.0 ;
#
run_GENEID test /projects/datasets/orthologous/fasta/masked Hsap_BTK 1.1 ;
enscript -1C -Gjf Courier7 -M A4 gff/Hsap_BTK.geneid_v1.1 ;
#
@ 

\subsubsctn{{\gnid} on raw sequences} 

<<BASH commands ANALYSIS>>=
#
# Raw sequences
run_GENEID Hsap.raw $DATASETS/fasta/raw chr22 1.0 ;
           ### Segmentation fault
#
run_GENEID Hsap.raw $DATASETS/fasta/raw chr22 1.1 ;
           ### Execution time for [bash] : 1425 secs
run_evaluation 22 geneid Hsap.raw $ANALYSIS/geneid $DATASETS/annotation/all all ;
run_evaluation 22 geneid Hsap.raw $ANALYSIS/geneid $DATASETS/annotation/fixed fixed ;
run_evaluation 22 geneid Hsap.raw $ANALYSIS/geneid $DATASETS/annotation/set/cds VH_cds ;
run_evaluation 22 geneid Hsap.raw $ANALYSIS/geneid $DATASETS/annotation/set/exons VH_exons ;
run_evaluation 22 geneid Hsap.raw $ANALYSIS/geneid $DATASETS/annotation/set/pseudo VH_pseudo ;
#
@ 
 
\subsubsctn{{\gnid} on masked sequences} 

<<BASH commands ANALYSIS>>=
#
# Masked sequences
run_GENEID Hsap.masked $DATASETS/fasta/masked chr22 1.0 ;
           ### Segmentation fault
#
run_GENEID Hsap.masked $DATASETS/fasta/masked chr22 1.1 ;
           ### Execution time for [bash] : 1125 secs
run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/all all ;
run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/fixed fixed ;
run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/set/cds VH_cds ;
run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/set/exons VH_exons ;
run_evaluation 22 geneid Hsap.masked $ANALYSIS/geneid $DATASETS/annotation/set/pseudo VH_pseudo ;
#
# After modifications due a bug in geneid 1.1 we executed again it to detect if it works properly
run_GENEID Hsap.masked.gnid_fix $DATASETS/fasta/masked chr22 1.1 ;
run_evaluation 22 geneid Hsap.masked.gnid_fix $ANALYSIS/geneid $DATASETS/annotation/set/cds VH_cds 47662662;
run_evaluation 22 geneid Hsap.masked.gnid_fix $ANALYSIS/geneid $DATASETS/annotation/set/exons VH_exons 47662662;
run_evaluation 22 geneid Hsap.masked.gnid_fix $ANALYSIS/geneid $DATASETS/annotation/set/pseudo VH_pseudo 47662662;
# The same resuls were obtained with the old and the new geneid.
@ 

\subsctn{Running {\gnid} with annotation evidences}

<<BASH Functions: Running GENEID + Evidences>>=
#
# RUNNING SGP
run_GENEIDevidences () 
{
  #
  # run_GENEIDevidences - Running geneid for a given sequence set
  #
  # USAGE: run_GENEIDevidences testname sequence evidence_file chr
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="GENEID" ; prog="geneid" ;
  # Setting VARS
  MAIN="$ANALYSIS/geneid" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  EVIDENCES="$3" ;
  locus="$4" ;
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs geneid_format tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  GNDBIN="/home/ug/gparra/Research/selfgenome" ;
  GENEID="$GNDBIN/bin/geneid" ;
  PARAM="$GNDBIN/src/geneid_v1.1/param/human3iso.param" ;
  echo "### Running geneid" ;
  $GENEID -v -D -E $EW -P $PARAM \
          -R $EVIDENCES $ISEQ/$locus \
          2>&1 > $BASE/geneid_format/$locus | tee $BASE/logs/geneid.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
#
@ 

<<BASH commands ANALYSIS>>=
#
# running geneid with evidences
run_GENEIDevidences Hsap.masked.evid $DATASETS/fasta/masked \
           $DATASETS/annotation/fixed/chr22.evidences chr22 ;
#
run_GENEIDevidences Hsap.masked.evid_VH $DATASETS/fasta/masked \
           $DATASETS/annotation/set/evidences/chr22 chr22 ;
#
# After modifications due a bug in geneid 1.1 we executed again it to detect if it works properly. 
# The evidences were also modified, all the length evidences are multiple of 3, and we force the frame to 0 to avoid problems. Odl evidences were moved to  $DATASETS/annotation/set/evidences/chr22.old
run_GENEIDevidences Hsap.masked.gnid_fix.evid $DATASETS/fasta/masked \
           $DATASETS/annotation/set/evidences/chr22 chr22 ;

# IDIR="$ANALYSIS/geneid/Hsap.masked.evid" ;
# IDIR="$ANALYSIS/geneid/Hsap.masked.evid_VH" ;
IDIR="$ANALYSIS/geneid/Hsap.masked.gnid_fix.evid" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* \
              > $IDIR/gff/chr22 ; 
gawk '{print $9}' $IDIR/gff/chr22 | sort | uniq -c | \
     sort -nr > $IDIR/gff/chr22.gene_list ;
# 
@


\subsctn{Running {\sgp}}

<<BASH Functions: Running SGP>>=
#
# RUNNING SGP
run_mod_SGP () 
{
  #
  # run_mod_SGP - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGP testname sequence hspdata chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  locus="$4";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  # SGP2="/home/ug/rguigo/research/humus/SGP2-2/sggp2/bin" ;
  # GENEID="$SGP2/geneid" ; # geneid v1.0
  # PARAM="$SGP2/human3iso.param" ;
  # # GENEID="/home/ug/gparra/Research/selfgenome/bin/geneid" ; # geneid v1.1
  # # PARAM="/home/ug/gparra/Research/selfgenome/src/geneid_v1.1/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  LSEQ=$5 ;
  echo "### Building $BASE/tmp/$locus.termini file" ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"cap\", -2, 0, \".\",  
              \"+\", 0}" > $BASE/tmp/$locus.termini ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"poly\", $LSEQ - 1, $LSEQ - 1,
              \".\", \"+\", 0}" >> $BASE/tmp/$locus.termini ;
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -E $EW -GP $PARAM -S $BASE/hsp-rs/$locus \
          -R $BASE/tmp/$locus.termini $ISEQ/$locus | grep -v evidence \
          > $BASE/gff/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
} 
#####################
## Run SGP modificated to output geneid
run_mod2_SGP () 
{
  #
  # run_mod_SGP - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGP testname sequence hspdata chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  locus="$4";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  # SGP2="/home/ug/rguigo/research/humus/SGP2-2/sggp2/bin" ;
  # GENEID="$SGP2/geneid" ; # geneid v1.0
  # PARAM="$SGP2/human3iso.param" ;
  # # GENEID="/home/ug/gparra/Research/selfgenome/bin/geneid" ; # geneid v1.1
  # # PARAM="/home/ug/gparra/Research/selfgenome/src/geneid_v1.1/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  LSEQ=$5 ;
  echo "### Building $BASE/tmp/$locus.termini file" ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"cap\", -2, 0, \".\",  
              \"+\", 0}" > $BASE/tmp/$locus.termini ;
  gawk "BEGIN{ printf \"%s\t%s\t%s\t%d\t%d\t%s\t%1s\t%1d\\n\", 
              \"$locus\", \"force\", \"poly\", $LSEQ - 1, $LSEQ - 1,
              \".\", \"+\", 0}" >> $BASE/tmp/$locus.termini ;
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -DE $EW -P $PARAM -S $BASE/hsp-rs/$locus \
          -R $BASE/tmp/$locus.termini $ISEQ/$locus | grep -v evidence \
          > $BASE/geneid/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
} 
#
# Geneid compiled on ik13 but when running on monstre we got this:
#
#  /home/ug/gparra/Research/selfgenome/bin/geneid: 
#    /lib/libc.so.6: version 'GLIBC_2.1.3' not found 
#    (required by /home/ug/gparra/Research/selfgenome/bin/geneid)
#
@ 

<<BASH commands ANALYSIS>>=
#
####
#### Roderic's TESTS on a SGP variant #'
#
# testing on Hsap_BTK
run_mod_SGP Hsap.masked /projects/datasets/orthologous/fasta/masked \
        /projects/sgp/orthologous/sgp/rguigo.masked3X_pankaj_W5/hsp \
        Hsap_BTK 78931 ;
enscript -1C -Gjf Courier7 -M A4 $ANALYSIS/sgp/Hsap.masked/gff/Hsap_BTK ;
#
# SGP on Masked chr22 sequence
run_mod_SGP Hsap.masked $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X/gff chr22 47662662 ;
run_evaluation 22 sgp Hsap.masked $ANALYSIS/sgp $DATASETS/annotation/all all ;
run_evaluation 22 sgp Hsap.masked $ANALYSIS/sgp $DATASETS/annotation/fixed fixed ;
#
run_mod_SGP Hsap.masked.frame $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X/gff chr22 47662662 ;
run_evaluation 22 sgp Hsap.masked.frame $ANALYSIS/sgp $DATASETS/annotation/all all ;
run_evaluation 22 sgp Hsap.masked.frame $ANALYSIS/sgp $DATASETS/annotation/fixed fixed ;
#
export GENEIDVERSION="geneid v1.1" ;
#
# We have fixed frames and run on 19Mreads
run_mod_SGP Hsap.masked.3X+ $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662 ;
run_evaluation 22 sgp Hsap.masked.3X+ $ANALYSIS/sgp $DATASETS/annotation/all all ;
run_evaluation 22 sgp Hsap.masked.3X+ $ANALYSIS/sgp $DATASETS/annotation/fixed fixed ;
#
# We have fixed frames for reverse strand too
run_mod_SGP Hsap.masked.3X+.fix $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662 ;
run_evaluation 22 sgp Hsap.masked.3X+.fix $ANALYSIS/sgp $DATASETS/annotation/fixed fixed ;
run_evaluation 22 sgp Hsap.masked.3X+.fix $ANALYSIS/sgp $DATASETS/annotation/set/cds VH_cds ;
run_evaluation 22 sgp Hsap.masked.3X+.fix $ANALYSIS/sgp $DATASETS/annotation/set/exons VH_exons ;
run_evaluation 22 sgp Hsap.masked.3X+.fix $ANALYSIS/sgp $DATASETS/annotation/set/pseudo VH_pseudo ;
#
# We have modified geneid 1.1 source (frame remainder problem)
run_mod_SGP Hsap.masked.3X+.fix.gnid_fix $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662 ;
run_evaluation 22 sgp Hsap.masked.3X+.fix.gnid_fix $ANALYSIS/sgp $DATASETS/annotation/fixed fixed 47662662;
run_evaluation 22 sgp Hsap.masked.3X+.fix.gnid_fix $ANALYSIS/sgp $DATASETS/annotation/set/cds VH_cds 47662662 ;
run_evaluation 22 sgp Hsap.masked.3X+.fix.gnid_fix $ANALYSIS/sgp $DATASETS/annotation/set/exons VH_exons 47662662 ;
run_evaluation 22 sgp Hsap.masked.3X+.fix.gnid_fix $ANALYSIS/sgp $DATASETS/annotation/set/pseudo VH_pseudo 47662662 ;
#
# Obtaining the prot and cds files
run_mod2_SGP Hsap.masked.3X+.fix.gnid_fix $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662 ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix" ;
$SGPBIN/evaluation  $ANALYSIS/blast/wublast.tblastx/masked3X+/gff/chr22 \
    $DATASETS/annotation/set/cds/chr22 
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
# Running sgp with the raw sequence of chr22 and the tblastx on the masked sequence
run_mod2_SGP Hsap.raw.3X+.fix.gnid_fix $DATASETS/fasta/raw \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662 ;
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* \
              > $IDIR/gff/chr22 ; 
run_evaluation 22 sgp Hsap.raw.3X+.fix.gnid_fix $ANALYSIS/sgp $DATASETS/annotation/set/cds VH_cds;



@ 

\subsctn{Gene-prediction statistics}

See table~\ref{tbl:genepredresults} on page~\pageref{tbl:genepredresults}, for a summary of gene prediction statistics.

<<BASH Gene Prediction Stats>>=
#
echo "### BUILDING GENE PREDICTION STATS LaTeX TABLE..." ;
perl -ne '
      BEGIN{
        @header = qw/ Test SN SP CC SNe SPe SNSP raME raWE
                           SNg SPg SNSPg raMG raWG raJG raSG / ;
        for ($j=0; $j<=$#header; $j++) {
          $header{$j} = "\\textbf\{$header{$j}\}";
        };
        print STDOUT "\\begin{tabular}{|c*{15}{|r}|}\\hline\n".
                     join("\&", @header)."\\\\\\hline\n";
        $n = 0;
      }
      chomp;
      $_ =~ m%^### /projects%o && do {
        $_ =~ s/(_)/\\$1/og;
        @file = split /\//og, $_;
        $file = "\\parbox\[c\]\[6ex\]\[c\]\{7cm\}\{\\centering".
                "\\shortstack\{\\texttt\{\\bfseries $file[($#file-2)]\} ".
                "\$\\rightarrow\$ $file[($#file-1)]\\\\\[-0.25ex\]($file[$#file])\}\}\n";
      }; 
      $_ =~ s%^\s+chr22\s+%%o    && do {
        ($n%3==0) && print STDOUT "\\hline\n";
        $n++;
        @field = split /\s+/og, $_;
        print STDOUT "$file \& ".join(" \& ",@field)."\\\\\[2ex\]\n" ;
      }; 
      END{
        print STDOUT "\\hline\n\\end{tabular}\n";
      }' \
  $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr22_fixed \
  $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr22_fixed \
  $ANALYSIS/sgp/Hsap.masked.3X+.fix/eval_sgp_brief.Hsap.masked.3X+.fix.chr22_fixed \
\
  $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr22_VH_cds \
  $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr22_VH_cds \
  $ANALYSIS/sgp/Hsap.masked.3X+.fix/eval_sgp_brief.Hsap.masked.3X+.fix.chr22_VH_cds \
\
  $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr22_VH_exons \
  $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr22_VH_exons \
  $ANALYSIS/sgp/Hsap.masked.3X+.fix/eval_sgp_brief.Hsap.masked.3X+.fix.chr22_VH_exons \
\
  $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr22_VH_pseudo \
  $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr22_VH_pseudo \
  $ANALYSIS/sgp/Hsap.masked.3X+.fix/eval_sgp_brief.Hsap.masked.3X+.fix.chr22_VH_pseudo \
\
  | cpif $DOCS/tables/gene-pred.tex ;
#
@  
\begin{table}[!ht]
\begin{center}
\begin{sideways}
\begin{minipage}[c][15cm][c]{24cm}
\begin{center}
\scriptsize
  \input tables/gene-pred.tex
\caption{\label{tbl:genepredresults} Gene prediction statistics on chromosome 22.}
\end{center}
\end{minipage}
\end{sideways}
\end{center}
\end{table}

<<HIDE: BASH commands ANALYSIS>>=
#
### PRINTING GENE-PREDICTION EVALUATIONS
ENSCRIPT="enscript -1C -Gjf Courier7 -M A4" ;
#
# GENEID evaluation
$ENSCRIPT $ANALYSIS/geneid/Hsap.raw/eval_geneid.Hsap.raw.chr22_all ;
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr22_all ;
$ENSCRIPT $ANALYSIS/geneid/Hsap.raw/eval_geneid.Hsap.raw.chr22_fixed ;
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.raw/eval_geneid_brief.Hsap.raw.chr22_fixed ;
#
$ENSCRIPT $ANALYSIS/geneid/Hsap.masked/eval_geneid.Hsap.masked.chr22_all ;
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr22_all ;
$ENSCRIPT $ANALYSIS/geneid/Hsap.masked/eval_geneid.Hsap.masked.chr22_fixed ;
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.masked/eval_geneid_brief.Hsap.masked.chr22_fixed ;
#
$ENSCRIPT $ANALYSIS/geneid/Hsap.masked.evid/eval_geneid.Hsap.masked.evid.chr22_fixed ;
$ENSCRIPT -r $ANALYSIS/geneid/Hsap.masked.evid/eval_geneid_brief.Hsap.masked.evid.chr22_fixed ;
#
# SGP evaluation
$ENSCRIPT $ANALYSIS/sgp/Hsap.masked/eval_sgp.Hsap.masked.chr22_all ;
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.masked/eval_sgp_brief.Hsap.masked.chr22_all ;
$ENSCRIPT $ANALYSIS/sgp/Hsap.masked/eval_sgp.Hsap.masked.chr22_fixed ;
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.masked/eval_sgp_brief.Hsap.masked.chr22_fixed ;
#
$ENSCRIPT $ANALYSIS/sgp/Hsap.masked.frame/eval_sgp.Hsap.masked.frame.chr22_all ;
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.masked.frame/eval_sgp_brief.Hsap.masked.frame.chr22_all ;
$ENSCRIPT $ANALYSIS/sgp/Hsap.masked.frame/eval_sgp.Hsap.masked.frame.chr22_fixed ;
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.masked.frame/eval_sgp_brief.Hsap.masked.frame.chr22_fixed ;
#
@

\subsctn{Running {\sgp} with annotation evidences}

<<BASH Functions: SGP + Evidences>>=
#
# RUNNING SGP + Evidences
#
run_mod_SGPevidences () 
{
  #
  # run_mod_SGPevidences - Running SGP for a given sequence set
  #
  # USAGE: run_mod_SGPevidences testname sequence hspdata evidences chr seqlength
  #
  # 'testname' is the subdir of $MAIN where to save all the results
  # 'sequence' is path to the fasta file/s containing the query sequence
  # 'blastdata' is path to the HSPs for homology evidences
  #
  SECONDS=0;
  PROG="SGP" ; prog="sgp" ;
  # Setting VARS
  MAIN="$ANALYSIS/sgp" ;
  RUN="$1" ;
  BASE="$MAIN/$RUN" ;
  ISEQ="$2" ;
  HSPs="$3" ;
  EVIDENCES="$4" ;
  locus="$5";
  HSP_SR="$BASE/tmp" ;
  ODIR="$BASE/gff" ;
  EDIR="$BASE/logs" ;
  LSEQ=$6 ;
  #
  # Checking if DIRS does EXIST
  ChckDirs $MAIN $BASE ;
  for c in hsp sr hsp-rs geneid_format tbx gff gtf2 cds prot logs tmp ps ps/_tmp ;
    do { ChckDirs $BASE/$c ; } ; done ;
  #
  # Running SGP TOOL ############################### Excerpt from 
  # export HOME='/home/ug/rguigo' ; # to avoid modifying Roderic's scripts
  # export SGP="/home/ug/rguigo/research/humus/SGP2-2/bin/sggp2" ;
  PROBIN="/projects/bin" ;
  SGP2="/projects/sgp/src/geneid_v1.1-sgp" ;
       # binaries, scripts and params in SGP2
  GENEID="$SGP2/bin/geneid" ; # geneid v1.1-sgp
  PARAM="$SGP2/param/human3iso.param.sgp" ;
  EW=0 ; # add to exon weigth
  S_CUTOFF=26 ;
  SCF=0 ;    # substract to tblastx scores S_CUTOFF - SCF;
  DSC=`expr $S_CUTOFF - $SCF` ;
  SHSP=0 ;   # SHSP=6         # shrink hsp by $SHSP
  WTBX=0.19 ;  # weigth of tblastx score
  WTBXF=0.30 ; # weigth of tblastx score
  WTBXI=0.20 ; # weigth of tblastx score
  WTBXT=0.30 ; # weigth of tblastx score
  echo "### Running blast2gff" ;
  $PROBIN/blast2gff -g $HSPs/$locus > $BASE/sr/$locus \
          2> $BASE/logs/geneid_sgp.$locus ;
  gawk "\$6 > $S_CUTOFF {
          \$6 = (\$6-$DSC)*$WTBX; \$4=\$4+$SHSP; \$5=\$5-$SHSP; print \$0;
        }" < $BASE/sr/$locus > $BASE/hsp-rs/$locus ;
  echo "### Running geneid" ;
  { $GENEID -v -D -E $EW -P $PARAM -S $BASE/hsp-rs/$locus \
          -R $EVIDENCES $ISEQ/$locus \
          > $BASE/geneid_format/$locus ;
    } 2>&1 | tee $BASE/logs/geneid_sgp.$locus ;
  # Running SGP TOOL ############################### 
  { echo "###"; echo "### Execution time for $PROG : $SECONDS secs"; 
    echo "###"; } 1>&2;
}
# 
@

<<BASH commands ANALYSIS>>=
#
####
#### SGP plus evidences
#
# SGP on Masked chr22 sequence
run_mod_SGPevidences Hsap.masked.evidences $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X/gff \
        $DATASETS/annotation/fixed/chr22.evidences chr22 47662662 ;
#
run_mod_SGPevidences Hsap.masked.3X+.evid $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff \
        $DATASETS/annotation/fixed/chr22.evidences chr22 47662662 ;
#
run_mod_SGPevidences Hsap.masked.3X+.fix.evid $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff \
        $DATASETS/annotation/fixed/chr22.evidences chr22 47662662 ;
#
run_mod_SGPevidences Hsap.masked.3X+.fix.evid_VH $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff \
        $DATASETS/annotation/set/evidences/chr22 chr22 47662662 ;
#
# After the bug modification and the frame.
run_mod_SGPevidences Hsap.masked.3X+.fix.gnid_fix.evid/ $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/gff \
        $DATASETS/annotation/set/evidences/chr22 chr22 47662662 ;

@ 

<<BASH Functions: Filtering GENEID RAW Output>>=
#
# Script from gparra to retrieve GFF annotation from geneid big output
geneid_raw2GFF ()
{
  # USAGE:  geneid_raw2GFF output_dir geneid_file
  # filtering geneid output (obtained with "-D" option -> default output+cDNA)
  PD=$1 ;
  /bin/rm -vf $PD/gff/* $PD/prot/* $PD/cds/* ;
  gawk 'BEGIN{ OFS="\t"; odir=ARGV[1]; ARGV[1]="" }
    { if ($2=="Sequence") seqname=$3;
      if ($2=="Gene") gene=$3;
      if (NF>8 && substr($1,1,1)!="#" && $1!="Annotation")
        print seqname,"geneid_v1.1",$1,$2,$3,$4,$5,$6,seqname"_"gene \
              > odir "/gff/" seqname"_"gene;
      if (substr($1,1,1)==">") {
        if (substr($1,length($1)-1,2)=="NN") {
          print ">"seqname"_"gene > odir "/cds/" seqname"_"gene;
          bol=1;
        } else if (substr($1,length($1)-1,2)=="AA") {
          print ">"seqname"_"gene > odir "/prot/" seqname"_"gene;
          bol=2;
        };
      } else {
        if (bol==1 && NF==1 && substr($1,1,1)!=">" ) 
          print $0 > odir "/cds/" seqname"_"gene;
      };
      if (bol==2 && NF==1 && substr($1,1,1)!=">" )
        print $0 > odir "/prot/" seqname"_"gene;
    }' $PD $2 ;
}
#
@ 

<<BASH commands ANALYSIS>>=
#
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.evid" ;
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.evid" ;
# IDIR="$ANALYSIS/geneid/Hsap.masked.evid_VH" ;
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.evid_VH" ;
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid" ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix";
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* > $IDIR/gff/chr22 ;
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr22 | sort +1n +2n -3 > $IDIR/gff/chr22.gene_list ;
# gawk '{print $9}' $IDIR/gff/chr22 | sort | uniq -c | \
#      sort -nr > $IDIR/gff/chr22.gene_list ;
#
wc $ANALYSIS/sgp/Hsap.masked.3X+.evid/gff/chr22.gene_list ;
    162     810    5155
wc $ANALYSIS/sgp/Hsap.masked.3X+.fix.evid/gff/chr22.gene_list ;
    181     905    5765
wc $ANALYSIS/sgp/Hsap.masked.3X+.fix.evid_VH/gff/chr22.gene_list ;
    104     520    3321
wc $ANALYSIS/geneid/Hsap.masked.evid_VH/gff/chr22.gene_list ;
    147     735    4692
# we got more genes once we fixed frame from HSPS for both strands.
wc $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/gff/chr22.gene_list ; 
     115     575    3667 
@

<<HIDE: BASH commands ANALYSIS>>=
#
# Preparing files for Michael Brent
IDIR="$ANALYSIS/sgp" ;
# EXP="Hsap.masked.3X" ;
# EXP="Hsap.masked.3X+.fix" ;
EXP="Hsap.masked.3X+.fix.gnid_fix" ;
# ODIR="$IDIR/sgp_chr22_3X" ;
# ODIR="$IDIR/sgp_chr22_3X+" ;
ODIR="$IDIR/sgp_chr22_3X+_VH" ;
#
ChckDirs $ODIR ;
#
cp $ANALYSIS/geneid/Hsap.masked/gff/chr22 $ODIR/chr22_geneid.gff ;
$SGPBIN/gff2gtf.pl < $ODIR/chr22_geneid.gff \
                   > $ODIR/chr22_geneid.gtf2 ;
cp $ODIR/chr22_geneid.gtf2 $ANALYSIS/geneid/Hsap.masked/gtf2/chr22 ;
#
cp $IDIR/$EXP/gff/chr22 $ODIR/chr22_all.gff ;
$SGPBIN/gff2gtf.pl < $ODIR/chr22_all.gff \
                   > $ODIR/chr22_all.gtf2 ;
cp $ODIR/chr22_all.gtf2 $IDIR/$EXP/gtf2/chr22 ;
#
perl -ne '
  chomp;
  $_ !~ /^#/o && do {
     @F = split /\s+/og, $_;
     $F[8] =~ s/.*?_//o;
     print STDOUT join("\t",@F)."\n";
     next;
  };
  print STDOUT "$_\n";
  ' $IDIR/$EXP.evid/gff/chr22 > $ODIR/chr22_evid.gff ;
$SGPBIN/gff2gtf.pl < $ODIR/chr22_evid.gff \
                   > $ODIR/chr22_evid.gtf2 ;
cp $ODIR/chr22_evid.gtf2 $IDIR/$EXP.evid/gtf2/chr22 ;
#
pushd $IDIR ;
# star sgp_chr22_3X.tgz sgp_chr22_3X ;
star sgp_chr22_3X+.tar.gz sgp_chr22_3X+ ;
popd ;
#
@ 
%$

\subsctn{Analizing \sgp\ predicted genes among Victoria annotations}

At this point we have run SGP against chr22, using tblastx hits as aditionals evidences of coding statistics, and skipping the known genes (Victoria Haghighi set). In Victoria'set there are nn cds annotation, plus nn genes (without known cds boundaries), plus nn pseudogenes. Using this annotations with SGP we obtain 115 genes instead of nn genes obtained in the previous aproach (with out annotations). Then, Bingo, a program that compares a query sequences against several databases, was runned by Pankaj to obtain more information about the predicted genes.
%'
<<HIDE: Bash commands SGP new genes analysis>>=

# Analizing new predictions obtained with SGP + VH annotations
#
# Obtaining the supported exons of the predicted genes. Input: geneid,
# genscan and tblastx hits. Output: sgp exons with tags GND GNS TBX 
# if the exon overllaps them.
   $SGPBIN/supportexons \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/hsp-rs/chr22 \
      $ANALYSIS/geneid/Hsap.masked.gnid_fix/gff/c1.geneid \
       $ANALYSIS/genscan/Hsap.masked/gff/chr22.sr \
       < $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/gff/chr22 \
     > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.e-support
# We want to obtain the number of exons with TBX and GSN for each prediction
  grep TBXMATCH chr22.e-support | gawk '{print $1, $9}' | sort \
      | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.tbx-support
  grep GNSMATCH chr22.e-support | gawk '{print $1, $9}' | sort \
      | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.gscn-support
# There are 106 genes with at least 1 supported exon by tbx and 67 with genscan
# support. 
# We need the coverage of each exons with the hsp
gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9"."++ct[$9],0; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9"."++ct[$9], cov/($5-$4+1);}}' \
            $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.e-support\
 > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.tbx.e-support_percent
# We sent all genes to pankaj and we have all the results in a tabular table,
# file at $ANALYSIS/sgp/tmp/bingo/bingo.tbl
# Joing all the data. Gene and num. exons, tbx support, genscan support, and
# pankaj results.
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.tbx-support \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/gff/chr22.gene_list | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.tbx-support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.gscn-support \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/tmp/exonerate/chr22.exonerate \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/tmp/blastz/chr22.blastzMouse-support \
      -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/tmp/blatmouse/chr22.blatMouse-support \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/tmp/mystery/looseMystery/chr22.mystery \
      -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/tmp/bingo/bingo.tbl4 \
      - \
       > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/table6.tbl   

  
@       
%$
\subsctn{Filtering ensembl cdna and mRNA identity hits}
At this point, we want to filter the sgp predictions containing ensembl,EST and mRNA human hits.

<<bash commands>>=
# We have a table with the hit of every sgp prediction
gawk '$15==0 && $17==0 && $19==0 && $5>100' \
     $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/table6.tbl 
# There are 42 genes excluding genes shorter than 100nt.
# This gawk line compute the number of aa masked by seg.
gawk '{if (substr($1,1,1)==">") \
   {if (NR!=1) printf mask/(tot+mask)"\n";printf substr($1,2)" ";tot=mask=0}\
   else {mask+=gsub(/[a-z]/,/0/); tot+=gsub(/[A-Z]/,/0/)}}\
   END{printf mask/(tot+mask) "\n";}' seg | gawk '$2>=0.50' 
# This gawk line compute the number of aa masked by xnu.
	FastaToTbl xnu.fa | gawk '{print $1,gsub(/X/,/X/)/(length($2)-1)}' \
    | gawk '$2>=0.50'
# There were only 5 sequences with more than 50% of low completxity repeats
chr22_94 0.60472                                                             chr22_123 0.95935 # This protein had not still been filtered. 
chr22_174 0.713805
chr22_179 0.538462
chr22_185 0.567568
# We have a table with the hit of every sgp prediction 
gawk '$15==0 && $17==0 && $19==0 && $5>100' \
 $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/table6.tbl | \
 egrep -v "chr22_94|chr22_123|chr22_174|chr22_179|chr22_185" > NovelGenes.tbl
# Now we want to have a rank of all the exons.
# First we need the coordenates for each exon in the cDNA sequence
mkdir $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/cds_coord
ODIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/cds_coord/";
/home/ug/jabril/development/softjabril/fullgffcoords/bin/fullgffcoords.pl -c\
  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/gff/chr22 | 
  gawk "{OFS=\"\t\";\$1=\$9;\$7=\"+\";\$9=\$9\".\"++ct[\$9];print  > \"$ODIR/\" \$1}" 
ls -1 $ODIR | while read locus
do
   sort +3n -o $locus $locus
done

#  we need to run blast2gff against all the blast results to obtain
# and hsp file for each gene.
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/tmp/bingo/bx"
ls -1 $IDIR | sed 's/\///' | while read locus
do
  for database in seq.ensembl_cdna seq.gbhum seq.gbest seq.mouseasm.h seq.ratasm.h seq.tetraodon.h seq.CDD.h seq.nr
  do
    echo "parseblast " $locus
    parseblast -G $IDIR/$locus/$database | \
      gawk '{OFS="\t";$7="+";$8="1";print}' \
      > $IDIR/$locus/$database.hsp.gff
    $SGPBIN/blast2gff -g $IDIR/$locus/$database.hsp.gff \
      > $IDIR/$locus/$database.sr.gff
    $SGPBIN/supportexons $IDIR/$locus/$database.sr.gff nul nul <  \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/cds_coord/$locus  \
      > $IDIR/$locus/$database.e-support
    # Script to compute the percentage of coverage from e-suppor file
    gawk '{min=0;max=0;for (i=16;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==16)
             print $9,0; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9, cov/($5-$4+1);}}' \
      $IDIR/$locus/$database.e-support \
      > $IDIR/$locus/$database.e-support_percent
  done
done
# Now we want to join all the data about the exons.
ls -1 $IDIR | sed 's/\///' | while read locus
do
  join $IDIR/$locus/seq.ensembl_cdna.e-support_percent \
                $IDIR/$locus/seq.gbhum.e-support_percent | \
      join - $IDIR/$locus/seq.gbest.e-support_percent | \
      join - $IDIR/$locus/seq.mouseasm.h.e-support_percent | \
      join - $IDIR/$locus/seq.ratasm.h.e-support_percent | \
      join - $IDIR/$locus/seq.nr.e-support_percent | \
      join - $IDIR/$locus/seq.tetraodon.h.e-support_percent | \
      join - $IDIR/$locus/seq.CDD.h.e-support_percent
done | join2 $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/chr22.tbx.e-support_percent -  | \
gawk 'BEGIN{printf "%15s %8s %8s %8s %8s %8s %8s %8s %8s %8s  \n","Exon","HSP","ensembl","gbhum","gbest","mouseasm","ratasm","nr","tetraodon","CDD" }{$1=$1;printf "%15s %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f \n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10}' \
> $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/exon.table 

#gawk 'BEGIN{print "Exon","HSP","ensembl_cdna","gbhum","gbest","mouseasm","ratasm","nr","tetraodon","CDD" }{$1=$1;printf " %7s %7s %7s %7s %7s %7s  ",$1,$2,$3,$4,$5,$6,$7,$8,$9}'

@ 
%$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Finding Genes for RT-PCR

\sctn{Filtering and sorting Chr22 SGP predictions}

\subsctn{Filtering genes ovelapping known Victoria genes}
We sent to Pankaj the predicted genes without using Victoria annotations, but removing predictions overlapping them.
Therefore from the 660 predicted genes we substract 443 genes overllaping the Victoria cds set. Finally, there were 217 sgp predicted genes. Using the whole set of exons plus pseudogenes we there were 106 genes not overlapped. 

/projects/sgp/chr22/sgp/Hsap.masked.3X+.fix.gnid_fix
<<bash commands>>=
# Support exons was used to knwon with exons have common regions with 
# Victoria cds annotations set. It takes in account the strand of the 
# annotation.
$SGPBIN/supportexons \
	$DATASETS/annotation/set/cds/chr22 null null \
	< $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 |\
	sed 's/TBXMATCH/CDSMATCH/g' \
    > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-VH_CDS2
$SGPBIN/supportexons \
	$DATASETS/annotation/set/exons/chr22 null null \
	< $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 |\
	sed 's/TBXMATCH/EXOMATCH/g' \
    > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-VH_EXON
$SGPBIN/supportexons \
	$DATASETS/annotation/set/pseudo+exons/chr22 null null \
	< $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 |\
	sed 's/TBXMATCH/EXOMATCH/g' \
    > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-VH_PSEUDO+EXON
# Now we need to known with genes do not have any exon with overllaping
# region. Supportexons put a tag with the positions of the annotation at 
# each supported exon. So, we extract the exons with MATCH fields.
grep CDSMATCH $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-VH_CDS |
    gawk '{print $1"_"$9}' | sort | uniq -c | gawk '{print $2, $1}' \
    >  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.VH_CDS-support
grep EXOMATCH $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-VH_EXON |
    gawk '{print $1"_"$9}' | sort | uniq -c | gawk '{print $2, $1}' \
    >  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.VH_EXON-support
grep EXOMATCH $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-VH_PSEUDO+EXON |
    gawk '{print $1"_"$9}' | sort | uniq -c | gawk '{print $2, $1}' \
    > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.VH_PSEUDO+EXON-support

# Extraction the non covered genes for the two set
gawk '$2=="Gene"{print "chr22_"$3}' \
   $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 \
   | sort | join -v 1 -  chr22.VH_CDS-support \
   > chr22.VH_CDS-no_overlapping
gawk '$2=="Gene"{print "chr22_"$3}' \
   $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 \
   | sort | join -v 1 -  chr22.VH_EXON-support \
   > chr22.VH_EXON-no_overlapping
gawk '$2=="Gene"{print "chr22_"$3}' \
   $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 \
   | sort | join -v 1 -  chr22.VH_PSEUDO+EXON-support \
   > chr22.VH_PSEUDO+EXON-no_overlapping
# We will use the chr22.VH_PSEUDO+EXON-no_overlapping genes 106.
# We sent a to panjak chr22.VH_CDS-no_overlapping because we can
# be interested in recovering other results.
mkdir $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/prot_no_overlapping
mkdir $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/cds_no_overlapping
while read locus
do
   echo $locus
   cp $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/cds/$locus \
     $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/cds_no_overlapping
   cp $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/prot/$locus \
     $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/prot_no_overlapping     
done <  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.VH_CDS-no_overlaping
# Building the tar file for pankaj.
tar -zcvf sgp.prediction.tar.gz \
    Hsap.masked.3X+.fix.gnid_fix/chr22.VH_EXON-no_overlapping \
    Hsap.masked.3X+.fix.gnid_fix/chr22.VH_CDS-no_overlapping \
    Hsap.masked.3X+.fix.gnid_fix/prot_no_overlapping \
    Hsap.masked.3X+.fix.gnid_fix/cds_no_overlapping
mv sgp.prediction.tar.gz ~/no_backup/pagarwal
@ 
%$

\subsection{Filtering genes acording to the bingo results}
We need to convert the bingo report sent by Pankaj in a table with a line for each gene.

<<shell commands>>=
# script that convert the raw bingo result in a tbl file
gawk 'NF>0 && $2!="rejected" && NR>5 \
      {if (substr($1,1,5)=="chr22" || (substr($1,1,5)=="=====")) \
          {printf "\n";printf $0" ";} \
       else {for (c=1;c<NF-1;c++) printf $c"_"; printf $(NF-1)" "$NF" "} }'\
       bingo | sed 's/_/ /' | sort +1n | sed 's/ /_/;/^$/d;/^====/d' \
     > bingo.tbl
# Now we want to parse all the sequences and select some databases
gawk '{CDNA=HUMEST=GBHUM=MUSEST=RATEST=NR=PUF=DOM=0; for (i=2;i<=NF;i+=2){ \
        CDNA += ($i == "Ensembl_cDNAs")? -$(i+1) : 0;
        HUMEST += ($i ~ /NCBI_Ests/)? $(i+1) : 0;
        GBHUM  += ($i == "GenBank_Human")? $(i+1) : 0;
        MUSEST  += ($i ~ /Mouse_EST_Assemblies/)? $(i+1) : 0;
        RATEST  += ($i ~ /Rat_EST_Assemblies/)? $(i+1) : 0;
        NR += ($i == "nr")? $(i+1) : 0;
        PUF += ($i == "Pufferfish_Genomic")? $(i+1) : 0;
        DOM += ($i == "Conserved_Domain_Database_(NCBI)")? $(i+1) : 0;}
      print $1,"CDNA",CDNA,"GBHUM",GBHUM,"HUMEST",HUMEST,"MUSEST",MUSEST,"RATEST",RATEST,"NR",NR,"PUF",PUF,"DOM",DOM}' bingo.tbl > bingo.select.tbl 
# Now we also want to obtain the genes suported by hsp and compute the
# coverage on them
   $SGPBIN/supportexons \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/hsp-rs/chr22 \
      $ANALYSIS/geneid/Hsap.masked.gnid_fix/gff/c1.geneid \
       $ANALYSIS/genscan/Hsap.masked/gff/chr22.sr \
       < $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 \
     > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-support
# compute the percentage of coverage
    gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9,0,$5-$4+1; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9, cov, $5-$4+1;}}' \
          $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-support | \
          gawk '{cov[$1]+=$2;len[$1]+=$3}\
                END{for (loc in len) print loc, cov[loc]/len[loc]}' \
      > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.tbx-support_percent
# We need the coverage of each exons with the hsp
gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9"."++ct[$9],0; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9"."++ct[$9], cov/($5-$4+1);}}' \
            $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-support\
 > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.tbx.e-support_percent
 
# Generating the other supported files
# We want to obtain the number of exons with TBX and GSN for each prediction
  grep TBXMATCH $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-support \
      | gawk '{print $1, $9}' | sort | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.tbx-support
  grep GNSMATCH $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.e-support \
      | gawk '{print $1, $9}' | sort | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.gscn-support
# join all the files toghether
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.tbx-support \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22.gene_list | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.tbx-support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.gscn-support \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/exonerate/chr22.exonerate \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/blastz/chr22.blastzMouse-support \
      -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/blatmouse/chr22.blatMouse-support \
      -   | 
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
         ARGV[1]="";} \
       { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/mystery/looseMystery/chr22.mystery \
      -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/bingo/bingo.select.tbl \
      - \
      > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/table.tbl
#####################
## We build the html database with the prevoius dataset.
# We filter the genes with overllaping region on the victoria set.
join2 $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/chr22.VH_PSEUDO+EXON-no_overlapping \
    $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/table.tbl  \
    >  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/table_no.tbl

# Building the html table
mkdir $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/table
# The file neede are :
# geneid output in geneid format
# gff file of the prediction
# gff file of the hsps
#########
# The hsp file need to have group field:
gawk '{OFS="\t";$9=1;print}' \
   $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/sr/chr22 \
   > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/table/chr22.sr.gff
# In this gawk commad line we join the information of the homology stored in\
# table file and the output of geneid nneed by geneid2html
gawk 'BEGIN{while (getline<ARGV[1]>0){gsub ("_"," ");\
data[$2]="# Gene " $1 "_" $2 " (). " $6" nt. " $7 " exons. " $8 " exons_sup. " substr ($9,1,4)*100 " %cov. " $10 " genscan. " $11 " Exonerate. " $12 " Blastz. " $13 " Blat. "  $14 " Mystery. " $16 " CDNA. " $18 " GB_HUM. " $20 " EST_HUM. " $22 " EST_MUS. " $24  " EST_RAT. " $26 " NR. " $28 " PUF. " $30 " CDD." }; ARGV[1]="";}{if ($2=="Gene" && $7!=0 && data[$3]) print data[$3]; else print}' \
  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/table_no.tbl \
  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/geneid_format/chr22 \
  > $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/table/chr22.geneid
#We devided the information of the chr22.geneid into the four cathegories
TABLE="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/tmp/table"
# Genes with ensembl hits
gawk '{if (NR<5) print;if ($2=="Gene") \
   if ($7!=0 && $23>0) {bol=1;} else {bol=0} if (bol==1) print $0 }' \
   $TABLE/chr22.geneid > $TABLE/chr22.ensembl_cdna.gnid
# Genes without genscan hits
gawk '{if (NR<5) print;if ($2=="Gene") \
   if ($7!=0 && $13==0 && $23==0) {bol=1;} else {bol=0} \
   if (bol==1) print  $0 }' \
   $TABLE/chr22.geneid > $TABLE/chr22.no_genscan.gnid
# Genes without HSP support
gawk '{if (NR<5) print;if ($2=="Gene") \
   if ($7!=0 && $13!=0 && $23==0 && $9==0) {bol=1;} else {bol=0} \
   if (bol==1) print  $0 }' \
   $TABLE/chr22.geneid > $TABLE/chr22.no_supported.gnid
# Genes remaining
gawk '{if (NR<5) print; if ($2=="Gene") \
   if ($7!=0 && $13!=0 && $23==0 && $9!=0) {bol=1;} else {bol=0} \
   if (bol==1) print  $0 }' \
   $TABLE/chr22.geneid > $TABLE/chr22.supported.gnid
# A file with the titles of each group was done
cat > titles
ensembl_cdna SGP predictions identical to ensembl cDNA (95% identity over 100bp)
supported  SGP predictions overlapping genscan predictions
no_genscan  SGP predictions NOT overlapping genscan predictions
no_supported SGP predictions WITHOUT homology support of Mouse genome shotgun
# We asure that no old file were in the directory
rm -f $TABLE/table_chr22A.html \
      $TABLE/geneid_chr22.ensembl_cdna.html \
      $TABLE/geneid_chr22.no_genscan.html \
      $TABLE/geneid_chr22.supported.html \
      $TABLE/geneid_chr22.no_supported.html
# The following script execute geneid2html.pl
while read file title
do
  $SGPBIN/geneid2html.pl \
     $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 \
     $TABLE/chr22.sr.gff  \
     $TABLE/chr22.$file.gnid 
  sed "s/geneid_chr22.html/geneid_chr22.$file.html/g" \
    $TABLE/table_chr22.html | \
  gawk "{if (NR==8){print;print \"<h2> $title <h2>\"} else print}"\
     >> $TABLE/table_chr22A.html  
  mv $TABLE/geneid_chr22.html $TABLE/geneid_chr22.$file.html
done < $TABLE/titles

gawk '$15==0 && $17==0 && $19==0 && $5>100' | \

mkdir $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/cds_coord
ODIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/cds_coord/";
/home/ug/jabril/development/softjabril/fullgffcoords/bin/fullgffcoords.pl -c\
  $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix/gff/chr22 | 
  gawk "{OFS=\"\t\";\$1=\$9;\$7=\"+\";\$9=\$9\".\"++ct[\$9];print  > \"$ODIR/\" \$1}" 
ls -1 $ODIR | while read locus
do
   sort +3n -o $ODIR/$locus $ODIR/$locus
done

@ 
%$

\subsctn{Some test and final modifications}
\subsubsctn{Testing predictions with hsp lower than 39.6}
At this point, we had the \tbx results from pankaj on chr21. Pankaj had modified tblastx parameters again and we wanted to know if this modification could be critical to the final results. The new parameters included was S2=80 and we realized that with it any hit lower than 39.6 (bit score) appeared in chr21 hsps. Therefore, we decided to use chr22 as control, trying to evaluate the predicitons without  hsp lower than 39.6. The results showed a little decrease in sensitivity and a little increase in specificity.                                           

<<SGP hsp > 39.6 >>=
# Modifying hsp hits there are 18469 hsp with a score lower than 39.6
mkdir $ANALYSIS/blast/wublast.tblastx/masked3X+/test
gawk '$6 > 39.6' $ANALYSIS/blast/wublast.tblastx/masked3X+/gff/chr22 \
        >  $ANALYSIS/blast/wublast.tblastx/masked3X+/test/chr22
# Run SGP (passem de 21834 a 18542 sr )
run_mod_SGP Hsap.masked.3X+.fix.gnid_fix.hsp $DATASETS/fasta/masked \
        $ANALYSIS/blast/wublast.tblastx/masked3X+/test chr22 47662662 ;
run_evaluation 22 sgp Hsap.masked.3X+.fix.gnid_fix.hsp $ANALYSIS/sgp $DATASETS/annotation/set/cds VH_cds 47662662;
@ 

\subsubsctn{Trying different exon weights}
After having the predictions of chr21, we realized that the sensitivity and speecificity could be improved

<<Exon weigth changes>>=
# trying with exon weight +1
run_mod_SGP Hsap.raw.3X+.fix.gnid_fix.ew-1 $DATASETS/fasta/raw \
>         $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-1" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* \
              > $IDIR/gff/chr22 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr22 | sort +1n +2n -3 > $IDIR/gff/chr22.gene_list ;
# Evaluation 
# CDS
run_evaluation 22 sgp Hsap.raw.3X+.fix.gnid_fix.ew-1 $ANALYSIS/sgp \
     $DATASETS/annotation/set/cds VH_cds 47662662;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp.Hsap.raw.3X+.ew-1.chr21_CDSsr 
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+/eval_sgp_brief.Hsap.ew-1.raw.3X+.chr21_CDSsr 
# trying with exon weight +2
run_mod_SGP Hsap.raw.3X+.fix.gnid_fix.ew-2 $DATASETS/fasta/raw \
       $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* \
              > $IDIR/gff/chr22 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr22 | sort +1n +2n -3 > $IDIR/gff/chr22.gene_list ;
# Evaluation 
# CDS
run_evaluation 22 sgp Hsap.raw.3X+.fix.gnid_fix.ew-2 $ANALYSIS/sgp \
     $DATASETS/annotation/set/cds VH_cds 47662662;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2/eval_sgp.Hsap.raw.3X+.fix.gnid_fix.ew-2.chr22_VH_cds
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2/eval_sgp_brief.Hsap.raw.3X+.fix.gnid_fix.ew-2.chr22_VH_cds
# trying with exon weight -2 isochore 1
run_mod_SGP Hsap.raw.3X+.fix.gnid_fix.ew--2 $DATASETS/fasta/raw \
       $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew--2" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* \
              > $IDIR/gff/chr22 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr22 | sort +1n +2n -3 > $IDIR/gff/chr22.gene_list ;
# Evaluation 
# CDS
run_evaluation 22 sgp Hsap.raw.3X+.fix.gnid_fix.ew--2 $ANALYSIS/sgp \
     $DATASETS/annotation/set/cds VH_cds 47662662;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2/eval_sgp.Hsap.raw.3X+.fix.gnid_fix.ew--2.chr22_VH_cds
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2/eval_sgp_brief.Hsap.raw.3X+.fix.gnid_fix.ew--2.chr22_VH_cds

# trying with exon weight -2 isochore 1 +2
run_mod_SGP Hsap.raw.3X+.fix.gnid_fix.ew-2+2 $DATASETS/fasta/raw \
       $ANALYSIS/blast/wublast.tblastx/masked3X+/gff chr22 47662662
IDIR="$ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2" ;
geneid_raw2GFF $IDIR $IDIR/geneid_format/chr22 ;
sort +3n +4n -5 $IDIR/gff/chr22_* \
              > $IDIR/gff/chr22 ; 
gawk '{
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n],genes[n];
      };
    }' $IDIR/gff/chr22 | sort +1n +2n -3 > $IDIR/gff/chr22.gene_list ;
# Evaluation 
# CDS
run_evaluation 22 sgp Hsap.raw.3X+.fix.gnid_fix.ew-2+2 $ANALYSIS/sgp \
     $DATASETS/annotation/set/cds VH_cds 47662662;
$ENSCRIPT  $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/eval_sgp.Hsap.raw.3X+.fix.gnid_fix.ew-2+2.chr22_VH_cds
$ENSCRIPT -r $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/eval_sgp_brief.Hsap.raw.3X+.fix.gnid_fix.ew-2+2.chr22_VH_cds
@ 

<<Filtering new predictions>>=
# CDS coords
mkdir $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/cds_coord
ODIR="$ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/cds_coord/";
/home/ug/jabril/development/softjabril/fullgffcoords/bin/fullgffcoords.pl -c\
  $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/gff/chr22 | 
  gawk "{OFS=\"\t\";\$1=\$9;\$7=\"+\";\$9=\$9\".\"++ct[\$9];print  > \"$ODIR/\" \$1}" 
ls -1 $ODIR | while read locus
do
   sort +3n -o $ODIR/$locus $ODIR/$locus
done
# Now we want to filter the final predictions Hsap.raw.3X+.fix.gnid_fix.ew-2+2/
# Low complexity masking proteins
mkdir $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/seg $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/xnu
ls -1 $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/prot/ | while read locus
do
    echo $locus 
    /usr/local/molbio/Install/wublast/filter/seg \
         $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/prot/$locus \
         > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/seg/$locus
    /usr/local/molbio/Install/wublast/filter/xnu \
    $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/prot/$locus \
         > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/xnu/$locus
done
# This gawk line compute the number of aa masked by seg.
gawk '{if (substr($1,1,1)==">") \
   {if (NR!=1) printf mask/(tot+mask)"\n";printf substr($1,2)" ";tot=mask=0}\
   else {mask+=gsub(/[a-z]/,/0/); tot+=gsub(/[A-Z]/,/0/)}}\
   END{printf mask/(tot+mask) "\n";}' $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/seg/* \
   >  $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.seg.support_percent 
# This gawk line compute the number of aa masked by xnu.
FastaToTbl $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/xnu/* \
   | gawk '{print $1,gsub(/X/,/X/)/(length($2)-1)}' \
   >  $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.xnu.support_percent
# coverage on them for the hsp-rs
   $SGPBIN/supportexons \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/hsp-rs/chr22 nul nul \
       < $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/gff/chr22 \
     > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.e-support
    grep TBXMATCH $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.e-support \
      | gawk '{print $1, $9}' | sort | uniq -c | gawk '{print  $3,$1}' \
     > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.tbx-support
# coverage on them for the victoria 
   $SGPBIN/supportexons \
      $DATASETS/annotation/set/cds/chr22 \
      $DATASETS/annotation/set/exons/chr22 \
      $DATASETS/annotation/set/pseudo/chr22 \
       < $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/gff/chr22 \
     > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.e-VH_support
egrep "TBXMATCH|GNDMATCH|GNSMATCH" \
    $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.e-VH_support \
    | gawk '{print $9}' | sort | uniq - | join2 - \
    $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/tmp/bingo/sgp.novel 
# compute the percentage of coverage
    gawk '{min=0;max=0;for (i=10;i<NF && $i=="TBXMATCH";i+=4) {\
            max=(i==10) ? $12 : max;
            min=(i==10) ? $11 : min;
            min=($(i+1) < min) ?  $(i+1) : min ;
            max=($(i+2) > max) ?  $(i+2) : max }
          if (i==10)
             print $9,0,$5-$4+1; 
          else {if (min<$4) 
                   if (max<$5) cov=max-$4+1;
                   else cov=$5-$4+1;
               else if (max<$5) cov=max-min;
                   else  cov=$5-min+1;
               print $9, cov, $5-$4+1;}}' \
          $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.e-support | \
          gawk '{cov[$1]+=$2;len[$1]+=$3}\
                END{for (loc in len) print loc, cov[loc]/len[loc]}' \
      > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.tbx-support_percent
# join all the files toghether
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.tbx-support \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/gff/chr22.gene_list | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.tbx-support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.seg.support_percent \
       -   |
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/chr22.xnu.support_percent \
       -   | \
gawk 'BEGIN{ while (getline<ARGV[1]>0) {locus=$1;$1="";data[locus]=$0;}; \
        ARGV[1]="";} \
      { print $0 ,(data[$1]) ? data[$1] : 0  }' \
      $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/tmp/bingo/sgp.reject  \
      -  > $ANALYSIS/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/table.tbl
# $1= locus name
# $2= first gene  position
# $3= last gene position
# $4= strand
# $5= lenght nt
# $6= # exons
# $7= # supported exons (hsp)
# $8= %cov (hsp)
# $9= xnu masked %
# $10= seg masked %
# $11= 0=novel (sprot|ensembl_cdna|Hs_spliced_ESTs|nonHs_tx|refseq_human)=rejected 
# $12..$NF Other pankaj information about rejected genes

@

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Making plots for {\sgp} with {\gps}}

\subsctn{Preparing GFF files}

<<BASH commands ANALYSIS>>=
#
# MAKING PLOTS with GFF2PS
#
# There are no results for genscan/twinscan/slam
#
export CHR="chr22";
#
# Preparing annotaton and repeats
# gawk '$0!~/^#/ {$2="annotation";print $0}'\
#          $DATASETS/annotation/fixed/chr22 \
#        > $DATASETS/annotation/fixed/chr22.gff2ps ;
gawk '$0!~/^#/ {$2="annotation";print $0}' \
      $DATASETS/annotation/set/cds/chr22   \
      $DATASETS/annotation/set/exons/chr22 \
      $DATASETS/annotation/set/pseudo/chr22 | \
      sort +3n +4n -5 +2 -3 \
      > $DATASETS/annotation/set/gff2ps/chr22_annot.all ;
gawk 'BEGIN{ori=end=0}
      { if ($3=="CDS") {
          ori=$4; end=$5;
        };
        if ($3=="exon") {
          gsub(/\.mRNA$/,"",$9);
          if (!($4==ori && $5==end)) print $0;
        } else print $0;
      }' $DATASETS/annotation/set/gff2ps/chr22_annot.all \
       > $DATASETS/annotation/set/gff2ps/chr22_annot ;
#
gawk '$0!~/^#/ {$2=$3="evidence";print $0}'    \
      $DATASETS/annotation/set/evidences/chr22 \
    > $DATASETS/annotation/set/gff2ps/chr22_evid ;
#
gawk '{
    if ($9 in names) names[$9]++; 
    else names[$9]=1;
    gp = $9"-"names[$9];
    print $1,$2,$3,$4,$5,$6,$7,$8,gp;
    }' $DATASETS/masking/default/gff/chr22 \
     > $DATASETS/masking/default/gff/chr22.gff2ps ;
#
@ 

<<BASH commands ANALYSIS>>=
#
# Preparing geneid files
#IDIR="$ANALYSIS/geneid/Hsap.masked" ;
ODIR="$IDIR/ps/_tmp/geneid" ;
[ -e $ODIR ] || ChckDirs $ODIR ;
gawk 'BEGIN{OFS="\t"}
      $1!~/^#|^[ \t]*$/ {
          $2="geneid";
          print $0;
      }' $IDIR/gff/$CHR.geneid_v1.1 > $ODIR/$CHR ;
# IDIR="$ANALYSIS/geneid/Hsap.masked.evid" ;
#IDIR="$ANALYSIS/geneid/Hsap.masked.evid_VH" ;
IDIR="$ANALYSIS/geneid/Hsap.masked.gnid_fix.evid" 
ODIR="$IDIR/ps/_tmp/geneid" ;
[ -e $ODIR ] || ChckDirs $ODIR ;
gawk 'BEGIN{OFS="\t"}
      $1!~/^#|^[ \t]*$/ {
          $2="geneid";
          print $0;
      }' $IDIR/gff/$CHR > $ODIR/$CHR ;
#
@ 

<<BASH Functions: Preparing SGP Output>>=
#
# Preparing SGP files
set_feats_sgp ()
{
  # USAGE:  set_feats_sgp input_dir
  IDIR="$1";
  #
  # set tblastx GFF files from last SGP run
  ODIR="$IDIR/ps/_tmp/sr" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SR.3X"; $8="." };
          print $0;
          }' $IDIR/sr/$CHR > $ODIR/$CHR ;
  ODIR="$IDIR/ps/_tmp/sr-rs" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SR-RS.3X"; $8="." };
          print $0;
          }' $IDIR/hsp-rs/$CHR > $ODIR/$CHR ;
  #
  # set SGP GFF files from SGP run
  ODIR="$IDIR/ps/_tmp/sgp" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  gawk 'BEGIN{ OFS="\t" }
        { if ($1 !~ /^#|^[ \t]*$/) { $2="SGP.3X" };
          print $0;
          }' $IDIR/gff/$CHR > $ODIR/$CHR ;
}
#
@ 

<<BASH commands ANALYSIS>>=
#
set_feats_sgp $ANALYSIS/sgp/Hsap.masked ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.frame ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+ ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+.evid ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+.fix ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+.fix.evid ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+.fix.evid_VH ;
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix ; 
set_feats_sgp $ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid ;
#
@ 

<<BASH Functions: Predicted Genes Boundaries>>=
#
# Extracting list of coords for predicted genes
get_gene_boundaries ()
{
  # USAGE:  get_gene_boundaries input_dir
  IDIR="$1" ;
  ODIR="$IDIR/ps/_tmp" ;
  [ -e $ODIR ] || ChckDirs $ODIR ;
  
}
#
@ 

<<BASH commands ANALYSIS>>=
#
get_gene_boundaries $ANALYSIS/sgp/Hsap.masked.3X+.fix ;
get_gene_boundaries $ANALYSIS/sgp/Hsap.masked.3X+.fix.evid_VH ;
#
@

\subsctn{Making plots with {\gps}}

<<BASH Functions: Running GFF2PS>>=
#
run_GFF2PS ()
{
  # 
  # run_GFF2PS - Making plots with gff2ps (a4+a3+wide formats)
  #
  # USAGE: run_GFF2PS working_dir "GFF_files_list" custom_file_root [ps_tail]
  #
  # 'working_dir' where to save plots
  # "GFF_files_list" a list of GFF files (with full path) to be plotted
  #
  ODIR="$1/gff2ps" ;
  GFFfiles="$2" ;
  PARM="$BIN/param/gff2ps/$3" ;
  [ "$4" ] && XTR="$4" || XTR="";
  #
  ChckDirs $ODIR \
           $ODIR/a3      $ODIR/a4      $ODIR/wide \
           $ODIR/a3/logs $ODIR/a4/logs $ODIR/wide/logs ;
  #
  CHR="chr22" ;
  START="-S 13000000" ;
  #
  gff2ps -VC ${PARM}_wide.rc $START -- $GFFfiles \
          2>&1 > $ODIR/wide/${CHR}${XTR} | tee $ODIR/wide/logs/${CHR}${XTR} ;
#  gff2ps -VC ${PARM}_a4.rc   $START -- $GFFfiles \
#          2>&1 > $ODIR/a4/${CHR}${XTR}   | tee $ODIR/a4/logs/${CHR}${XTR}   ;
#  gff2ps -VC ${PARM}_a3.rc   $START -- $GFFfiles \
#          2>&1 > $ODIR/a3/${CHR}${XTR}   | tee $ODIR/a3/logs/${CHR}${XTR}   ;
}
#
@
 
<<BASH commands ANALYSIS>>=
#
# Running GFF2PS on CHR22 Hsap masked against Mmus WGS-3X
IDIR="$ANALYSIS/sgp/Hsap.masked/ps" ;
#
GFFIN="$ANALYSIS/geneid/Hsap.masked/ps/_tmp/geneid/chr22" ;    # geneid
GFFIN="$GFFIN $IDIR/_tmp/sgp/chr22" ;                          # sgp
GFFIN="$GFFIN $IDIR/_tmp/sr-rs/chr22" ;                        # sr-rs
GFFIN="$GFFIN $IDIR/_tmp/sr/chr22" ;                           # sr
GFFIN="$GFFIN $DATASETS/annotation/fixed/chr22.gff2ps" ;       # annotation
GFFIN="$GFFIN $DATASETS/masking/default/gff/chr22.gff2ps" ;    # repeats
#
run_GFF2PS $IDIR "$GFFIN" chr22_masked ;
#
#
# Running GFF2PS on CHR22 Hsap masked against Mmus WGS-3X
# (fixing frame when assembling tblastx HSPs from chr22 fragments)
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+/ps" ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix/ps" ;
#
GFFIN="$ANALYSIS/geneid/Hsap.masked/ps/_tmp/geneid/chr22" ;    # geneid
GFFIN="$GFFIN $IDIR/_tmp/sgp/chr22" ;                          # sgp
GFFIN="$GFFIN $IDIR/_tmp/sr-rs/chr22" ;                        # sr-rs
GFFIN="$GFFIN $IDIR/_tmp/sr/chr22" ;                           # sr
GFFIN="$GFFIN $DATASETS/annotation/fixed/chr22.gff2ps" ;       # annotation
GFFIN="$GFFIN $DATASETS/masking/default/gff/chr22.gff2ps" ;    # repeats
#
# run_GFF2PS $IDIR "$GFFIN" chr22_masked ; # no XTR
# run_GFF2PS $IDIR "$GFFIN" chr22_masked "_20010908" ;
# run_GFF2PS $IDIR "$GFFIN" chr22_masked "_20010910" ;
run_GFF2PS $IDIR "$GFFIN" chr22_masked "_20010910b" ;
#
#
# running without Repeats
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+/ps" ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix/ps" ;
#
GFFIN="$ANALYSIS/geneid/Hsap.masked/ps/_tmp/geneid/chr22" ;    # geneid
GFFIN="$GFFIN $IDIR/_tmp/sgp/chr22" ;                          # sgp
GFFIN="$GFFIN $IDIR/_tmp/sr-rs/chr22" ;                        # sr-rs
GFFIN="$GFFIN $IDIR/_tmp/sr/chr22" ;                           # sr
GFFIN="$GFFIN $DATASETS/annotation/fixed/chr22.gff2ps" ;       # annotation
# GFFIN="$GFFIN $DATASETS/masking/default/gff/chr22.gff2ps" ;    # repeats
#
# run_GFF2PS $IDIR "$GFFIN" chr22_masked "_noRPTs" ;
# run_GFF2PS $IDIR "$GFFIN" chr22_masked "_20010908_noRPTs" ;
run_GFF2PS $IDIR "$GFFIN" chr22_masked "_20010910_noRPTs" ;
#
#
# Running GFF2PS on CHR22 Hsap masked against Mmus WGS-3X + evidences
# (fixing frame when assembling tblastx HSPs from chr22 fragments)
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.evid/ps" ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.evid/ps" ;
#
# GFFIN="$ANALYSIS/geneid/Hsap.masked.evid/ps/_tmp/geneid/chr22";# geneid+evid
# GFFIN="$GFFIN $IDIR/_tmp/sgp/chr22" ;                          # \sgp+evid_/
GFFIN="$IDIR/_tmp/sgp/chr22" ;                                   # sgp + evid
GFFIN="$GFFIN $IDIR/_tmp/sr-rs/chr22" ;                          # sr-rs
# GFFIN="$GFFIN $IDIR/_tmp/sr/chr22" ;                           # sr
GFFIN="$GFFIN $DATASETS/annotation/fixed/chr22.gff2ps" ;         # annotation
# GFFIN="$GFFIN $DATASETS/masking/default/gff/chr22.gff2ps" ;    # repeats
#
# run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_evid" ;
# run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_evid_new" ; # after changing custom files
# run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_20010908_evid" ;
run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_20010910_evid" ;
#
#
# Running GFF2PS on CHR22 Hsap masked against Mmus WGS-3X + annotation + evidences (VH)
# IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.evid_VH/ps" ;
IDIR="$ANALYSIS/sgp/Hsap.masked.3X+.fix.gnid_fix.evid/ps" ; 
#
GFFIN="$ANALYSIS/geneid/Hsap.masked.evid_VH/ps/_tmp/geneid/chr22" ; # geneid + evid
GFFIN="$GFFIN $IDIR/_tmp/sgp/chr22" ;                              # sgp + evid
GFFIN="$GFFIN $IDIR/_tmp/sr-rs/chr22" ;                            # sr-rs
GFFIN="$GFFIN $DATASETS/annotation/set/gff2ps/chr22_annot" ;       # annotation
GFFIN="$GFFIN $DATASETS/annotation/set/gff2ps/chr22_evid" ;        # evidences
#
# run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_20010914_noRPT" ;
# run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_20010914_noRPT_geneid+sgp" ;
run_GFF2PS $IDIR "$GFFIN" chr22_masked_evid "_20010927_noRPT_geneid+sgp" ;
#
@ 

\subsctn{Customization files for {\gps}}

\subsubsctn{LAYOUT SETTINGS}

<<Common Layout Settings>>=
zoom=*..*
# major_tickmarks_num=10
# minor_tickmarks_num=10
major_tickmarks_nucleotides=5000
minor_tickmarks_nucleotides=500
nucleotide_scale=kb
#
left_source_label_width=2.5cm
show_blocks_top-bottom=on
#
group_label_scale=2.25
#
@

<<Settings for a3 paper size>>=
page_size=a3
page_orientation=Landscape
# page_number=1
blocks_x_page=4
nucleotides_x_line=50000
#
@ 

<<Settings for a3 paper size (evid)>>=
page_size=a3
page_orientation=Landscape
# page_number=1
blocks_x_page=10
nucleotides_x_line=50000
#
@ 

<<Settings for a4 paper size>>=
page_size=a4
page_orientation=Landscape
# page_number=1
blocks_x_page=3
nucleotides_x_line=50000
#
@ 

<<Settings for a4 paper size (evid)>>=
page_size=a4
page_orientation=Landscape
# page_number=1
blocks_x_page=6
nucleotides_x_line=50000
#
@ 

<<Settings for wide display>>=
page_bbox=wide,16000,800 # 564.37 x 28.22 cm
page_orientation=Portrait
# page_number=1
blocks_x_page=4
nucleotides_x_line=250000
#
@ 

<<Common Layout Settings for wide display>>=
zoom=*..*
# major_tickmarks_num=10
# minor_tickmarks_num=10
major_tickmarks_nucleotides=5000
minor_tickmarks_nucleotides=500
nucleotide_scale=kb
#
left_source_label_width=2.5cm
show_blocks_top-bottom=on
#
group_label_scale=2.25
#
@

<<Settings for wide display (evid)>>=
page_bbox=wide,16000,800 # 564.37 x 28.22 cm
page_orientation=Portrait
# page_number=1
blocks_x_page=5
nucleotides_x_line=200000
#
@ 

<<Common Layout Settings for wide display (evid)>>=
zoom=*..*
# major_tickmarks_num=10
# minor_tickmarks_num=10
major_tickmarks_nucleotides=2500
minor_tickmarks_nucleotides=250
nucleotide_scale=kb
#
show_inner_scale=none
#
left_source_label_width=2.5cm
show_blocks_top-bottom=on
#
group_label_scale=2.25
#
@

\subsubsctn{FEATURES SETTINGS}

<<Common Features Settings>>=
*::fill_shape_mode=1_color
gene::shape=none
cds::layer=1
cds::feature_color=darkgreen
exon::feature_color=verylightgreen
exon_pseudo::feature_color=lightblue
@

<<HIDE: BASH commands>>=
gawk '{print $3}' $DATASETS/masking/default/gff/chr22 | \
    sort | uniq -c | sort -nr | prtcode 
@ 

<<Repeats Features Settings>>=
sine/alu::feature_color=verydarkgreen
sine/mir::feature_color=verydarkbrown
line/l1::feature_color=lightred
line/l2::feature_color=verydarkred
ltr/erv1::feature_color=verydarkblue
simple_repeat::feature_color=verydarkorange
low_complexity::feature_color=verydarkyellow
#
@

\subsubsctn{GROUPS SETTINGS}

<<Common Group Settings>>=
*::group_line=none
*::group_shape=thick_line
@

\subsubsctn{SOURCES SETTINGS}

<<Common Source Settings>>=
*::unfold_grouped_ungrouped=off
*::unfold_ungrouped_line=off
*::unfold_grouped_line=off
*::range=none
*::source_line_color=black
*::source_line=long_dotted
#
@

<<Common Source Settings for wide display>>=
*::unfold_grouped_ungrouped=off
*::unfold_ungrouped_line=off
*::unfold_grouped_line=off
*::range=none
# *::source_line_color=black
*::source_line=none
#
@
 
<<annotation source settings>>=
# annotation::feature_color=darkgreen
annotation::group_color=verydarkgreen
annotation::left_label=SANGER
annotation::track_spacing_scale=0
@ 

<<annotation source settings (evid)>>=
# annotation::vert_align=bottom
# annotation::feature_color=darkgreen
annotation::group_color=verydarkgreen
annotation::left_label=SANGER
annotation::track_spacing_scale=0
@ 

<<evidence source settings>>=
evidence::source_line_color=black
evidence::source_line=dotted
evidence::left_label=++none++
evidence::vert_align=top
evidence::track_scale=0.5
@ 

<<evidence source settings (evid)>>=
evidence::source_line_color=black
evidence::source_line=dotted
evidence::left_label=++none++
evidence::vert_align=bottom
evidence::track_scale=0.25
evidence::track_spacing_scale=0
@ 

<<sgp source settings>>=
SGP.3X::feature_color=lightred
SGP.3X::group_color=red
SGP.3X::left_label=SGP 3X
SGP.homol::feature_color=red
SGP.homol::group_color=darkred
SGP.homol::left_label=SGP
@ 

<<geneid source settings>>=
geneid::feature_color=lightviolet
geneid::group_color=darkviolet
geneid::left_label=GENEID v1.1
@ 

<<twinscan source settings>>=
Twinscan-1.0::feature_color=verylightbrown
Twinscan-1.0::group_color=brown
Twinscan-1.0::left_label=TWINSCAN
@ 

<<genscan source settings>>=
genscan::feature_color=blue
genscan::group_color=verydarkblue
genscan::left_label=GENSCAN
@ 

<<tblastx source settings>>=
SR.3X::feature_color=red
SR.3X::group_color=verydarkred
SR.3X::left_label=SRs 3X
SR-RS.3X::feature_color=orange
SR-RS.3X::group_color=verydarkred
SR-RS.3X::left_label=SR-RSs 3X
@ 

<<repeatmasker source settings>>=
# RepeatMasker::feature_color=####
# RepeatMasker::group_color=####
RepeatMasker::left_label=REPEATS
@ 

<<orimasked source settings>>=
# masked::feature_color=####
# masked::group_color=####
masked::left_label=MASKED
@ 

\subsubsctn{Assembling CUSTOM FILES: {\sgp} + Homology}

<<GFF2PS customization: chr22 masked a4>>=
##########################################
##   CUSTOM FILE FOR GFF2PS - A4 PAGE   ##
##########################################
#
# chr22_masked_a4.rc
#
<<Version Control Id Tag>>
#
# L ######PAGE LAYOUT & PROGRAM OPTIONS######
#
<<Settings for a4 paper size>>
<<Common Layout Settings>>
#
# F ############GENOMIC FEATURES############
#
<<Common Features Settings>>
<<Repeats Features Settings>>
#
# G ############GROUP FEATURES##############
#
<<Common Group Settings>>
#
# S ############SOURCE FEATURES#############
#
<<Common Source Settings>>
<<annotation source settings>>
<<evidence source settings>>
<<sgp source settings>>
<<geneid source settings>>
<<twinscan source settings>>
<<genscan source settings>>
<<tblastx source settings>>
<<repeatmasker source settings>>
@ 

<<GFF2PS customization: chr22 masked a3>>=
##########################################
##   CUSTOM FILE FOR GFF2PS - A3 PAGE   ##
##########################################
#
# chr22_masked_a3.rc
#
<<Version Control Id Tag>>
#
# L ######PAGE LAYOUT & PROGRAM OPTIONS######
#
<<Settings for a3 paper size>>
<<Common Layout Settings>>
#
# F ############GENOMIC FEATURES############
#
<<Common Features Settings>>
<<Repeats Features Settings>>
#
# G ############GROUP FEATURES##############
#
<<Common Group Settings>>
#
# S ############SOURCE FEATURES#############
#
<<Common Source Settings>>
<<annotation source settings>>
<<evidence source settings>>
<<sgp source settings>>
<<geneid source settings>>
<<twinscan source settings>>
<<genscan source settings>>
<<tblastx source settings>>
<<repeatmasker source settings>>
@ 

<<GFF2PS customization: chr22 masked wide>>=
############################################
##   CUSTOM FILE FOR GFF2PS - WIDE PAGE   ##
############################################
#
# chr22_masked_wide.rc
#
<<Version Control Id Tag>>
#
# L ######PAGE LAYOUT & PROGRAM OPTIONS######
#
<<Settings for wide display>>
<<Common Layout Settings for wide display>>
#
# F ############GENOMIC FEATURES############
#
<<Common Features Settings>>
<<Repeats Features Settings>>
#
# G ############GROUP FEATURES##############
#
<<Common Group Settings>>
#
# S ############SOURCE FEATURES#############
#
<<Common Source Settings for wide display>>
<<annotation source settings>>
<<evidence source settings>>
<<sgp source settings>>
<<geneid source settings>>
<<twinscan source settings>>
<<genscan source settings>>
<<tblastx source settings>>
<<repeatmasker source settings>>
@ 

\subsubsctn{Assembling CUSTOM FILES: {\sgp} + Homology + Evidences}

<<GFF2PS customization: chr22 masked a4 (evid)>>=
##########################################
##   CUSTOM FILE FOR GFF2PS - A4 PAGE   ##
##########################################
#
# chr22_masked_evid_a4.rc
#
<<Version Control Id Tag>>
#
# L ######PAGE LAYOUT & PROGRAM OPTIONS######
#
<<Settings for a4 paper size (evid)>>
<<Common Layout Settings>>
#
# F ############GENOMIC FEATURES############
#
<<Common Features Settings>>
<<Repeats Features Settings>>
#
# G ############GROUP FEATURES##############
#
<<Common Group Settings>>
#
# S ############SOURCE FEATURES#############
#
<<Common Source Settings>>
<<annotation source settings (evid)>>
<<evidence source settings (evid)>>
<<sgp source settings>>
<<geneid source settings>>
<<twinscan source settings>>
<<genscan source settings>>
<<tblastx source settings>>
@ 

<<GFF2PS customization: chr22 masked a3 (evid)>>=
##########################################
##   CUSTOM FILE FOR GFF2PS - A3 PAGE   ##
##########################################
#
# chr22_masked_evid_a3.rc
#
<<Version Control Id Tag>>
#
# L ######PAGE LAYOUT & PROGRAM OPTIONS######
#
<<Settings for a3 paper size (evid)>>
<<Common Layout Settings>>
#
# F ############GENOMIC FEATURES############
#
<<Common Features Settings>>
<<Repeats Features Settings>>
#
# G ############GROUP FEATURES##############
#
<<Common Group Settings>>
#
# S ############SOURCE FEATURES#############
#
<<Common Source Settings>>
<<annotation source settings (evid)>>
<<evidence source settings (evid)>>
<<sgp source settings>>
<<geneid source settings>>
<<twinscan source settings>>
<<genscan source settings>>
<<tblastx source settings>>
@ 

<<GFF2PS customization: chr22 masked wide (evid)>>=
############################################
##   CUSTOM FILE FOR GFF2PS - WIDE PAGE   ##
############################################
#
# chr22_masked_evid_wide.rc
#
<<Version Control Id Tag>>
#
# L ######PAGE LAYOUT & PROGRAM OPTIONS######
#
<<Settings for wide display (evid)>>
<<Common Layout Settings for wide display (evid)>>
#
# F ############GENOMIC FEATURES############
#
<<Common Features Settings>>
<<Repeats Features Settings>>
#
# G ############GROUP FEATURES##############
#
<<Common Group Settings>>
#
# S ############SOURCE FEATURES#############
#
<<Common Source Settings for wide display>>
<<annotation source settings (evid)>>
<<evidence source settings (evid)>>
<<sgp source settings>>
<<geneid source settings>>
<<twinscan source settings>>
<<genscan source settings>>
<<tblastx source settings>>
@ 


\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Preparing files for the web}

\begin{comment}
IDIR="/projects/sgp/chr22" ;
ODIR="/usr/local/apache/htdocs/datasets/humanmouse/HsapCHROMOSOMES" ;
\end{comment}
<<BASH commands>>=
#
# EXP="sgp_chr22_3X" ;
# EXP="sgp_chr22_3X+" ;
EXP="sgp_chr22_3X+_VH" ;
# TBXP="tbx-chr22" ;
TBXP="tbx_chr22_3X+" ;
#
# tblastx results
cp /projects/datasets/chr22/_tmp/Pankaj/tars/tbx.tar.gz      $ODIR/Hsap_chr22.tbx.tar.gz ;
cp $IDIR/blast/wublast.tblastx/$TBXP/chr22.hsp $ODIR/Hsap_chr22.hsp ;
cp $IDIR/blast/wublast.tblastx/$TBXP/chr22.sr  $ODIR/Hsap_chr22.sr ;
gzip $ODIR/Hsap_chr22.hsp $ODIR/Hsap_chr22.sr ;
#
# sgp results
cp $IDIR/sgp/$EXP/chr22_geneid.gff   $ODIR/Hsap_chr22_geneid.gff ;
cp $IDIR/sgp/$EXP/chr22_geneid.gtf2  $ODIR/Hsap_chr22_geneid.gtf ;
cp $IDIR/sgp/$EXP/chr22_all.gff      $ODIR/Hsap_chr22_homol.gff ;
cp $IDIR/sgp/$EXP/chr22_all.gtf2     $ODIR/Hsap_chr22_homol.gtf ;
cp $IDIR/sgp/$EXP/chr22_evid.gff     $ODIR/Hsap_chr22_evid.gff ;
cp $IDIR/sgp/$EXP/chr22_evid.gtf2    $ODIR/Hsap_chr22_evid.gtf ;
#
@ 

\sctn{Preparing GFF files for apolo}

We merge few ENSEMBL tracks to our gene-prediction into a single GFF file properly formated for APOLLO viewer. Thanks to Steve Searle (\url|searle@sanger.ac.uk|), we can donwload the whole ENSEMBL data for a given chromosome with a single call:

\url|http://www.ensembl.org/perl/apolloview?chr=22&vc_start=13000000&vc_end=48000000|

<<APOLLO>>=
pushd /projects/sgp/chr22/apollo/ori ;
perl -we ' ##
  use LWP::UserAgent;
  use HTTP::Request;
  use HTTP::Response;
  use URI::Heuristic;
  my ($chr,$min,$max,$step) = @ARGV;
  @ARGV = ();
  my $url = URI::Heuristic::uf_urlstr("www.ensembl.org/perl/apolloview?chr=");
  my $ua = LWP::UserAgent->new();
  $ua->agent("perl-script");
  for (my $k = $min; $k < $max; $k += $step) {
      my ($req,$response,$content,$nwurl,$j,$file);
      $j = $k + $step; 
      $nwurl = $url.$chr."\&vc_start=".$k."000000\&vc_end=".$j."000000";
      print STDERR "# Downloading data from $nwurl\n";
      $file = "./chr${chr}_${k}_${j}.gff";
      open(HTMLOUT,"> $file") ||
          die("### Cannot open file: $file $!");
      $req = HTTP::Request->new(GET => $nwurl);
      $req->referer("http://www1.imim.es");
      $response = $ua->request($req);
      # print STDERR "#... ".$response->title()."\n";
      $content = $response->content();
      print HTMLOUT $content;
      print STDERR "#...... ".(length $content)."\n";
      close(HTMLOUT);
  }; # for
  '  22  10 50 5   2>&1 | tee download_chr22.log ; 
@ 

<<APOLLO>>=
BASE="/projects/sgp/chr22/apollo" ;
# what to do when loading 5mbp Ensembl fragments using Apollo
cat $BASE/ori/chr22_10_15.gff $BASE/ori/chr22_15_20.gff \
    $BASE/ori/chr22_20_25.gff $BASE/ori/chr22_25_30.gff \
    $BASE/ori/chr22_30_35.gff $BASE/ori/chr22_35_40.gff \
    $BASE/ori/chr22_40_45.gff $BASE/ori/chr22_45_50.gff > $BASE/chr22.gff ;
#
gawk '{print $2,$3}' $BASE/chr22.gff | sort | uniq -c | sort -nr ;
#   93781 sptr similarity
#   81240 embl_vertrna similarity
#   65423 RepeatMasker similarity
#   52896 unigene.seq similarity
#   22062 est similarity
#   21054 Variation Variation
#   14662 trace similarity
#    6735 genscan exon
#    2114 hugo exon
#    1944 embl exon
#    1432 sptrembl exon
#     724 ensembl exon
#     533 sequence similarity
#     333 epcr exon
#     216 cpg similarity
#       8 RANGE: Chr
#
grep "genscan" $BASE/chr22.gff | sort +3n -5 +8n | \
    gawk 'BEGIN{OFS="\t";gp=last=1}
          { if (last!=$9) { gp++; last=$9; };
            $9=gp; print $0;
            }' - > $BASE/chr22_genscan.gff ;
grep "est" $BASE/chr22.gff | sort +3n -5 > $BASE/chr22_est.gff ;
gawk 'BEGIN{OFS="\t";gp=last=1}
      $2 ~ /^(hugo|embl|ensembl|sptrembl|epcr)$/ {
        print $0;
      }' $BASE/chr22.gff | \
         sort +3n -5 > $BASE/chr22_annot.gff ;
#
gawk 'BEGIN{OFS="\t";gp=last=1}
      $1 !~ /^\#|^[ \t]*$/ {
        $1=$9; gsub("ENST","ENSG",$1); 
        $2="annotation"; $3="exon"; $6=1; print $0;
        }' /projects/datasets/chr22/annotation/set/cds/chr22 \
        > $BASE/chr22_local-annot.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $1=++cnt;            # $1="static0";
        $3="hsp-sr"; $8="."; # $9="__NONE__";
        print $0;
        }' /projects/sgp/chr22/sgp/Hsap.masked.3X+/hsp-rs/chr22 \
        > $BASE/chr22_hsp-sr.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="geneid-raw"; $3="exon";
        # split($9,n,"_"); $9=n[2]; # needed for chr21
        print $0;
        }' /projects/sgp/chr22/geneid/Hsap.raw/gff/chr22 \
        > $BASE/chr22_geneid_raw.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="geneid-masked"; $3="exon";
        # split($9,n,"_"); $9=n[2]; # needed for chr21
        print $0;
        }' /projects/sgp/chr22/geneid/Hsap.masked.gnid_fix/gff/chr22 \
        > $BASE/chr22_geneid_masked.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="sgp-raw"; $3="exon";
        # split($9,n,"_"); $9=n[2]; # needed for chr21
        print $0;
        }' /projects/sgp/chr22/sgp/Hsap.raw.3X+.fix.gnid_fix/gff/chr22 \
        > $BASE/chr22_sgp_raw.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="sgp-masked"; $3="exon";
        # split($9,n,"_"); $9=n[2]; # needed for chr21
        print $0;
        }' /projects/sgp/chr22/sgp/Hsap.masked.3X+/gff/chr22 \
        > $BASE/chr22_sgp_masked.gff ;
gawk 'BEGIN{OFS="\t"}
      $1 !~ /^\#|^[ \t]*$/ {
        $2="sgp"; $3="exon";
        # split($9,n,"_"); $9=n[2]; # needed for chr21
        print $0;
        }' /projects/sgp/chr22/sgp/Hsap.raw.3X+.fix.gnid_fix.ew-2+2/gff/chr22 \
        > $BASE/chr22_sgp_ew.gff ;
#
cat $BASE/chr22_est.gff $BASE/chr22_genscan.gff \
    $BASE/chr22_geneid_masked.gff $BASE/chr22_geneid_raw.gff \
    $BASE/chr22_sgp_ew.gff $BASE/chr22_sgp_masked.gff $BASE/chr22_sgp_raw.gff \
    $BASE/chr22_hsp-sr.gff $BASE/chr22_local-annot.gff $BASE/chr22_annot.gff \
    > $BASE/all_chr22.gff ;
@ 

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\appendix %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Related Tables and Plots}

\subsctn{Annotated Human Genes for Homologous Sequences Set}

<<HIDE: BASH commands>>=
gawk 'BEGIN{ 
        lncnt=0;
        ROWS=47;
        header="\\begin{tabular}[t]{|lrrc|}\n\\hline\n";
        header=header"\\lb{1.5cm}{l}{GENE} & ";
        header=header"\\lb{1cm}{r}{START} & \\lb{1cm}{r}{END} & ";
        header=header"\\lb{0.5cm}{c}{STR} \\\\";
        print "\\newcommand{\\lb}[3]{\\makebox[#1][#2]{#3}}\n";
        print "\\begin{tabular}{c@{\\quad}c@{\\quad}c@{\\quad}c}"; # main table
        print header;
        }
      { split($1,n,"_");
        corr="";
        if ( lncnt%ROWS == 0 && lncnt > 0 ) {
          print "\\hline\n\\end{tabular}\n &";
          print header;
          n[2]="\\raisebox{-2.25ex}{\\shortstack{" n[2] "\\\\(\\textit{cont.})}}";
          corr="[-1.75ex]";
          } 
        if ( cnt[n[2]] && n[2] !~ /\{cont\.\}/ ) {
          n[2]=""; 
          } 
        else { 
          printf "\\hline\n"; 
          cnt[n[2]]++;
          }
        printf "%8s & %-10s & %8s & %8s & %s \\\\%s\n", n[2],$2,$3,$4,$5,corr;
        lncnt++;
        }
      END{ 
        print "\\hline\n\\end{tabular}\n\\\\";
        print "\\end{tabular}"; # main table
        }' $DATASETS/genes.Hsap > $DOCS/tables/genelist.tex ;
@ 
%$

\begin{table}[!h]
\hspace{-0.5cm}
\fbox{
\rotatebox{90}{
\begin{minipage}[c][17.5cm][c]{22.5cm}
\begin{center}
\begin{scriptsize}
% \input ./tables/genelist.tex
\end{scriptsize}
\caption[Annotated genes for the human chromosome 22]{\label{tbl:genelist} Annotated genes for the human chromosome 22 in the {\data}.}\vskip 1ex
\end{center}
\end{minipage}
}}
\end{table}

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Main [[README]] files}

Here we provide the basic skeleton for the [[README]] files we will generate on each main directories for the current dataset.

<<DATASETS README>>=
#
#                 PREPARING DATASETS FOR
<<README common>>
<<BASH commands DATASETS>>
@ 

<<SGP README>>=
#
#               RUNNING GENE-PREDICTION FOR
<<README common>>
<<BASH commands ANALYSIS>>
@ 

<<SPLICING README>>=
#
#                  SPLICING ANALYSIS ON
<<README common>>
<<BASH commands SPLICING>>
@ 

<<README common>>=
#           8 ORTHOLOGOUS HUMAN/MOUSE SEQUENCES
#
# This README file was tangled from ORTHOLOGOUS_dataset.nw
#
<<Version Control Id Tag>>
#
################################################################################
#
### EXPORTING GLOBAL VARS
<<BASH Environment Variables>>
#
################################################################################
#
### DEFINING BASIC SHELL FUNCTIONS 
<<BASH Functions Block>>
#
################################################################################
@ 

<<tangling - READMEs>>=
#
notangle -R"DATASETS README" $WORK/$nwfile.nw | \
    cpif $DATASETS/README ;
notangle -R"SGP README" $WORK/$nwfile.nw | \
    cpif $ANALYSIS/README ;
# notangle -R"SPLICING README" $WORK/$nwfile.nw | \
#     cpif $SPLICING/README ;
#
@

% \newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Programs not included in this document}

The \sgp used in this approach uses different scrips and programs. When we started it was still not well controled. Therefore we decided to copy the binary files from [[~rguigo/research/humus/SGP2-2/sggp2/bin]] to [[/projects/sgp/bin/SGP2-2/]]. The copied files were the following:

\begin{center}
\begin{tabular}{l}
geneid          \\
blast2gff       \\
blast2hsp       \\
human3iso.param \\
\end{tabular}
\end{center}

The path variable in the sggp2 shell script has been changed to [[/projects/sgp/bin/SGP2-2/]].

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\sctn{Scripts Central}

\subsctn{[[fasta_renamer.pl]]: renaming and reformating fasta files}

<<Renaming fasta sequence IDs>>=
<<PERL shebang>>
#
# fasta_renamer.pl infile descfile new_seq_id > outfile
#
#     Replacing sequence name 
#     for single sequence fasta files
#     and reformating sequence to 80 cols.
#
use lib qw( /usr/lib/perl5/site_perl/5.005/ /usr/lib/perl5/5.00503/ ) ;
use Bio::Seq;
use Bio::SeqIO;

my ($infile,$descfile,$newid) = @ARGV;

my $seqin  = Bio::SeqIO->new(-format => 'FASTA', -file => "$infile");
my $seqout = Bio::SeqIO->new(-format => 'FASTA', -fh => \*STDOUT);

open(DESC,"> $descfile");
while (my $sequence = $seqin->next_seq()) {
    my ($sid,$len,$seq,$desc);
    print STDERR "### READING FASTA... $newid\n";
    $sid  = $sequence->display_id();
    $desc = $sequence->desc();
    $len  = $sequence->length();
    $seq  = $sequence->seq();
    $sid =~ s/\s+/\_/og;
    $seq =~ tr/[a-z]/[A-Z]/;
    print STDERR "### WRITING FASTA... $newid\n";
    print DESC "$newid $sid $len $desc\n";
    $sequence->display_id($newid);
    $sequence->desc('');
    $sequence->seq($seq);
    $seqout->write_seq($sequence);
}; # while 
close(DESC);
exit(0);
@

\newpage

\sctn{Common code blocks}

\subsctn{PERL scripts}

<<PERL shebang>>=
#!/usr/bin/perl -w
# This is perl, version 5.005_03 built for i386-linux
<<Version Control Id Tag>>
#
use strict;
@

<<Global Constants - Boolean>>=
my ($T,$F) = (1,0); # for 'T'rue and 'F'alse
@ %def $T $F

We also set here the date when the script is running and who is the user running it.

<<Global Vars - User and Date>>=
my $DATE = localtime;
my $USER = $ENV{USER};
@ %def $DATE $USER


\subsubsctn{Timing our scripts}

The '[[Benchmark]]' module encapsulates a number of routines to help to figure out how long it takes to execute a piece of code and the whole script.

<<Use Modules - Benchmark>>=
use Benchmark;
  <<Timer ON>>
@ 

See '[[man Benchmark]]' for further info about this package. 
We set an array to keep record of timing for each section.

<<Timer ON>>=
my @Timer = (new Benchmark);
@ 

<<Common PERL subs - Benchmark>>=
sub timing() {
    push @Timer, (new Benchmark);
    # partial time 
    $_[0] || 
        (return timestr(timediff($Timer[$#Timer],$Timer[($#Timer - 1)])));
    # total time
    return timestr(timediff($Timer[$#Timer],$Timer[0]));
} # timing
@ 


\subsubsctn{Printing complex Data Structures}

With '[[Data::Dumper]]' we are able to pretty print complex data structures for debugging them.


<<Use Modules - Dumper>>=
use Data::Dumper;
local $Data::Dumper::Purity = 0;
local $Data::Dumper::Deepcopy = 1;
@ 


\subsubsctn{Common functions}

<<Skip comments and empty records>>=
next if /^\#/o;
next if /^\s*$/o;
chomp;
@

<<Common PERL subs - Min Max>>=
#
sub max() {
    my $z = shift @_;
    foreach my $l (@_) { $z = $l if $l > $z };
    return $z;
} # max
sub min() {
    my $z = shift @_;
    foreach my $l (@_) { $z = $l if $l < $z };
    return $z;
} # min
@

<<Common PERL subs - Text fill>>=
#
sub fill_right() { $_[0].($_[2] x ($_[1] - length($_[0]))) }
sub fill_left()  { ($_[2] x ($_[1] - length($_[0]))).$_[0] }
sub fill_mid()   { 
    my $l = length($_[0]);
    my $k = int(($_[1] - $l)/2);
    ($_[2] x $k).$_[0].($_[2] x ($_[1] - ($l+$k)));
} # fill_mid
@

These functions are used to report to STDERR a single char for each record processed (useful for reporting parsed records).

<<Common PERL subs - Counter>>=
#
sub counter { # $_[0]~current_pos++ $_[1]~char
    print STDERR "$_[1]";
    (($_[0] % 50) == 0) && (print STDERR "[".&fill_left($_[0],6,"0")."]\n");
} # counter
#
sub counter_end { # $_[0]~current_pos   $_[1]~char
    (($_[0] % 50) != 0) && (print STDERR "[".&fill_left($_[0],6,"0")."]\n");
} # counter_end
@

<<Global Vars - Counter>>=
my ($n,$c); # counter and char (for &counter function)
@ %def $n $c


\subsubsctn{Common functions for reporting program processes}
\label{sec:messagerpt}

Function '[[report]]' requires that a hash variable '[[%MessageList]]' has been set, such hash contains the strings for each report message we will need. The first parameter for '[[report]]' is a key for that hash, in order to retrieve the message string, the other parameters passed are processed by the [[sprintf]] function on that string.

<<Common PERL subs - STDERR>>=
sub report() { print STDERR sprintf($MessageList{ shift @_ },@_) }
@

The same happens to '[[warn]]' function which also requires a hash variable '[[%ErrorList]]' containing the error messages.

<<Common PERL subs - STDERR>>=
sub warn() { print STDERR sprintf($ErrorList{ shift @_ }, @_) }
@

\subsctn{{\biop} modules}

\def\bioseq{\htmladdnormallinkfoot{[[Bio::Seq]]}{http://bioperl.org/Core/POD/Bio/Seq.html}}
\def\bioseqIO{\htmladdnormallinkfoot{[[Bio::SeqIO]]}{http://bioperl.org/Core/POD/Bio/SeqIO.html}}

{\bioseq} is the {\biop} main sequence object while {\bioseqIO} is the {\bp} support for sequence input/output into files.

<<Use Modules - Bio::Seq>>=
use Bio::Seq;
use Bio::SeqIO;
@


\subsctn{AWK scripts}

<<GAWK shebang>>=
#!/usr/bin/gawk -f
# GNU Awk 3.0.4
<<Version Control Id Tag>>
@

\subsctn{BASH scripts}

<<BASH shebang>>=
#!/usr/bin/bash
# GNU bash, version 2.03.6(1)-release (i386-redhat-linux-gnu)
<<Version Control Id Tag>>
#
SECONDS=0 # Reset Timing
# Which script are we running...
L="####################"
{ echo "$L$L$L$L";
  echo "### RUNNING [$0]";
  echo "### Current date:`date`";
  echo "###"; } 1>&2;
@

<<BASH script end>>=
{ echo "###"; echo "### Execution time for [$0] : $SECONDS secs";
  echo "$L$L$L$L";
  echo ""; } 1>&2;
#
exit 0
@

\subsctn{Version control tags}

This document is under Revision Control System (RCS). The version you are currently reading is the following:

<<Version Control Id Tag>>=
# $Id: Human_Chromosome_22.nw,v 0.9 2001-10-24 11:05:59 gparra Exp $
@ 

\newpage

\sctn{Extracting code blocks from this document}

From this file we can obtain both the code and the
documentation. The following instructions are needed:

\subsctn{Extracts Script code chunks from the [[noweb]] file} % \\[-0.5ex]

Remember when tangling that '-L' option allows you to include program line-numbering relative to original [[noweb]] file. Then the first line of the executable files is a comment, not a shebang, and must be removed to make scripts runnable.

<<tangling>>=
# PBS
notangle -R"PBS tblastx shell" $WORK/$nwfile.nw | \
    cpif /home/ug/jabril/no_backup/PBS/PBS.sh ;
chmod a+x /home/ug/jabril/no_backup/PBS/PBS.sh ;
# showing line numbering comments in program (DEVEL VERSIONS)
notangle -L -R"Renaming fasta sequence IDs" $WORK/$nwfile.nw | \
    perl -ne '$.>1 && print' | cpif $BIN/fasta_renamer.pl ;
# making them runnable
chmod a+x $BIN/fasta_renamer.pl ;
#
@ 

\subsctn{Extracting different Config Files} % \\[-0.5ex]

<<tangling>>=
#
ChckDirs $PARAM/gff2ps $PARAM/gff2aplot ;
# GENEID SGP SRs HSPs ANNOTATED REPEATS -> SGP homology
notangle -R"GFF2PS customization: chr22 masked a4" $WORK/$nwfile.nw | \
         cpif $PARAM/gff2ps/chr22_masked_a4.rc ;
notangle -R"GFF2PS customization: chr22 masked a3" $WORK/$nwfile.nw | \
         cpif $PARAM/gff2ps/chr22_masked_a3.rc ;
notangle -R"GFF2PS customization: chr22 masked wide" $WORK/$nwfile.nw | \
         cpif $PARAM/gff2ps/chr22_masked_wide.rc ;
# GENEID SGP SRs HSPs ANNOTATED -> SGP homology + evidences
notangle -R"GFF2PS customization: chr22 masked a4 (evid)" $WORK/$nwfile.nw | \
         cpif $PARAM/gff2ps/chr22_masked_evid_a4.rc ;
notangle -R"GFF2PS customization: chr22 masked a3 (evid)" $WORK/$nwfile.nw | \
         cpif $PARAM/gff2ps/chr22_masked_evid_a3.rc ;
notangle -R"GFF2PS customization: chr22 masked wide (evid)" $WORK/$nwfile.nw | \
         cpif $PARAM/gff2ps/chr22_masked_evid_wide.rc ;
#
@ %$

\subsctn{Extracting documentation and \LaTeX{}'ing it} % \\[-0.5ex] %'

<<tangling>>=
#
notangle -Rweaving  $WORK/$nwfile.nw | cpif $WORK/nw2tex ;
notangle -RLaTeXing $WORK/$nwfile.nw | cpif $WORK/ltx ;
chmod a+x $WORK/nw2tex $WORK/ltx;
#
@ 

<<weaving>>=
<<BASH shebang>>
# weaving and LaTeXing
<<BASH Environment Variables>>
<<BASH Gene Prediction Stats>>
#
echo "### WEAVING LaTeX MAIN DOCUMENT..." ;
noweave -v -t4 -delay -x -filter 'elide "HIDE: *"' \
        $WORK/$nwfile.nw | cpif $DOCS/$nwfile.tex ;
#
echo "### LaTeXING MAIN DOCUMENT..." ;
pushd $DOCS/ ;
latex $nwfile.tex ;
dvips $nwfile.dvi -o $nwfile.ps -t a4 ;
popd;
#
<<BASH script end>>
@ 

<<LaTeXing>>=
<<BASH shebang>>
# only LaTeXing
<<BASH Environment Variables>>
#
echo "### LaTeXING MAIN DOCUMENT..." ;
pushd $DOCS/ ;
latex $nwfile.tex ; 
latex $nwfile.tex ; 
latex $nwfile.tex ;
dvips $nwfile.dvi -o $nwfile.ps -t a4 ;
popd ;
#
<<BASH script end>>
@ %$

\subsctn{Defining shell functions for the current project} % \\[-0.5ex]

<<BASH Functions Block>>=
<<BASH Basic Shell Functions>>
<<BASH Functions: GTF to GFF>>
<<BASH Functions: Gene-Prediction Evaluation>>
<<BASH Functions: Running GENEID>>
<<BASH Functions: Running GENEID + Evidences>>
<<BASH Functions: Filtering GENEID RAW Output>>
<<BASH Functions: Running SGP>>
<<BASH Functions: SGP + Evidences>>
<<BASH Functions: Preparing SGP Output>>
<<BASH Functions: Predicted Genes Boundaries>>
<<BASH Functions: Running GFF2PS>>
@ 

<<BASH Basic Shell Functions>>=
#
# BASIC Shell Functions
#
ChckDirs ()
{
  #
  # USAGE: ChckDirs <path_list>
  #
  for name in "$@" ;
    do {
         [ -d "$name" ] && 
           echo "### Directory Already Exist: $name" ||
             mkdir --verbose $name ;
      } ;
    done ;
}
#
renameSEQS ()
{
  #
  # USAGE: renameSEQS ls_command reg_exp substitution_value
  # Example: renameSEQS 'ls -1 HOXa*' '^HOXa' 'HOXA'
  #
  $1 | while read n ; 
    do {
      k=`echo $n | sed "s/$2/$3/"` ;
      [ -e "$n" ] && mv -v $n $k || echo "## FILE DOES NOT EXIST: $n" ;
    } ;
    done ;
}
#
MergeFiles ()
{
  #
  # USAGE: MergeFiles <working_path>
  #
  echo "### REMOVING OLD FILES..." ;
  [ -e $1/all.Hsap ] && 
    /bin/rm --force --verbose $1/all.Hsap ;
  [ -e $1/all.Mmus ] &&
    /bin/rm --force --verbose $1/all.Mmus ;
  echo "### WORKING on HUMAN LOCI..." ;
  cat $HSAP | while read locus ;
    do { cat $1/$locus >> $1/all.Hsap ; } ; done ;
  echo "### WORKING on MOUSE LOCI..." ;
  cat $MMUS | while read locus ;
    do { cat $1/$locus >> $1/all.Mmus ; } ; done ;
  echo "### MERGING HUMAN and MOUSE..." ;
  cat $1/all.Hsap $1/all.Mmus > $1/all ;
}
#
MergeGFF () 
{
  #
  # USAGE: MergeGFF <working_path> <species_id> <flag>
  #
  flag=0 ;
  [ "$3" = "1" ] && flag=1 ; 
  echo "### REMOVING OLD FILES..." ;
  [ -e $1/all.$2 ] && 
    /bin/rm --force --verbose $1/all.$2 ;
  echo "### WORKING on $2 LOCI..." ;
  c=0 ;
  while read locus ;
    do {
         let c=c+1 ;
         [ $c -gt 1 ] && echo '#$ ' >> $1/all.$2 ;
         [ $flag -eq 1 ] &&
             cat $DATASETS/annotation/length/$locus >> $1/all.$2 ;
         gawk 'BEGIN{OFS="\t"}
             ($1 !~ /^#/ && $3 != "Gene") {
                 print $0;
             }' $1/$locus | sort +3n -5 - >> $1/all.$2 ; 
       } ;
    done < $DATASETS/id.$2 ;
}
#
MergeALLGFF () 
{
  #
  # USAGE: MergeGFF <working_path>
  #
  echo "### WORKING on HUMAN LOCI..." ;
  MergeGFF $1 Hsap 1 ;
  echo "### WORKING on MOUSE LOCI..." ;
  MergeGFF $1 Mmus 1 ;
  echo "### MERGING HUMAN and MOUSE..." ;
  echo '#$ ' | cat $1/all.Hsap - $1/all.Mmus > $1/all ;
}
@ 

\subsctn{Defining working shell variables for the current project} % \\[-0.5ex]

<<BASH Environment Variables>>=
#
# NOWEB Document Variables
# 
WORK="$HOME/development/projects/sgp/chr22" ;
BIN="$WORK/bin" ;
PARAM="$BIN/param" ;
DOCS="$WORK/docs" ;
DATA="$WORK/data" ;
nwfile="Human_Chromosome_22" ;
export WORK BIN PARAM DOCS DATA nwfile ;
#
# CHR22 Dataset Variables
#
DATASETS="/projects/datasets/chr22" ;
ANALYSIS="/projects/sgp/chr22" ;
SGPBIN="/projects/sgp/bin" ;
SGPPARAM="$SGPBIN/param" ;
#
ID="$DATASETS/id" ;
HSAP="$DATASETS/id.Hsap" ;
MMUS="$DATASETS/id.Mmus" ;
export DATASETS ANALYSIS SGPBIN SGPPARAM ID HSAP MMUS ;
#
SPLICING="/projects/splicing/chr22" ;
export SPLICING ;
# Allowing for users and group file permisions
umask 002;
@ 

<<BASH RC FILE>>=
<<BASH Environment Variables>>
<<BASH Functions Block>>
@ 

<<tangling>>=
#
# BASH shell
notangle -R'BASH RC FILE' $WORK/$nwfile.nw | \
         cpif $WORK/.bash_VARS ; 
# sourcing
source $WORK/.bash_VARS ;
@

\end{document}
