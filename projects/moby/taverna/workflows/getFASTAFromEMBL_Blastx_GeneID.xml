<?xml version="1.0" encoding="UTF-8"?>
<s:scufl xmlns:s="http://org.embl.ebi.escience/xscufl/0.1alpha" version="0.2" log="0">
  <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:4EN3STOHL67" author="" title="" />
  <s:processor name="Create_moby_data">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.CreateMobyData</s:local>
  </s:processor>
  <s:processor name="parse_moby_sequence_data">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.ExtractMobyData</s:local>
  </s:processor>
  <s:processor name="parse_moby_GFF_data">
    <s:local>org.embl.ebi.escience.scuflworkers.biomoby.ExtractMobyData</s:local>
  </s:processor>
  <s:processor name="CreateSecondary_program">
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:QNMWVB1H6070" author="" title="" />
        <s:processor name="CreateMOBYSecondary">
          <s:beanshell>
            <s:scriptvalue>import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

String OutObj="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;moby:Parameter articleName=''&gt;&lt;moby:Value&gt;EMPTY&lt;/moby:Value&gt;&lt;/moby:Parameter&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";

DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource SourceSkel = new InputSource(new StringReader(skel));

Document docsalida=db.parse(SourceSkel);

XMLSerializer serializer = new XMLSerializer();
StringWriter sw=new StringWriter();

NodeList nodelistfinal = docsalida.getElementsByTagName("moby:Parameter");

serializer.setOutputCharStream(sw);

Node comienzo = nodelistfinal.item(0);

comienzo.setAttribute("articleName",articleName);
// As the skeleton already contains a &lt;moby:Value&gt; with a TEXT_NODE,
// and it is its only child, we are going to reuse it!
comienzo.getFirstChild().getFirstChild().setNodeValue(value);

// Last step!!!
serializer.serialize(docsalida);
OutObj = sw.toString();

MobySecondary = OutObj;</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">articleName</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">value</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/xml'">MobySecondary</s:beanshelloutput>
            </s:beanshelloutputlist>
          </s:beanshell>
        </s:processor>
        <s:link source="articleName" sink="CreateMOBYSecondary:articleName" />
        <s:link source="value" sink="CreateMOBYSecondary:value" />
        <s:link source="CreateMOBYSecondary:MobySecondary" sink="MobySecondary" />
        <s:source name="articleName" />
        <s:source name="value" />
        <s:sink name="MobySecondary">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>text/xml</s:mimeType>
            </s:mimeTypes>
          </s:metadata>
        </s:sink>
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="CreateSecondary_database">
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:QNMWVB1H6049" author="" title="" />
        <s:processor name="CreateMOBYSecondary">
          <s:beanshell>
            <s:scriptvalue>import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

String OutObj="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;moby:Parameter articleName=''&gt;&lt;moby:Value&gt;EMPTY&lt;/moby:Value&gt;&lt;/moby:Parameter&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";

DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource SourceSkel = new InputSource(new StringReader(skel));

Document docsalida=db.parse(SourceSkel);

XMLSerializer serializer = new XMLSerializer();
StringWriter sw=new StringWriter();

NodeList nodelistfinal = docsalida.getElementsByTagName("moby:Parameter");

serializer.setOutputCharStream(sw);

Node comienzo = nodelistfinal.item(0);

comienzo.setAttribute("articleName",articleName);
// As the skeleton already contains a &lt;moby:Value&gt; with a TEXT_NODE,
// and it is its only child, we are going to reuse it!
comienzo.getFirstChild().getFirstChild().setNodeValue(value);

// Last step!!!
serializer.serialize(docsalida);
OutObj = sw.toString();

MobySecondary = OutObj;</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/plain'">articleName</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/plain'">value</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/xml'">MobySecondary</s:beanshelloutput>
            </s:beanshelloutputlist>
          </s:beanshell>
        </s:processor>
        <s:link source="articleName" sink="CreateMOBYSecondary:articleName" />
        <s:link source="value" sink="CreateMOBYSecondary:value" />
        <s:link source="CreateMOBYSecondary:MobySecondary" sink="MobySecondary" />
        <s:source name="articleName" />
        <s:source name="value" />
        <s:sink name="MobySecondary">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>text/xml</s:mimeType>
            </s:mimeTypes>
          </s:metadata>
        </s:sink>
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="CombineMOBY">
    <s:workflow>
      <s:scufl version="0.2" log="0">
        <s:workflowdescription lsid="urn:lsid:www.mygrid.org.uk:operation:AHTHN6PNI32" author="" title="" />
        <s:processor name="CombineMoby">
          <s:beanshell>
            <s:scriptvalue>import java.io.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import org.apache.xml.serialize.XMLSerializer;

String OutObj="";
String skel="&lt;?xml version='1.0' encoding='ISO-8859-1'?&gt;&lt;moby:MOBY xmlns:moby='http://www.biomoby.org/moby' xmlns='http://www.biomoby.org/moby'&gt;&lt;moby:mobyContent&gt;&lt;moby:mobyData queryID='one'&gt;&lt;/moby:mobyData&gt;&lt;/moby:mobyContent&gt;&lt;/moby:MOBY&gt;";


DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();

InputSource Source1 = new InputSource(new StringReader(MobyA));
InputSource Source2 = new InputSource(new StringReader(MobyB));
InputSource Source3 = new InputSource(new StringReader(MobyC));
InputSource SourceSkel = new InputSource(new StringReader(skel));

Document doc1=db.parse(Source1);
Document doc2=db.parse(Source2);
Document doc3=db.parse(Source3);
Document docsalida=db.parse(SourceSkel);

XMLSerializer serializer = new XMLSerializer();
StringWriter sw=new StringWriter();

// First, Simples
NodeList nodelist1an = doc1.getElementsByTagName("moby:Simple");
NodeList nodelist1a = doc1.getElementsByTagName("Simple");
NodeList nodelist2an = doc2.getElementsByTagName("moby:Simple");
NodeList nodelist2a = doc2.getElementsByTagName("Simple");
NodeList nodelist3an = doc3.getElementsByTagName("moby:Simple");
NodeList nodelist3a = doc3.getElementsByTagName("Simple");
// Second, Collection
NodeList nodelist1bn = doc1.getElementsByTagName("moby:Collection");
NodeList nodelist1b = doc1.getElementsByTagName("Collection");
NodeList nodelist2bn = doc2.getElementsByTagName("moby:Collection");
NodeList nodelist2b = doc2.getElementsByTagName("Collection");
NodeList nodelist3bn = doc3.getElementsByTagName("moby:Collection");
NodeList nodelist3b = doc3.getElementsByTagName("Collection");
// Third, secondary Parameter
NodeList nodelist1cn = doc1.getElementsByTagName("moby:Parameter");
NodeList nodelist1c = doc1.getElementsByTagName("Parameter");
NodeList nodelist2cn = doc2.getElementsByTagName("moby:Parameter");
NodeList nodelist2c = doc2.getElementsByTagName("Parameter");
NodeList nodelist3cn = doc3.getElementsByTagName("moby:Parameter");
NodeList nodelist3c = doc3.getElementsByTagName("Parameter");

// We will iterate over these lists
NodeList[] globalS={
	nodelist1an,
	nodelist1a,
	nodelist2an,
	nodelist2a,
	nodelist3an,
	nodelist3a
};

NodeList[] globalC={
	nodelist1bn,
	nodelist1b,
	nodelist2bn,
	nodelist2b,
	nodelist3bn,
	nodelist3b,
	nodelist1cn,
	nodelist1c,
	nodelist2cn,
	nodelist2c,
	nodelist3cn,
	nodelist3c,
};

NodeList nodelistfinal = docsalida.getElementsByTagName("moby:mobyData");

serializer.setOutputCharStream(sw);

Node comienzo = nodelistfinal.item(0);

// Common index variable for all this work
int gi;
int maxgi;

// We are skipping over Collected Simples
for(gi=0,maxgi=globalS.length;gi&lt;maxgi;gi++) {
	int i;
	int maxi;
	for(i=0,maxi=globalS[gi].getLength();i&lt;maxi;i++) {
		Node found=globalS[gi].item(i);
		String nname=found.getParentNode().getNodeName();
		if(nname.equals("moby:Collection") || nname.equals("Collection"))  next;
		comienzo.appendChild(docsalida.importNode(found,true));
	}
}

for(gi=0,maxgi=globalC.length;gi&lt;maxgi;gi++) {
	int i;
	int maxi;
	for(i=0,maxi=globalC[gi].getLength();i&lt;maxi;i++) {
		Node found=globalC[gi].item(i);
		comienzo.appendChild(docsalida.importNode(found,true));
	}
}

// Last step!!!
serializer.serialize(docsalida);
OutObj = sw.toString();

CombinedMOBY = OutObj;</s:scriptvalue>
            <s:beanshellinputlist>
              <s:beanshellinput s:syntactictype="'text/xml'">MobyA</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/xml'">MobyB</s:beanshellinput>
              <s:beanshellinput s:syntactictype="'text/xml'">MobyC</s:beanshellinput>
            </s:beanshellinputlist>
            <s:beanshelloutputlist>
              <s:beanshelloutput s:syntactictype="'text/xml'">CombinedMOBY</s:beanshelloutput>
            </s:beanshelloutputlist>
          </s:beanshell>
        </s:processor>
        <s:link source="MobyA" sink="CombineMoby:MobyA" />
        <s:link source="MobyB" sink="CombineMoby:MobyB" />
        <s:link source="CombineMoby:CombinedMOBY" sink="MobyOutput" />
        <s:link source="MobyC" sink="CombineMoby:MobyC" />
        <s:source name="MobyA">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>text/xml</s:mimeType>
            </s:mimeTypes>
          </s:metadata>
        </s:source>
        <s:source name="MobyB">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>text/xml</s:mimeType>
            </s:mimeTypes>
          </s:metadata>
        </s:source>
        <s:source name="MobyC">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>text/xml</s:mimeType>
            </s:mimeTypes>
          </s:metadata>
        </s:source>
        <s:sink name="MobyOutput">
          <s:metadata>
            <s:mimeTypes>
              <s:mimeType>text/xml</s:mimeType>
            </s:mimeTypes>
          </s:metadata>
        </s:sink>
      </s:scufl>
    </s:workflow>
  </s:processor>
  <s:processor name="runNCBIBlast">
    <s:description>Execute NCBI Blast (blastall) program and returns a blast report.</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://www.inab.org/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>runNCBIBlast</s:serviceName>
      <s:authorityName>www.pcm.uam.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="getFASTAfromEMBL">
    <s:description>Retrieve a sequence in FASTA format from EMBL database.</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://www.inab.org/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>getFASTAfromEMBL</s:serviceName>
      <s:authorityName>www.pcm.uam.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="runGeneIDGFF">
    <s:description>Ab initio gene prediction tool - Return the output predictions in GFF format.</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://www.inab.org/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>runGeneIDGFF</s:serviceName>
      <s:authorityName>genome.imim.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:processor name="fromFASTAtoGenericSequence">
    <s:description>Converts a sequence in Fasta format into a GenericSequence object</s:description>
    <s:biomobywsdl>
      <s:mobyEndpoint>http://www.inab.org/cgi-bin/MOBY-Central.pl</s:mobyEndpoint>
      <s:serviceName>fromFASTAtoGenericSequence</s:serviceName>
      <s:authorityName>www.pcm.uam.es</s:authorityName>
    </s:biomobywsdl>
  </s:processor>
  <s:link source="sequenceID" sink="Create_moby_data:id" />
  <s:link source="namespace" sink="Create_moby_data:namespace" />
  <s:link source="parse_moby_sequence_data:value" sink="sequence" />
  <s:link source="parse_moby_GFF_data:value" sink="GeneID Predictions" />
  <s:link source="runGeneIDGFF:output" sink="parse_moby_GFF_data:mobydata" />
  <s:link source="Create_moby_data:mobydata" sink="getFASTAfromEMBL:input" />
  <s:link source="getFASTAfromEMBL:output" sink="parse_moby_sequence_data:mobydata" />
  <s:link source="getFASTAfromEMBL:output" sink="fromFASTAtoGenericSequence:input" />
  <s:link source="fromFASTAtoGenericSequence:output" sink="runGeneIDGFF:input" />
  <s:link source="runNCBIBlast:output" sink="Blast_Moby" />
  <s:link source="subjectDatabase" sink="CreateSecondary_database:value" />
  <s:link source="databaseArticleName" sink="CreateSecondary_database:articleName" />
  <s:link source="programArticleName" sink="CreateSecondary_program:articleName" />
  <s:link source="program" sink="CreateSecondary_program:value" />
  <s:link source="fromFASTAtoGenericSequence:output" sink="CombineMOBY:MobyA" />
  <s:link source="CreateSecondary_program:MobySecondary" sink="CombineMOBY:MobyB" />
  <s:link source="CreateSecondary_database:MobySecondary" sink="CombineMOBY:MobyC" />
  <s:link source="CombineMOBY:MobyOutput" sink="runNCBIBlast:input" />
  <s:link source="CombineMOBY:MobyOutput" sink="MobyBlastInputObject" />
  <s:source name="sequenceID" />
  <s:source name="namespace" />
  <s:source name="subjectDatabase" />
  <s:source name="databaseArticleName" />
  <s:source name="program" />
  <s:source name="programArticleName" />
  <s:sink name="sequence">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/plain</s:mimeType>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
  <s:sink name="GeneID Predictions">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
        <s:mimeType>text/plain</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
  <s:sink name="Blast_Moby">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
  <s:sink name="MobyBlastInputObject">
    <s:metadata>
      <s:mimeTypes>
        <s:mimeType>text/xml</s:mimeType>
      </s:mimeTypes>
    </s:metadata>
  </s:sink>
</s:scufl>


