% -*- mode: Noweb; noweb-code-mode: perl-mode; tab-width: 4 -*-
\documentclass[11pt]{article}
%
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%        1         2         3         4         5         6         7         8
%
% # $Id: 20020411.MGSCv3.nw,v 1.5 2002-06-15 18:42:15 jabril Exp $ 
%
\usepackage{noweb}
\usepackage[a4paper,offset={0pt,0pt},hmargin={2cm,2cm},vmargin={1cm,1cm}]{geometry}
\usepackage{graphics}
\usepackage[dvips]{graphicx}
%% pstricks
\usepackage[dvips]{pstcol}
\usepackage{pstricks}
%\usepackage{pst-node}
%\usepackage{pst-char}
%\usepackage{pst-grad}
%% bibliography
\usepackage{natbib}
%% latex2html
\usepackage{url}
\usepackage{html}     
\usepackage{htmllist} 
%% tables    
\usepackage{dcolumn}
%\usepackage{colortbl}
%\usepackage{multirow}
%\usepackage{hhline}
%\usepackage{tabularx}
%% seminar
%\usepackage{semcolor,semlayer,semrot,semhelv,sem-page,slidesec}
%% draft watermark
%\usepackage[all,dvips]{draftcopy}
%\draftcopySetGrey{0.9}
%\draftcopyName{CONFIDENTIAL}{100}
%% layout
\usepackage{fancyhdr} % Do not use \usepackage{fancybox} -> TOCs disappear
%\usepackage{lscape}
%\usepackage{rotating}
%\usepackage{multicol}
\usepackage{verbatim}
%\usepackage{version}
%% fonts
\usepackage{times}\fontfamily{ptm}\selectfont
\usepackage{t1enc}

% noweb options
\noweboptions{smallcode}
\def\nwendcode{\endtrivlist \endgroup} % relax page breaking scheme
\let\nwdocspar=\par                    %

\input defs.tex % from <LaTeX new definitions> chunk

%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\begin{document}

<<HIDE: LaTeX new definitions>>=
%%%%% Colors for gff2ps
\input ColorDefs.tex

%%%%% New Commands are defined here
\newcommand{\sctn}[1]{\section{#1}}
\newcommand{\subsctn}[1]{\subsection{#1}}
\newcommand{\subsubsctn}[1]{\subsubsection{#1}}
\newcommand{\parsctn}[1]{\paragraph{#1}}
\newcommand{\desc}[1]{\item[#1] \ \\}
\newcommand{\todo}[1]{
  \vskip 3ex
  \hspace{-0.75cm}
   \psframebox[framearc=0.2,linecolor=darkred,linewidth=1pt,
              fillstyle=solid,fillcolor=verylightyellow,framesep=2ex]{
     \begin{minipage}[t]{16cm}
     \vskip -4.75ex
     \hspace{-1.25cm}
       \psframebox[framearc=1,linecolor=darkred,linewidth=1.25pt,
               fillstyle=solid,fillcolor=verylightorange,framesep=5pt]{
               \textcolor{darkred}{\textbf{\hspace{2ex}TO DO\hspace{2ex}}}
         } % psframebox
      \begin{itemize}\setlength{\itemsep}{-0.5ex} #1 \end{itemize}
     \end{minipage}
     } % psframebox
  \vskip 1.5ex
} % newcommand todo
\newcommand{\todoitem}[2]{
  \item[$\triangleright$] [\textit{Section}~\ref{#2}, 
                           \textit{page}~\pageref{#2}]\\ {#1}
} % newcommand todoitem
<<HIDE: new LaTeX commands>>

%%%%% PSTRICKs definitions
\pslongbox{ExFrame}{\psframebox}
\newcommand{\cln}[1]{\fcolorbox{black}{#1}{\textcolor{#1}{\rule[-.3ex]{1cm}{1ex}}}}
\newpsobject{showgrid}{psgrid}{subgriddiv=0,griddots=1,gridlabels=6pt}
% \pscharpath[fillstyle=solid, fillcolor=verydarkcyan, linecolor=black, linewidth=1pt]{\sffamily\scshape\bfseries\veryHuge #1 }
<<HIDE: new LaTeX pstricks>>

%%%%% global urls
% \newcommand{\getpsf}[1]{\html{(\htmladdnormallink{Get PostScript file}{./Psfiles/#1})}}   
<<HIDE: new LaTeX urls>>

%%%%% defs
\def\noweb{\textsc{noweb}}
\def\ps{\textsc{PostScript}}
<<HIDE: new LaTeX definitions>>

%%%%% TODO defs
<<HIDE: new defs TODO>>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\def\genomelab{\textbf{Genome Informatics Research Lab}}
\def\shorttit{\textbf{Human + Mouse}}
\def\tit{\textsc{\shortstack{Human Genome Annotation\\using Mouse Homology}}}
%
\def\mtauthor{
 \htmladdnormallink{\texttt{author@imim.es}}
                   {MAILTO:author@imim.es?subject=[humus]}
 } % def mtauthor
%
\def\authorslist{
 The Author/s {\mdseries\small\dotfill \mtauthor } \\
 % Other authors here...\\
 } % def authorslist
\def\authorshort{
 Abril, JF; Parra, G; Guig\'o, R
 } % def authorshort
%
\def\license{GNU General Public License (GNU-GPL)}
%
\def\progdesc{
We are going to scale up all the processes we have tested on {\lhsap} chromosomes 22 and 21, to the whole genome approach, in which we take advantage of the homology between {\hsap} and {\lmmus} genomes to increase gene prediction accuracy and producing a better genome annotation of the coding regions.
 } % def progdesc
%
\def\showaffiliation{
\scalebox{0.9 1}{\Large\textsl{\genomelab}}\\
Grup de Recerca en Infom\`atica Biom\`edica\\
Institut Municipal d'Investigaci\'o M\`edica\\
Universitat Pompeu Fabra\\[2ex]
 } % def showaffiliation
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Setting text for footers and headers
\fancyhead{} % clear all fields
\fancyfoot{} % clear all fields
\fancyhead[RO,LE]{\thepage}
\fancyhead[LO,RE]{\shorttit\quad\rightmark}
\fancyfoot[LO,LE]{\small\textbf{\genomelab}}
\fancyfoot[CO,CE]{\small\textsl{\authorshort}}
\fancyfoot[RO,RE]{\small\textbf{\today}}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
%
@

<<HIDE: new LaTeX commands>>=
\newcommand{\mylst}[2]{
 \begin{center}
% \fbox{
  \begin{minipage}{0.95\linewidth}
   \textbf{#1}
   \begin{itemize}
     #2
   \end{itemize}
  \end{minipage}
% } % fbox
 \end{center}
} % newcommand->mylst
\newcommand{\whtlst}[1]{\mylst{What to do here:}{#1}} % newcommand->chklst
\newcommand{\chklst}[1]{\mylst{Check points:}{#1}} % newcommand->chklst
@ 
<<HIDE: new LaTeX pstricks>>=
@ 
<<HIDE: new LaTeX urls>>=
\def\mtjabril{\htmladdnormallink{\textbf{jabril@imim.es}}{MAILTO:jabril@imim.es?subject=[HuMus]}}
\def\mtgparra{\htmladdnormallink{\textbf{gparra@imim.es}}{MAILTO:gparra@imim.es?subject=[HuMus]}}
\def\mtrguigo{\htmladdnormallink{\textbf{rguigo@imim.es}}{MAILTO:rguigo@imim.es?subject=[HuMus]}}
\def\mthomology{\htmladdnormallink{\textbf{homology@viaken.com}}{MAILTO:homology@viaken.com?subject=[HuMus]}}
@ 
<<HIDE: new LaTeX definitions>>=
\def\perl{\textsc{Perl}}
\def\biop{\textsc{BioPerl}}
\def\ps{\textsc{PostScript}}
\def\rptm{\textsc{RepeatMasker}}
\def\bl{\textsc{Blast}}
\def\bn{\textsc{blastn}}
\def\bx{\textsc{blastx}}
\def\bp{\textsc{blastp}}
\def\tbn{\textsc{tblastn}}
\def\tbx{\textsc{tblastx}}
\def\pb{\texttt{parseblast}}
\def\gnid{\texttt{geneid}}
\def\gnsc{\texttt{genscan}}
\def\twsc{\texttt{twinscan}}
\def\slam{\textsc{slam}}
\def\sgp{\textsc{sgp}}
\def\gps{\texttt{gff2ps}}
\def\aps{\texttt{gff2aplot}}
\def\apo{\textsl{Apollo}}
\def\refseq{\textsc{RefSeq}}
\def\ens{\textit{\texttt{emsembl}}}
\def\hsap{\textit{H. sapiens}}
\def\lhsap{\textit{Homo sapiens}}
\def\mmus{\textit{M. musculus}}
\def\lmmus{\textit{Mus musculus}}
@ 
<<HIDE: new defs TODO>>=
@ 

%

\thispagestyle{empty}

\begin{titlepage}

\ \vfill
\begin{center}
\textbf{\Huge \tit}\\[5ex]

% \textbf{\Large Authors List Here}\\[1ex]
\textbf{\Large Josep F. Abril}\\[1ex]
\textbf{\Large Gen\'{\i}s Parra}\\[1ex]
\textbf{\Large Roderic Guig\'o}\\[5ex] % \raisebox{0.85ex}{\footnotesize$\,\dag$}\\[0.5ex]

\textbf{\large --- \today ---}\\[10ex]

\begin{abstract}
\begin{center}
\parbox{0.75\linewidth}{
\progdesc
} % parbox
\end{center}
\end{abstract}

\vfill

\begin{raggedleft}
\showaffiliation
\raisebox{0.85ex}{\footnotesize$\dag\,$}{\large e-mail: {\mtjabril}, {\mtgparra} and {\mtrguigo}}\\
\end{raggedleft}
\end{center}

\end{titlepage} %'

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\thispagestyle{empty}

\ \ \\
% EMPTY PAGE

%
%%%%%%%%%%%%%%%%%%%% FRONTMATTER

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\pagenumbering{roman}
\setcounter{page}{1}
\pagestyle{fancy}
% Marks redefinition must go here because pagestyle 
% resets the values to the default ones.
\renewcommand{\sectionmark}[1]{\markboth{}{\thesection.\ #1}}
\renewcommand{\subsectionmark}[1]{\markboth{}{\thesubsection.\ \textsl{#1}}}

\tableofcontents
\listoftables
\listoffigures

\vfill
\begin{center}
{\small$<$ \verb$Id: 20020411.MGSCv3.nw,v 1.5 2002-06-15 18:42:15 jabril Exp $$>$ }
\end{center}

%%%%%%%%%%%%%%%%%%%% MAINMATTER

\newpage %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pagenumbering{arabic}
\setcounter{page}{1}

\sctn{Working on {\lmmus} sequences}

<<>>=
# GET SEQS
$BIN/getfastadesc.pl $MySQLPAR/Mmusculus_chrs.tbl $MSEQ \
                     > $MUSHU/seqid_list 2> $MUSHU/seqid_list.rpt ;
   ## checking execution status of getfastadesc.pl
   grep '^\#\# ' seqid_list.rpt | \
     gawk '{
         gsub(/[\"]/,"",$7);
         printf "\n%s %s %s %s",$1,$2,$3,$6"-> "$7
       }
       END{ printf " <-\n"; }' | sort +4n ;
#
# INITIALIZE
gawk '$1!~/^\#/ {print $1}' $MUSHU/seqid_list | \
  while read CHR ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      MkDirs $ODIR ;
      gawk 'BEGIN{ chrom="\^"ARGV[1]"\$"; ARGV[1]=""; }
            $1 ~ chrom { print $0; }
           ' $CHR $MUSHU/seqid_list > $ODIR/desc ;
      gawk '{ print $2, $3; }' $ODIR/desc > $ODIR/length ;
      gawk 'BEGIN{ OFS="\t"; ofile=ARGV[1]; s="Sequence"; d="." }
            { print $1,s,s,1,$2,d,d,d,1 > ofile"."$1".gff"; }
           ' $ODIR/length ;
      } ;
    done ;
#
gawk '$1!~/^\#/ {print $1}' $MUSHU/seqid_list | \
  while read CHR ;
    do {
       cat $MUSHU/chr$CHR/length ;
       } ;
    done > $MUSHU/all_length ;
#
# RETRIEVE INVTBX HSPs FROM TBX[HsapSQ-MmusDB]
# gawk '$1!~/^\#/ {print $1}' $MySQLPAR/Mmusculus_chrs.tbl | \
MkDirs $MUSHU/invTBX $MUSHU/invTBX/$FTPTBXID ;
gawk 'BEGIN{ prt=1 }
      $1~/^6$/ { prt=0 }
      { if (prt) print $0 }
      ' $HUMUS/seqid_list > $MUSHU/bin/hsap.seqid_a ;
gawk 'BEGIN{ prt=0 }
      $1~/^6$/ { prt=1 } $1~/^11$/ { prt=0 }
      { if (prt) print $0 }
      ' $HUMUS/seqid_list > $MUSHU/bin/hsap.seqid_b ;
gawk 'BEGIN{ prt=0 }
      $1~/^11$/ { prt=1 } $1~/^16$/ { prt=0 }
      { if (prt) print $0 }
      ' $HUMUS/seqid_list > $MUSHU/bin/hsap.seqid_c ;
gawk 'BEGIN{ prt=0 }
      $1~/^16$/ { prt=1 }
      { if (prt) print $0 }
      ' $HUMUS/seqid_list > $MUSHU/bin/hsap.seqid_d ;
# ls -1 bin/hsap.seqid_* | while read n; do echo "$n ->"`gawk '{s+=$3}END{print s}' $n`; done
cnt=0; ko="a"; 
cnt=0; ko="b"; 
cnt=0; ko="c"; 
cnt=0; ko="d";
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/bin/hsap.seqid_$ko | \
    while read CH SQ;
      do { # HUMUS=/projects/H.sapiens/20011222.UCSCgp
        ls "-1" $HUMUS/chr$CH/tblastx/$FTPTBXID/hsp/$SQ.fullgff ; 
      } ;
    done | \
  while read file ;
    do {
      $BIN/swapHSPcoords.pl -o "-1" \
            -a $MUSHU/invTBX/$FTPTBXID/'_*_'.$ko\_$cnt.fullgff \
            $MUSHU/all_length $file ;
      cnt=`expr $cnt + 1` ;
      } ;
    done ;
#
# RUN RAW GENEID on MASKED SEQUENCES
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      ###
      echo "# RUNNING GENEID on $CHR" 1>&2 ;
      GDIR="$ODIR/geneid" ;
      MkDirs $GDIR $GDIR/$FTPTBXID ;
      GDIR="$ODIR/geneid/$FTPTBXID" ;
      for c in out gff gtf2 cds prot logs tmp eval ;
        do { MkDirs $GDIR/$c ; } ; done ;
      GENEID="$SRC/geneid_v1.1/bin/geneid" ; # geneid v1.1
      PARAM="$SRC/geneid_v1.1/param/human3iso.param" ;
      EW=0 ; # add to exon weigth
      ISEQ="$MSEQMSK/$SEQ.fa.masked" ;
      GENEID_CMDLN="-v -DE $EW -P $PARAM $ISEQ" ;
      echo "$GENEID $GENEID_CMDLN" 1>&2 ;
      $GENEID $GENEID_CMDLN 2> $GDIR/logs/$SEQ.geneid | \
              grep -v 'evidence' > $GDIR/out/$SEQ ;
      $BIN/geneid_raw2GFF.pl $SEQ $GDIR $GDIR/out/$SEQ ;
      #
      ls -1 $GDIR/gff/$SEQ.sg/ | egrep "^$SEQ" | \
      while read n;
        do {
          cat $GDIR/gff/$SEQ.sg/$n;
          };
        done | sort +3n +4n -5 - > $GDIR/gff/$SEQ ;
      #
      gawk '($0 !~ /^[ \t]*$/ && $1 !~ /^\#/) { # get_geneid_genes 
        genes[$9]++;
        if (genes[$9]>1) {
          min[$9] = $4<min[$9] ? $4 : min[$9] ;
          max[$9] = $5>max[$9] ? $5 : max[$9] ;
        } else {
          min[$9] = $4 ;
          max[$9] = $5 ;
          strand[$9] = $7;
        };
        len[$9]+=$5-$4+1
      }
      END {
        for (n in genes) {
          print n, min[n], max[n], strand[n], len[n],genes[n];
        };
      }' $GDIR/gff/$SEQ | \
         sort +1n +2n -3 - > $GDIR/$SEQ.gene_list ;
      } ;
    done ;
##
@ 

<<Version Control Id Tag>>=
# $Id: 20020411.MGSCv3.nw,v 1.5 2002-06-15 18:42:15 jabril Exp $
@ 
<<BASH shebang>>=
#!/usr/bin/bash
# GNU bash, version 2.03.6(1)-release (i386-redhat-linux-gnu)
<<Version Control Id Tag>>
@ 
<<BASH Project Variables>>=
#
umask 002 ;
#
BASE="/projects" ;
HBASE="$BASE/H.sapiens" ;
MBASE="$BASE/M.musculus" ;
export BASE HBASE MBASE ;
#
# Make these "six" vars independent from script (maybe join them with %HOSTS)
HSAP="/seq/genomes/H.sapiens/golden_path_20011222" ; # UCSC
HSAPID="20011222" ; HSAPSTR="20011222.UCSCgp" ;
HSEQ="$HSAP/chromFa" ; 
HSEQMSK="$HSAP/chromFa_msk" ; 
#
MMUS="/seq/genomes/M.musculus/MGSC_V3_20020411" ; # 
MMUSID="20020411" ; MMUSSTR="20020411.MGSCv3" ;
MSEQ="$MMUS/golden_path_200202MM/bigZips/unmasked" ; 
MSEQMSK="$MMUS/golden_path_200202MM/bigZips/masked" ; 
#
FTPTBX="$HBASE/.ftp/PankajAgarwal/20020425.tbx-20011222UCSCgp-20020411MGSCv3" ;
FTPTBXID="20020425" ;
RIKENTBX="$HBASE/.ftp/RIKEN/20020504.gparra/blast" ;
RIKENID="20020504.RIKEN" ;
MGSC_RKN="${MMUSSTR}+${RIKENID}" ;
REFSEQID="RefSeqEvids" ;
HSMM_REFSEQ="${HSAPSTR}-${MMUSSTR}+${REFSEQID}" ;
MMHS_REFSEQ="${MMUSSTR}-${HSAPSTR}+${REFSEQID}" ;
#
export HSAP HSAPID HSAPSTR HSEQ HSEQMSK \
       MMUS MMUSID MMUSSTR MSEQ MSEQMSK \
       FTPTBX FTPTBXID RIKENTBX RIKENID MGSC_RKN \
       REFSEQID HSMM_REFSEQ MMHS_REFSEQ ;
#
HUMUS="$HBASE/$HSAPSTR" ;
MUSHU="$MBASE/$MMUSSTR" ;
BBIN="/usr/local/molbio/share/sgp" ;
BIN="$BBIN/bin" ;
MySQLPAR="$BBIN/mySQL" ;
LIBPERL="$BBIN/libperl" ;
LIBSTEP="$BBIN/libstep" ;
SRC="$BBIN/src" ;
# TMP="$BBIN/tmp" ; # this is a read only system....
TMP="$HUMUS/tmp" ;
export HUMUS MUSHU BBIN BIN MySQLPAR LIBPERL LIBSTEP SRC TMP ;
#
PERL5OPT="-I$BBIN/libperl" ;
export PERL5OPT;
#
#
# BASIC Shell Functions
#
function MkDirs ()
{
  #
  # USAGE: MkDirs <path_list>
  #
  for name in "$@" ;
    do {
         if [ -d "$name" ] ;
         then 
           echo "### Directory Already Exist: $name" 1>&2 ;
         elif mkdir $name 2> /dev/null ;
           then
             echo "### Making New Directory   : $name" 1>&2 ;
         else
           echo "### CANNOT Create Directory: $name" 1>&2 ; 
         fi ;
      } ;
    done ;
}
#
function is_exec ()
{
  #
  # USAGE: is_exec <filename_0>...<filename_N>
  for file in $@ ;
    do {
         if [ -x $file ] ;
         then
           echo "#    Script $file has execute permissions ..." 1>&2 ;
         else
           echo "#    Setting execute permissions for $file ..." 1>&2 ;
           chmod a+x $file 2> /dev/null ;
         fi ;
      } ;
    done ;
}
#
function CheckFile ()
{
  #
  # USAGE: CheckFile <MODE(RWAE)> <filename_0>...<filename_N>
  mode="$1" ; shift ;
  case $mode in
    R|r) tst="-r" ; err="NOREADFILE"   ; msg="readable"  ;;
    W|w) tst="-w" ; err="NOWRITEFILE"  ; msg="writeable" ;;
    A|a) tst="-w" ; err="NOAPPENDFILE" ; msg="writeable" ;;
      *) tst="-e" ; err="NOFILE"       ; msg="found"     ;;
  esac; 
  for file in "$@" ;
    do {
      if [ -f $file -a $tst $file ] ;
         then
           echo "#    $file IS $msg ..." 1>&2 ;
         else
           echo "#    $file IS NOT $msg ..." 1>&2 ;
         fi ;
      } ;
    done ;
}
#
# Counting gene number found in geneid output
function get_geneid_genes ()
{
  #
  # USAGE: get_geneid_genes geneid_out.gff > gene_list.rpt
  #
  # ($1 ~ /^\#/ && $2 ~ /^Gene$/ ) { print $0 } 
  gawk '($0 !~ /^[ \t]*$/ && $1 !~ /^\#/) {
      genes[$9]++;
      if (genes[$9]>1) {
        min[$9] = $4<min[$9] ? $4 : min[$9] ;
        max[$9] = $5>max[$9] ? $5 : max[$9] ;
      } else {
        exons[$9] = 0;
        min[$9] = $4 ;
        max[$9] = $5 ;
        strand[$9] = $7;
      };
      if (tolower($3) ~ /single|first|internal|terminal|cds/) {
        exons[$9]++;
      };
      len[$9]+=$5-$4+1
    }
    END {
      for (n in genes) {
        print n, min[n], max[n], strand[n], len[n], exons[n];
      };
    }
  ' $1 | sort +1n +2n -3 - ;
}
#
@

<<runallmouse.sh>>=
<<BASH shebang>>
###
### runallmouse.sh ### RUNNING ALMOST EVERYTHING ON MOUSE !!!
###
<<BASH Project Variables>>
# $MUSHU/seqid_list
SEQID="$1" ;
gawk '$1!~/^\#/ {print $1, $2}' $SEQID | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      ###
      echo "# PROCESSING TBLASTX INV-HSPs on $CHR" 1>&2 ;
      TDIR="$ODIR/tblastx";
      MkDirs $TDIR $TDIR/$FTPTBXID ;
      TDIR="$ODIR/tblastx/$FTPTBXID";
      for c in ori inv-hsp inv-sr eval;
        do { MkDirs $TDIR/$c ; } ; done ;
      mega "cp -v" $MUSHU/invTBX/$FTPTBXID '^'$SEQ'\.[abcd]_[0-9]' $TDIR/ori ;
      mega "cat" $TDIR/ori '^'$SEQ'\.[abcd]_[0-9].*\.fullgff$' > $TDIR/inv-hsp/$SEQ.fullgff ;
      perl -ne '/^#/o && next;
                /^\s+$/o && next; 
                $_ =~ s/;\s+Strand//o; 
                $_ =~ s/;\s+Frame//o; 
                $_ =~ s/;\s+E_value.*$//o;
                print STDOUT $_;
           ' $TDIR/inv-hsp/$SEQ.fullgff | \
             sort +3n -6 +6 -7 - > $TDIR/inv-hsp/$SEQ ;
      $BIN/blast2gff -vg  $TDIR/inv-hsp/$SEQ.gff > $TDIR/inv-sr/$SEQ.gff ;
      gawk '
        BEGIN{ chr=ARGV[1]; ARGV[1]=""; t=b["+"]=b["-"]=b["."]=0; }
        ($0 !~ /^[ \t]*$/ && $1 !~ /^\#/) { t++; a[$7,$8]++; b[$7]++; c[$8]++ }
        END{ 
          printf "# TOTAL %s SRs on %s: %s forward, %s reverse, %s without strand.\n", 
                 t, chr, b["+"], b["-"], b["."];
          for (i in c) {
            printf "#\t%s : %6s\t\|\t%s : %6s\t|\t%s : %6s\n", 
                   "+"i, a["+",i] ? a["+",i] : 0,
                   "-"i, a["-",i] ? a["-",i] : 0,
                   "."i, a[".",i] ? a[".",i] : 0;
          };
        }
      ' $SEQ $TDIR/inv-sr/$SEQ.gff > $TDIR/inv-sr/$SEQ.report ;
      ###
      echo "# RUNNING SGP on $CHR" 1>&2 ;
      SDIR="$ODIR/sgp" ;
      MkDirs $SDIR $SDIR/$FTPTBXID ;
      SDIR="$ODIR/sgp/$FTPTBXID" ;
      for c in inv-hsp-sr out gff gtf2 cds prot logs tmp eval ;
        do { MkDirs $SDIR/$c ; } ; done ;
      $BIN/getHSPSR.pl $SEQ < $TDIR/inv-sr/$SEQ.gff \
            > $SDIR/inv-hsp-sr/$SEQ.gff 2> $SDIR/inv-hsp-sr/$SEQ.report ;
      #
      GENEID="$SRC/geneid_v1.1-sgp/bin/geneid" ; # geneid v1.1-sgp
      PARAM="$SRC/geneid_v1.1-sgp/param/human3iso.param.sgp" ;
      EW=0 ; # add to exon weigth
      ISEQ="$MSEQ/$SEQ.fa" ;
      HOMOLOGY="$SDIR/inv-hsp-sr/$SEQ.gff" ;
      if [ -f "$HOMOLOGY" ] ;
        then
          echo "### Using homology data from: $HOMOLOGY" 1>&2 ;
          HOMOLOGY_PAR="-S $HOMOLOGY" ;
        else
          echo "### Homology file NOT found: $HOMOLOGY" 1>&2 ;
          HOMOLOGY_PAR="" ;
        fi ;
      #
      GENEID_CMDLN="-v -DE $EW -P $PARAM $HOMOLOGY_PAR $ISEQ" ;
      echo "$GENEID $GENEID_CMDLN" 1>&2 ;
      $GENEID $GENEID_CMDLN 2> $SDIR/logs/$SEQ.sgp | \
          grep -v 'evidence' > $SDIR/out/$SEQ ;
      $BIN/geneid_raw2GFF.pl $SEQ $SDIR $SDIR/out/$SEQ ;
      #
      ls -1 $SDIR/gff/$SEQ.sg/ | egrep "^$SEQ" | \
        while read n;
          do {
            cat $SDIR/gff/$SEQ.sg/$n;
            };
          done | sort +3n +4n -5 - > $SDIR/gff/$SEQ ;
      #
      get_geneid_genes $SDIR/gff/$SEQ | \
           sort +1n +2n -3 - > $SDIR/$SEQ.gene_list ;      
      } ;
    done ;
###EOF###
@ 
%'

<<runallmouseMSK.sh>>=
<<BASH shebang>>
###
### runallmouseMSK.sh ### RUNNING ALMOST EVERYTHING ON MOUSE !!!
###
<<BASH Project Variables>>
# $MUSHU/seqid_list
SEQID="$1" ;
gawk '$1!~/^\#/ {print $1, $2}' $SEQID | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      ###
      echo "# RUNNING SGP on MASKED $CHR" 1>&2 ;
      SDIR="$ODIR/sgp" ;
      MkDirs $SDIR $SDIR/$FTPTBXID.msk ;
      SDIR="$ODIR/sgp/$FTPTBXID.msk" ;
      for c in inv-hsp-sr out gff gtf2 cds prot logs tmp eval ;
        do { MkDirs $SDIR/$c ; } ; done ;
      #
      GENEID="$SRC/geneid_v1.1-sgp/bin/geneid" ; # geneid v1.1-sgp
      PARAM="$SRC/geneid_v1.1-sgp/param/human3iso.param.sgp" ;
      EW=0 ; # add to exon weigth
      ISEQ="$MSEQMSK/$SEQ.fa.masked" ;
      # Same homology as in previous runs
      HOMOLOGY="$ODIR/sgp/$FTPTBXID/inv-hsp-sr/$SEQ.gff" ;
      if [ -f "$HOMOLOGY" ] ;
        then
          echo "### Using homology data from: $HOMOLOGY" 1>&2 ;
          HOMOLOGY_PAR="-S $HOMOLOGY" ;
        else
          echo "### Homology file NOT found: $HOMOLOGY" 1>&2 ;
          HOMOLOGY_PAR="" ;
        fi ;
      #
      GENEID_CMDLN="-v -DE $EW -P $PARAM $HOMOLOGY_PAR $ISEQ" ;
      echo "$GENEID $GENEID_CMDLN" 1>&2 ;
      $GENEID $GENEID_CMDLN 2> $SDIR/logs/$SEQ.sgp | \
          grep -v 'evidence' > $SDIR/out/$SEQ ;
      $BIN/geneid_raw2GFF.pl $SEQ $SDIR $SDIR/out/$SEQ ;
      #
      ls -1 $SDIR/gff/$SEQ.sg/ | egrep "^$SEQ" | \
        while read n;
          do {
            cat $SDIR/gff/$SEQ.sg/$n;
            };
          done | sort +3n +4n -5 - > $SDIR/gff/$SEQ ;
      #
      get_geneid_genes $SDIR/gff/$SEQ | \
           sort +1n +2n -3 - > $SDIR/$SEQ.gene_list ;      
      } ;
    done ;
###EOF###
@ 
%'

<<runallmouseSGPrefseq.sh>>=
<<BASH shebang>>
###
### runallmouseSGPrefseq.sh ### RUNNING SGP+REFSEQ ON MOUSE !!!
###
<<BASH Project Variables>>
# $MUSHU/seqid_list
SEQID="$1" ;
gawk '$1!~/^\#/ {print $1, $2}' $SEQID | \
  while read CHR SEQ ;
    do {
      ADIR="$MUSHU/chr$CHR" ;
      ###
      echo "# RUNNING SGP on $CHR" 1>&2 ;
      SDIR="$ADIR/sgp" ;
      MkDirs $SDIR $SDIR/$MMHS_REFSEQ ;
      SDIR="$ADIR/sgp/$MMHS_REFSEQ" ;
      for c in out gff gtf2 cds prot hsp-sr logs tmp evids gff+evids ;
        do { MkDirs $SDIR/$c ; } ; done ;
      #
      EVDIR="$ADIR/annotation/refseq" ;
      $BIN/gp2gff.pl --no-overlap --exonori-nuclfix 1 -- \
               $SEQ refseq $MUSHU/tmp/refGene.txt \
             > $EVDIR/$SEQ.fullgff 2> $EVDIR/$SEQ.report ;
      get_geneid_genes $EVDIR/$SEQ.fullgff > $EVDIR/$SEQ.genes.full ;
      gawk 'BEGIN{ OFS="\t";
            chr=ARGV[1]; ARGV[1]="";
            source="refseq"; feat="single"; sco="1"; strand="+"; frame="3" }
          ($0 !~ /^[ \t]*$/ && $1 !~ /^\#/) {
            print chr,source,feat,$2,$3,sco,strand,frame,$1; # strand->$4
          }' $SEQ $EVDIR/$SEQ.genes.full | sort +3n -4 > $EVDIR/$SEQ.genes.gff ;
      #
      ODIR="$SDIR/evids" ;
      $BIN/blast2gff -vg $EVDIR/$SEQ.genes.gff > $ODIR/$SEQ.genes.gff
      $BIN/prepevids.pl 500 $ODIR/$SEQ.genes.gff | \
              sort +3n -4 > $ODIR/$SEQ.evids.gff ;
      #
      GENEID="$SRC/geneid_v1.1-sgp/bin/geneid" ; # geneid v1.1-sgp
      PARAM="$SRC/geneid_v1.1-sgp/param/human3iso.param.sgp" ;
      EW=0 ; # add to exon weigth
      ISEQ="$MSEQ/$SEQ.fa" ;
      HOMOLOGY="$ADIR/sgp/$FTPTBXID/inv-hsp-sr/$SEQ.gff" ;
      if [ -f "$HOMOLOGY" ] ;
        then
          echo "### Using homology data from: $HOMOLOGY" 1>&2 ;
          HOMOLOGY_PAR="-S $HOMOLOGY" ;
        else
          echo "### Homology file NOT found: $HOMOLOGY" 1>&2 ;
          HOMOLOGY_PAR="" ;
        fi ;
      EVIDENCE="$ODIR/$SEQ.evids.gff" ;
      if [ -f "$EVIDENCE" ] ;
        then
          echo "### Using annotation evidences from: $EVIDENCE" 1>&2 ;
          EVIDENCE_PAR="-R $EVIDENCE" ;
        else
          echo "### Evidences file NOT found: $EVIDENCE" 1>&2 ;
          EVIDENCE_PAR="" ;
        fi ;
      #
      ODIR="$SDIR/out" ; EDIR="$SDIR/logs" ;
      GENEID_CMDLN="-v -DE $EW -P $PARAM $HOMOLOGY_PAR $EVIDENCE_PAR $ISEQ" ;
      echo "$GENEID $GENEID_CMDLN > $ODIR/$SEQ.all 2> $EDIR/$SEQ.sgp" 1>&2 ;
      $GENEID $GENEID_CMDLN > $ODIR/$SEQ.all 2> $EDIR/$SEQ.sgp ;
      egrep -v '^Annotation' $ODIR/$SEQ.all > $ODIR/$SEQ ;
      $BIN/geneid_raw2GFF.pl $SEQ $SDIR $ODIR/$SEQ ;
      #
      ODIR="$SDIR/gff" ;
      ls -1 $ODIR/$SEQ.sg/ | egrep "^$SEQ" | \
        while read n;
          do {
            cat $ODIR/$SEQ.sg/$n;
            };
          done | sort +3n +4n -5 - > $ODIR/$SEQ ;
      get_geneid_genes $ODIR/$SEQ > $SDIR/$SEQ.gene_list
      #
      EVIORI="$EVDIR" ;
      EVIDS="$SDIR/evids" ;
      EVIDGFF="$SDIR/gff+evids" ;
      # All refseqs (to be submitted)
      cat $EVIORI/$SEQ.fullgff $ODIR/$SEQ | egrep -v '^#' - | \
        sort +3n -5 - > $EVIDGFF/$SEQ.sgp+refseq.gff ;
      # Eval refseqs (for eval process)
      cat $EVIORI/$SEQ.eval.gff $ODIR/$SEQ | egrep -v '^#' - | \
        sort +3n -5 - > $EVIDS/$SEQ.sgp+refseq.eval.gff ;
      #
      ODIR="$SDIR/eval" ;
      MkDirs $ODIR ;
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
              $EVIDS/$SEQ.sgp+refseq.eval.gff \
            > $ODIR/$SEQ.sgp+refseq.eval.gff ;
      $BIN/gffsplitstrand.pl $ODIR/$SEQ.sgp+refseq.eval.gff ; # no sequence length record required here
      } ;
    done ;
###EOF###
@ 


<<Mouse Fast Scripting>>=
WDIR="$WORK/lib" ;
DDIR="$WDIR/CHR22_tests.docs" ;
localnw="20020411.MGSCv3" ;
export WDIR DDIR localnw ;
#
notangle -R'runallmouse.sh' $WDIR/$localnw.nw | \
                       cpif $MUSHU/bin/runallmouse.sh ;
is_exec $MUSHU/bin/runallmouse.sh ;
#
notangle -R'runallmouseMSK.sh' $WDIR/$localnw.nw | \
                       cpif $MUSHU/bin/runallmouseMSK.sh ;
is_exec $MUSHU/bin/runallmouseMSK.sh ;
#
notangle -R'runallmouseSGPrefseq.sh' $WDIR/$localnw.nw | \
                                cpif $MUSHU/bin/runallmouseSGPrefseq.sh ;
is_exec $MUSHU/bin/runallmouseSGPrefseq.sh ;
##
##
gawk 'BEGIN{ prt=1 }
      $1~/^5$/ { prt=0 }
      { if (prt) print $0 }
      ' $MUSHU/seqid_list > $MUSHU/bin/seqid_a ;
gawk 'BEGIN{ prt=0 }
      $1~/^5$/ { prt=1 } $1~/^10$/ { prt=0 }
      { if (prt) print $0 }
      ' $MUSHU/seqid_list > $MUSHU/bin/seqid_b ;
gawk 'BEGIN{ prt=0 }
      $1~/^10$/ { prt=1 } $1~/^15$/ { prt=0 }
      { if (prt) print $0 }
      ' $MUSHU/seqid_list > $MUSHU/bin/seqid_c ;
gawk 'BEGIN{ prt=0 }
      $1~/^15$/ { prt=1 }
      { if (prt) print $0 }
      ' $MUSHU/seqid_list > $MUSHU/bin/seqid_d ;
# ls -1 bin/seqid_* | while read n; do echo "$n ->"`gawk '{s+=$3}END{print s}' $n`; done
#
MUSBIN="$MUSHU/bin";
# MUSPRG="runallmouse.sh";
MUSPRG="runallmouseSGPrefseq.sh";
# monstre4
rsh monstre4.imim.es "( $MUSBIN/$MUSPRG $MUSBIN/seqid_a 2> $MUSBIN/seqid_a.SGPrs.log 1>&2 )" &
# monstre3
rsh monstre3.imim.es "( $MUSBIN/$MUSPRG $MUSBIN/seqid_b 2> $MUSBIN/seqid_b.SGPrs.log 1>&2 )" &
# monstre2
rsh monstre2.imim.es "( $MUSBIN/$MUSPRG $MUSBIN/seqid_c 2> $MUSBIN/seqid_c.SGPrs.log 1>&2 )" &
# monstre1
$MUSBIN/$MUSPRG $MUSBIN/seqid_d 2> $MUSBIN/seqid_d.SGPrs.log 1>&2 &
#
rsh monstre1.imim.es "( $MUSBIN/$MUSPRG $MUSBIN/seqid_d 2> $MUSBIN/seqid_d.SGPrs.log 1>&2 )" &
#
egrep '^# (PROCESSING TBLASTX|RUNNING SGP)' bin/seqid_*.log
@ 

\subsctn{Evaluation of predicted genes}

<<EVALUATIONS: Golden Path files>>=
#
# Preparing GoldenPath Files
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ADIR="$MUSHU/chr$CHR" ;
      ODIR="$ADIR/annotation" ;
      MkDirs $ODIR ;
      ### Refseq
      WDIR="$ODIR/refseq" ; MkDirs $WDIR ;
      echo "# PREPARING REFSEQ ANNOTATION on $CHR" 1>&2 ;
      $BIN/gp2gff.pl --no-overlap --exonori-nuclfix 1 -- \
               $SEQ refseq $MUSHU/tmp/refGene.txt \
             > $WDIR/$SEQ.eval.fullgff 2> $WDIR/$SEQ.eval.report ;
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
               $WDIR/$SEQ.eval.fullgff > $WDIR/$SEQ.eval.gff ;
      $BIN/gffsplitstrand.pl -l $ADIR/length.$SEQ.gff $WDIR/$SEQ.eval.gff ;
      ### Ensembl
      WDIR="$ODIR/ensembl" ; MkDirs $WDIR ;
      echo "# PREPARING ENSEMBL ANNOTATION on $CHR" 1>&2 ;
      $BIN/gp2gff.pl --no-overlap --exonori-nuclfix 1 -- \
               $SEQ ensembl $MUSHU/tmp/ensGene.txt \
             > $WDIR/$SEQ.eval.fullgff 2> $WDIR/$SEQ.eval.report ;
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
               $WDIR/$SEQ.eval.fullgff > $WDIR/$SEQ.eval.gff ;
      $BIN/gffsplitstrand.pl -l $ADIR/length.$SEQ.gff $WDIR/$SEQ.eval.gff ;
      ### Genscan
      WDIR="$ODIR/genscan" ; MkDirs $WDIR ;
      echo "# PREPARING GENSCAN on $CHR" 1>&2 ;
      $BIN/gp2gff.pl --no-overlap --exonori-nuclfix 1 -- \
               $SEQ genscan $MUSHU/tmp/genscan.txt \
             > $WDIR/$SEQ.eval.fullgff 2> $WDIR/$SEQ.eval.report ;
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
               $WDIR/$SEQ.eval.fullgff > $WDIR/$SEQ.eval.gff ;
      $BIN/gffsplitstrand.pl $WDIR/$SEQ.eval.gff ;
      ### Fgenes # there are some problems on the gp file...
      WDIR="$ODIR/fgenes" ; MkDirs $WDIR ;
      echo "# PREPARING FGENES (SoftBerry) on $CHR" 1>&2 ;
      $BIN/gp2gff.pl --no-overlap --exonori-nuclfix 1 -- \
               $SEQ fgenes $MUSHU/tmp/softberryGene.txt \
                > $WDIR/$SEQ.eval.fullgff \
               2> $WDIR/$SEQ.eval.report ;
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
               $WDIR/$SEQ.eval.fullgff | \
               sort +3n -4 > $WDIR/$SEQ.eval.gff ;
      $BIN/gffsplitstrand.pl $WDIR/$SEQ.eval.gff ;
      } ;
    done ;
@

<<EVALUATIONS: INV-TBX files>>=
#
# Preparing Inv-SRs Files
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ODIR/annotation/refseq/$SEQ.eval" ;
      ###
      echo "# PREPARING TBLASTX INV-SRs on $CHR" 1>&2 ;
      TDIR="$ODIR/tblastx/$FTPTBXID/inv-sr" ;
      gawk 'BEGIN{OFS="\t";}
            ($7 ~ "+" && $1 !~ /^\#/) {
               $8="3"; $9="1"; print $0;
            }' $TDIR/$SEQ.gff > $TDIR/$SEQ.PRJ.fwd.gff
      gawk 'BEGIN{OFS="\t";}
            ($7 ~ "-" && $1 !~ /^\#/) {
               $8="3"; $9="1"; print $0;
            }' $TDIR/$SEQ.gff > $TDIR/$SEQ.PRJ.rev.gff
      $BIN/blast2gff -vg $TDIR/$SEQ.PRJ.fwd.gff | \
        gawk 'BEGIN{ OFS="\t"; }
              ($0 !~ /^[ \t]*$/ && $1 !~ /^\#/) { print $0,"1" }' \
              - > $TDIR/$SEQ.PRJeval.fwd.gff
      $BIN/blast2gff -vg $TDIR/$SEQ.PRJ.rev.gff | \
        gawk 'BEGIN{ OFS="\t"; }
              ($0 !~ /^[ \t]*$/ && $1 !~ /^\#/) { print $0,"1" }' \
              - > $TDIR/$SEQ.PRJeval.rev.gff
      } ;
    done ;
@

<<EVALUATIONS: getting eval summaries>>=
#
# Running Evaluations
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ODIR/annotation/refseq/$SEQ.eval" ;
      echo "# EVALUATING TBLASTX INV-SRs on $CHR" 1>&2 ;
      TDIR="$ODIR/tblastx/$FTPTBXID/inv-sr" ; MkDirs $TDIR/eval ;
      #
      cat > $TDIR/eval/$SEQ.summary <<EOT ;
#
# Evaluation summary results for SRs on Mmus SEQ[$SEQ] using INVTBX[HsapSQ-MmusDB]
# --> INV-TBX: Mmus vs Hsap homology projected from Hsap GP20011222 vs Mmus MGSCv3
#
EOT
      $BIN/runeval.pl $A_REFSEQ.fwd.gff $TDIR/$SEQ.PRJeval.fwd.gff \
                "${SEQ}::INVTBX[HsapSQ-MmusDB]->SRs::REFSEQ::FWD::invMmusSRs::.::." \
                >> $TDIR/eval/$SEQ.summary 2> $TDIR/eval/$SEQ.sr_refseq.fwd ;
      $BIN/runeval.pl $A_REFSEQ.rev.gff $TDIR/$SEQ.PRJeval.rev.gff \
                "${SEQ}::INVTBX[HsapSQ-MmusDB]->SRs::REFSEQ::REV::invMmusSRs::.::." \
                >> $TDIR/eval/$SEQ.summary 2> $TDIR/eval/$SEQ.sr_refseq.rev ;
      } ;
    done ;
#
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ODIR/annotation/refseq/$SEQ.eval" ;
      ###
      echo "# EVALUATING GENSCAN on $CHR" 1>&2 ;
      GDIR="$ODIR/annotation/genscan" ; MkDirs $GDIR/eval ;
      #
      # gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
      #          $GDIR/$SEQ.eval.gff > $GDIR/eval/$SEQ.eval.gff ;
      # $BIN/gffsplitstrand.pl $GDIR/eval/$SEQ.eval.gff ;
      #
      cat > $GDIR/eval/$SEQ.summary <<EOT ;
#
# Evaluation summary results for GENSCAN on SEQ[$SEQ]
# --> Mmus MGSCv3
#
EOT
      $BIN/runeval.pl $A_REFSEQ.fwd.gff $GDIR/$SEQ.eval.fwd.gff \
                "${SEQ}::MmusGENSCAN::REFSEQ::FWD::GENSCAN::GP::." \
                >> $GDIR/eval/$SEQ.summary 2> $GDIR/eval/$SEQ.sr_refseq.fwd ;
      $BIN/runeval.pl $A_REFSEQ.rev.gff $GDIR/$SEQ.eval.rev.gff \
                "${SEQ}::MmusGENSCAN::REFSEQ::REV::GENSCAN::GP::." \
                >> $GDIR/eval/$SEQ.summary 2> $GDIR/eval/$SEQ.sr_refseq.rev ;
      } ;
    done ;
#
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ODIR/annotation/refseq/$SEQ.eval" ;
      ###
      echo "# EVALUATING FGENES on $CHR" 1>&2 ;
      GDIR="$ODIR/annotation/fgenes" ; MkDirs $GDIR/eval ;
      #
      # gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
      #          $GDIR/gff/$SEQ > $GDIR/eval/$SEQ.eval.gff ;
      # $BIN/gffsplitstrand.pl $GDIR/eval/$SEQ.eval.gff ;
      #
      cat > $GDIR/eval/$SEQ.summary <<EOT ;
#
# Evaluation summary results for FGENES on SEQ[$SEQ]
# --> Mmus MGSCv3
#
EOT
      $BIN/runeval.pl $A_REFSEQ.fwd.gff $GDIR/$SEQ.eval.fwd.gff \
                "${SEQ}::MmusFGENES::REFSEQ::FWD::FGENES::GP::." \
                >> $GDIR/eval/$SEQ.summary 2> $GDIR/eval/$SEQ.sr_refseq.fwd ;
      $BIN/runeval.pl $A_REFSEQ.rev.gff $GDIR/$SEQ.eval.rev.gff \
                "${SEQ}::MmusFGENES::REFSEQ::REV::FGENES::GP::." \
                >> $GDIR/eval/$SEQ.summary 2> $GDIR/eval/$SEQ.sr_refseq.rev ;
      } ;
    done ;
#
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ODIR/annotation/refseq/$SEQ.eval" ;
      ###
      echo "# EVALUATING GENEID on $CHR" 1>&2 ;
      GDIR="$ODIR/geneid/$FTPTBXID" ;
      #
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
               $GDIR/gff/$SEQ > $GDIR/eval/$SEQ.eval.gff ;
      $BIN/gffsplitstrand.pl $GDIR/eval/$SEQ.eval.gff ;
      #
      cat > $GDIR/eval/$SEQ.summary <<EOT ;
#
# Evaluation summary results for GENEID on SEQ[$SEQ]
# --> Mmus MGSCv3
#
EOT
      $BIN/runeval.pl $A_REFSEQ.fwd.gff $GDIR/eval/$SEQ.eval.fwd.gff \
                "${SEQ}::MmusGENEID::REFSEQ::FWD::GENEID::1.1::." \
                >> $GDIR/eval/$SEQ.summary 2> $GDIR/eval/$SEQ.sr_refseq.fwd ;
      $BIN/runeval.pl $A_REFSEQ.rev.gff $GDIR/eval/$SEQ.eval.rev.gff \
                "${SEQ}::MmusGENEID::REFSEQ::REV::GENEID::1.1::." \
                >> $GDIR/eval/$SEQ.summary 2> $GDIR/eval/$SEQ.sr_refseq.rev ;
      } ;
    done ;
#
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ODIR/annotation/refseq/$SEQ.eval" ;
      ###
      echo "# EVALUATING SGP on $CHR" 1>&2 ;
      SDIR="$ODIR/sgp/$FTPTBXID" ;
      #
      gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
               $SDIR/gff/$SEQ > $SDIR/eval/$SEQ.eval.gff ;
      $BIN/gffsplitstrand.pl $SDIR/eval/$SEQ.eval.gff ;
      #
      cat > $SDIR/eval/$SEQ.summary <<EOT ;
#
# Evaluation summary results for SGP on SEQ[$SEQ]
# --> Mmus MGSCv3 x Hsap GP20011222 homology (invTBX)
#
EOT
      $BIN/runeval.pl $A_REFSEQ.fwd.gff $SDIR/eval/$SEQ.eval.fwd.gff \
                "${SEQ}::MmusSGP+invTBX[HsapSQ-MmusDB]::REFSEQ::FWD::SGP::1.1::." \
                >> $SDIR/eval/$SEQ.summary 2> $SDIR/eval/$SEQ.sr_refseq.fwd ;
      $BIN/runeval.pl $A_REFSEQ.rev.gff $SDIR/eval/$SEQ.eval.rev.gff \
                "${SEQ}::MmusSGP+invTBX[HsapSQ-MmusDB]::REFSEQ::REV::SGP::1.1::." \
                >> $SDIR/eval/$SEQ.summary 2> $SDIR/eval/$SEQ.sr_refseq.rev ;
      } ;
    done ;
#
# SGP + RefSeq
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ADIR="$MUSHU/chr$CHR" ;
      A_REFSEQ="$ADIR/annotation/refseq/$SEQ.eval" ;
      ###
      echo "# EVALUATING SGP+RefSeq on $CHR" 1>&2 ;
      SDIR="$ADIR/sgp/$MMHS_REFSEQ" ;
      EVIDS="$SDIR/evids" ;
      ODIR="$SDIR/eval" ;
      #
   #   MkDirs $ODIR ;
   #   gawk '$3~/^(Single|First|Internal|Terminal)$/ {print $0}' \
   #           $EVIDS/$SEQ.sgp+refseq.eval.gff \
   #         > $ODIR/$SEQ.sgp+refseq.eval.gff ;
   #   $BIN/gffsplitstrand.pl $ODIR/$SEQ.sgp+refseq.eval.gff ;
      #
      cat > $ODIR/$SEQ.sgp+refseq.summary <<EOT ;
#
# Evaluation summary results for SGP on SEQ[$SEQ]
# --> Mmus MGSCv3 x Hsap GP20011222 homology (invTBX) + Mmus RefSeq evidences
#
EOT
      $BIN/runeval.pl $A_REFSEQ.fwd.gff $ODIR/$SEQ.sgp+refseq.eval.fwd.gff \
          "${SEQ}::MmusSGP+invTBX[HsapSQ-MmusDB]+RefSeq::REFSEQ::FWD::SGPrefseq::1.1::." \
        >> $ODIR/$SEQ.sgp+refseq.summary 2> $ODIR/$SEQ.sgp+refseq.sr_refseq.fwd ;
      $BIN/runeval.pl $A_REFSEQ.rev.gff $ODIR/$SEQ.sgp+refseq.eval.rev.gff \
          "${SEQ}::MmusSGP+invTBX[HsapSQ-MmusDB]+RefSeq::REFSEQ::REV::SGPrefseq::1.1::." \
        >> $ODIR/$SEQ.sgp+refseq.summary 2> $ODIR/$SEQ.sgp+refseq.sr_refseq.rev ;
      } ;
    done ;
#
# WHOLE SUMMARY (MOUSE)
gawk '$1!~/^\#/ {print $1, $2}' $MUSHU/seqid_list | \
  while read CHR SEQ ;
    do {
      ODIR="$MUSHU/chr$CHR" ;
      echo "### WORKING ON $SEQ : MOUSE" ;
      # fDIR="$ODIR/annotation/fgenes" ;
      nDIR="$ODIR/annotation/genscan" ;
      GDIR="$ODIR/geneid/$FTPTBXID" ;
      TDIR="$ODIR/tblastx/$FTPTBXID/inv-sr" ;
      SDIR="$ODIR/sgp/$FTPTBXID" ;
      SRDIR="$ODIR/sgp/$MMHS_REFSEQ" ;
      #
      # cat $fDIR/eval/$SEQ.summary \
      #     $nDIR/eval/$SEQ.summary \
      cat $nDIR/eval/$SEQ.summary \
          $GDIR/eval/$SEQ.summary \
          $TDIR/$SEQ.summary      \
          $SDIR/eval/$SEQ.summary \
          $SRDIR/eval/$SEQ.sgp+refseq.summary ; 
    };
  done > $MUSHU/evaluations/evaluation.sgp+refseq.summary ;
#
enscript -1rGjf Courier5 -M A4 $MUSHU/evaluations/evaluation.sgp+refseq.summary ;
# $BIN/process_eval.pl -T "REFSEQ ENSEMBL" \
#                      -P "FGENES GENSCAN GENEID invMmusSRs SGP" \
$BIN/process_eval.pl -T "REFSEQ" \
                     -P "GENSCAN GENEID invMmusSRs SGP SGPrefseq" \
                     -as $MUSHU/evaluations/evaluation.sgp+refseq.summary \
                       > $MUSHU/evaluations/evaluation.sgp+refseq_prog.summary ;
$BIN/process_eval.pl -T "REFSEQ" \
                     -P "GENSCAN GENEID invMmusSRs SGP SGPrefseq" \
                     -tas $MUSHU/evaluations/evaluation.sgp+refseq.summary \
                        > $MUSHU/evaluations/evaluation.sgp+refseq_test.summary ;
#
enscript -1rGjf Courier5 -M A4 $MUSHU/evaluations/evaluation.sgp+refseq.summary ;
enscript -1rGjf Courier5 -M A4 $MUSHU/evaluations/evaluation.sgp+refseq_test.summary ;
@ 

<<>>=
# New Evaluation Format
#
### GENE NUMBER
MUSHU="/projects/M.musculus/20020411.MGSCv3"
# refseq
gawk '{print $1,$2}' $MUSHU/seqid_list | while read CHR SEQ; do { grep -v '^#' $MUSHU/chr$CHR/annotation/refseq/$SEQ.eval.report | gawk 'BEGIN{ chr=ARGV[1]; ARGV[1]=""; }{ printf "%12s %8d\n", chr, $1 }' "$SEQ" - ; }; done > $MUSHU/evaluations/Mmus_refseq_MGSCv3.genes_by_seq ;
( echo "### NUMBER OF REAL GENES ###"; echo "###-> REFSEQ from Mmus MGSC v3 assembly (20020411)"; gawk 'BEGIN{ printf "\n%12s %8s\n\n", "CHR_SEQNAME","#Genes","Score" }'; gawk '$1!~/random$/ { g+=$2; print $0 }END{ printf "%12s %8d  CHRs TOTAL\n\n", "",g; }' $MUSHU/evaluations/Mmus_refseq_MGSCv3.genes_by_seq; gawk '$1~/random$/ { g+=$2; print $0 }END{ printf "%12s %8d  CHRs_RANDOM TOTAL\n\n", "",g; }' $MUSHU/evaluations/Mmus_refseq_MGSCv3.genes_by_seq ) | gawk '$0~/TOTAL$/ { g+=$1 } { print $0 } END{ printf "%12s %8d  GRAND TOTAL\n", "",g; }' > $MUSHU/evaluations/Mmus_refseq_MGSCv3.genes_by_seq.report ;
# ensembl
gawk '{print $1,$2}' $MUSHU/seqid_list | while read CHR SEQ; do { grep -v '^#' $MUSHU/chr$CHR/annotation/ensembl/$SEQ.report | gawk 'BEGIN{ chr=ARGV[1]; ARGV[1]=""; }{ printf "%12s %8d\n", chr, $1 }' "$SEQ" - ; }; done > $MUSHU/evaluations/Mmus_ensembl_MGSCv3.genes_by_seq ;
( echo "### NUMBER OF REAL GENES ###"; echo "###-> ENSEMBL from Mmus MGSC v3 assembly (20020411)"; gawk 'BEGIN{ printf "\n%12s %8s\n\n", "CHR_SEQNAME","#Genes","Score" }'; gawk '$1!~/random$/ { g+=$2; print $0 }END{ printf "%12s %8d  CHRs TOTAL\n\n", "",g; }' $MUSHU/evaluations/Mmus_ensembl_MGSCv3.genes_by_seq; gawk '$1~/random$/ { g+=$2; print $0 }END{ printf "%12s %8d  CHRs_RANDOM TOTAL\n\n", "",g; }' $MUSHU/evaluations/Mmus_ensembl_MGSCv3.genes_by_seq ) | gawk '$0~/TOTAL$/ { g+=$1 } { print $0 } END{ printf "%12s %8d  GRAND TOTAL\n", "",g; }' > $MUSHU/evaluations/Mmus_ensembl_MGSCv3.genes_by_seq.report ;
# genscan
gawk '{print $1,$2}' $MUSHU/seqid_list | while read CHR SEQ; do { grep -v '^#' $MUSHU/chr$CHR/annotation/genscan/$SEQ.report | gawk 'BEGIN{ chr=ARGV[1]; ARGV[1]=""; }{ printf "%12s %8d\n", chr, $1 }' "$SEQ" - ; }; done > $MUSHU/evaluations/Mmus_genscan_MGSCv3.genes_by_seq ;
( echo "### NUMBER OF PREDICTED GENES ###"; echo "###-> GENSCAN from Mmus MGSC v3 assembly (20020411)"; gawk 'BEGIN{ printf "\n%12s %8s\n\n", "CHR_SEQNAME","#Genes","Score" }'; gawk '$1!~/random$/ { g+=$2; print $0 }END{ printf "%12s %8d  CHRs TOTAL\n\n", "",g; }' $MUSHU/evaluations/Mmus_genscan_MGSCv3.genes_by_seq; gawk '$1~/random$/ { g+=$2; print $0 }END{ printf "%12s %8d  CHRs_RANDOM TOTAL\n\n", "",g; }' $MUSHU/evaluations/Mmus_genscan_MGSCv3.genes_by_seq ) | gawk '$0~/TOTAL$/ { g+=$1 } { print $0 } END{ printf "%12s %8d  GRAND TOTAL\n", "",g; }' > $MUSHU/evaluations/Mmus_genscan_MGSCv3.genes_by_seq.report ;
# geneid
gawk '{print $1,$2}' $MUSHU/seqid_list | while read CHR SEQ; do { head -4 $MUSHU/chr$CHR/geneid/20020425/out/$SEQ | tail -1 | gawk 'BEGIN{ chr=ARGV[1]; ARGV[1]=""; }{ printf "%12s %8d %12.3f\n", chr,$5,$9; }' "$SEQ" ; }; done > $MUSHU/evaluations/Mmus_geneid_MGSCv3.genes_by_seq ;
( echo "### NUMBER OF PREDICTED GENES ###"; echo "###-> GENEID on Mmus MGSC v3 assembly (20020411)"; gawk 'BEGIN{ printf "\n%12s %8s %12s\n\n", "CHR_SEQNAME","#Genes","Score" }'; gawk '$1!~/random$/ { g+=$2; s+=$3; print $0 }END{ printf "%12s %8d %12.3f  CHRs TOTAL\n\n", "",g,s; }' $MUSHU/evaluations/Mmus_geneid_MGSCv3.genes_by_seq; gawk '$1~/random$/ { g+=$2; s+=$3; print $0 }END{ printf "%12s %8d %12.3f  CHRs_RANDOM TOTAL\n\n", "",g,s; }' $MUSHU/evaluations/Mmus_geneid_MGSCv3.genes_by_seq ) | gawk '$0~/TOTAL$/ { g+=$1; s+=$2 } { print $0 } END{ printf "%12s %8d %12.3f  GRAND TOTAL\n", "",g,s; }' > $MUSHU/evaluations/Mmus_geneid_MGSCv3.genes_by_seq.report ;
# sgp
gawk '{print $1,$2}' $MUSHU/seqid_list | while read CHR SEQ; do { head -4 $MUSHU/chr$CHR/sgp/20020425/out/$SEQ | tail -1 | gawk 'BEGIN{ chr=ARGV[1]; ARGV[1]=""; }{ printf "%12s %8d %12.3f\n", chr,$5,$9; }' "$SEQ" ; }; done > $MUSHU/evaluations/Mmus_sgp_MGSCv3.genes_by_seq ;
( echo "### NUMBER OF PREDICTED GENES ###"; echo "###-> SGP on Mmus MGSCv3 assembly (20020411)"; echo "###       + invTBX against Hsap UCSC-GoldenPath assembly (20011222-NCBI28)"; gawk 'BEGIN{ printf "\n%12s %8s %12s\n\n", "CHR_SEQNAME","#Genes","Score" }'; gawk '$1!~/random$/ { g+=$2; s+=$3; print $0 }END{ printf "%12s %8d %12.3f  CHRs TOTAL\n\n", "",g,s; }' $MUSHU/evaluations/Mmus_sgp_MGSCv3.genes_by_seq; gawk '$1~/random$/ { g+=$2; s+=$3; print $0 }END{ printf "%12s %8d %12.3f  CHRs_RANDOM TOTAL\n\n", "",g,s; }' $MUSHU/evaluations/Mmus_sgp_MGSCv3.genes_by_seq ) | gawk '$0~/TOTAL$/ { g+=$1; s+=$2 } { print $0 } END{ printf "%12s %8d %12.3f  GRAND TOTAL\n", "",g,s; }' > $MUSHU/evaluations/Mmus_sgp_MGSCv3.genes_by_seq.report ;
# sgp+refseq
gawk '{print $1,$2}' $MUSHU/seqid_list | while read CHR SEQ; do { MD="$MUSHU/chr$CHR/sgp/20020411.MGSCv3-20011222.UCSCgp+RefSeqEvids"; evis=`grep 'Annotation' $MD/evids/$SEQ.evids.gff | wc | gawk '{print $1}' `; head -4 $MD/out/$SEQ | tail -1 | gawk 'BEGIN{ chr=ARGV[1]; evid=ARGV[2]; ARGV[1]=ARGV[2]=""; }{ printf "%12s %8d %12.3f\n", chr,$5 - evid,$9; }' "$SEQ" $evis - ; }; done > $MUSHU/evaluations/Mmus_sgp_MGSCv3+RefSeq.genes_by_seq ;
( echo "### NUMBER OF PREDICTED GENES ###"; echo "###-> SGP on Mmus MGSCv3 assembly (20020411)"; echo "###       + invTBX against Hsap UCSC-GoldenPath assembly (20011222-NCBI28)"; echo "###       + RefSeq Mmus annotations"; gawk 'BEGIN{ printf "\n%12s %8s %12s\n\n", "CHR_SEQNAME","#Genes","Score" }'; gawk '$1!~/random$/ { g+=$2; s+=$3; print $0 }END{ printf "%12s %8d %12.3f  CHRs TOTAL\n\n", "",g,s; }' $MUSHU/evaluations/Mmus_sgp_MGSCv3+RefSeq.genes_by_seq; gawk '$1~/random$/ { g+=$2; s+=$3; print $0 }END{ printf "%12s %8d %12.3f  CHRs_RANDOM TOTAL\n\n", "",g,s; }' $MUSHU/evaluations/Mmus_sgp_MGSCv3+RefSeq.genes_by_seq ) | gawk '$0~/TOTAL$/ { g+=$1; s+=$2 } { print $0 } END{ printf "%12s %8d %12.3f  GRAND TOTAL\n", "",g,s; }' > $MUSHU/evaluations/Mmus_sgp_MGSCv3+RefSeq.genes_by_seq.report ;
# summarizing
( cat $MUSHU/evaluations/Mmus_refseq_MGSCv3.genes_by_seq.report; echo ""; echo "";  cat $MUSHU/evaluations/Mmus_ensembl_MGSCv3.genes_by_seq.report ; echo ""; echo "";  cat $MUSHU/evaluations/Mmus_genscan_MGSCv3.genes_by_seq.report ; echo ""; echo "";  cat $MUSHU/evaluations/Mmus_geneid_MGSCv3.genes_by_seq.report; echo "";  echo "";  cat $MUSHU/evaluations/Mmus_sgp_MGSCv3.genes_by_seq.report; echo "";  echo "";  cat $MUSHU/evaluations/Mmus_sgp_MGSCv3+RefSeq.genes_by_seq.report ) > $MUSHU/evaluations/Mmus_ALL_MGSCv3.genes_by_seq.report ;
#
enscript --columns=3 -Gjf Courier5 -M A4 $MUSHU/evaluations/Mmus_ALL_MGSCv3.genes_by_seq.report ;
#
perl -ne 'BEGIN{ $prog="???"; print STDOUT "PROG CLASS SEQ GENES\n"; } next if /^\s+$/o; /^\#\#\#->\s+(.*?)\s+/o && ($prog=$1, next); next if /^\#/o; next unless /^\s*chr/; chomp; $_ =~ s/^\s+//o; @f=split /\s+/og; $type="ASSEMBLED"; $f[0] =~ s/_random$//o && ($type="RANDOM"); printf STDOUT "%s %s %s %s\n", $prog,$type,@f[0,1];' $MUSHU/evaluations/Mmus_ALL_MGSCv3.genes_by_seq.report > $MUSHU/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq.tbl # | gawk '{ tots[$1]+=$4 }END{for (i in tots) print i"->"tots[i] }'
#
$BIN/splittbls.pl "ASSEMBLED" $MUSHU/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq.tbl > $MUSHU/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq_ASM.tbl 
# $BIN/splittbls.pl "RANDOM" $MUSHU/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq.tbl > $MUSHU/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq_RND.tbl 
#
# drawing histograms with R
def.par <- par()# save default, for resetting...
plot.new()
A <- read.table("/projects/M.musculus/20020411.MGSCv3/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq_ASM.tbl", header = TRUE, row.names=1, as.is = FALSE, na.strings = "nan")
# R <- read.table("/projects/M.musculus/20020411.MGSCv3/evaluations/r-plots/ALL_MGSCv3.genes_by_seq_RND.tbl", header = TRUE, row.names=1, as.is = FALSE, na.strings = "nan")

postscript(file="/projects/M.musculus/20020411.MGSCv3/evaluations/r-plots/Mmus_ALL_MGSCv3.genes_by_seq.ps", paper="a4", horizontal=TRUE) 
# op <- par(mfrow=c(2,1)) # another way to produce a table of figures
nf <- layout(matrix(c(1,2),2,1,byrow=TRUE), widths=c(lcm(25),lcm(25)), heights=c(lcm(10.5),lcm(8.5)), respect=TRUE)
# layout.show(nf)
par(ps = 8, bg = "white", bty = "o", font = 2, font.axis = 1, cex.lab = 0.5, las = 2, mar = c(cm(0.75),cm(0.75),cm(0.75),cm(0.75)), mgp = c(3.25,1.5,0), adj = 0.5)
# mgp: The margin line for the axis title, axis labels and axis line. The default is c(3, 1, 0)
barplot(t(A), beside = TRUE, col = rainbow(5), ylim = c(0, 5900))
title(ylab="Number of Genes", adj = 0.5, font = 3, cex.lab = 1.75)
text(65, 5600, "M.musculus MGSC Assembly", font = 2, adj = 0.5, cex = 2.5)
text(65, 5100, "( 11 Apr, 2001 - Version 3 )", font = 2, adj = 0.5, cex = 1.75)
text(65, 4500, "Assembled Chromosomes", font = 2, adj = 0.5, cex = 2)
legend(110, 5800, colnames(A), col = rainbow(5), cex = 1, pch = 16)
#
# barplot(t(R), beside = TRUE, col = rainbow(5), ylim = c(0, 700))
# title(ylab="Number of Genes", adj = 0.5, font = 3, cex.lab = 1.75)
# text(65, 650, "Random Fragments", font = 2, adj = 0.5, cex = 2)
# legend(120, 650, colnames(R), col = rainbow(5), cex = 1, pch = 16)
# par(op) # another way to produce a table of figures
dev.off()# closing PostScript device
par(def.par)#- reset to default

@ 

\end{document}
