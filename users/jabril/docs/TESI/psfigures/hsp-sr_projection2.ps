%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: SR.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o SR.ps SR.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.07.12:1324
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro
%!
% PostScript prologue for pst-grad.tex.
% Version 97, 93/05/12
% For distribution, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.
%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).
%
% Syntax:
%   R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill

/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBlue ED
  /LastGreen ED
  /LastRed ED
  /FirstBlue ED
  /FirstGreen ED
  /FirstRed ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastRed FirstRed add 2 div
  LastGreen FirstGreen add 2 div
  LastBlue FirstBlue add 2 div
  setrgbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
    MidLine { GradientLoop } repeat
  } if
  MidLine NumLines lt
  {
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoop } repeat
  } if
} def
/GradientLoop {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Red Green Blue setrgbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Blue Blue BlueIncrement add def
  /Green Green GreenIncrement add def
  /Red Red RedIncrement add def
} def

end
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (SR.dvi)
@start
%DVIPSBitmapFont: Fa cmmi12 12 4
/Fa 4 84 df<91B6D8E003B61280A3020001E0C70003EB8000DB7F806E48C7FC03FF1503
A293C85BA219075C4B5EA2190F14034B5EA2191F14074B5EA2193F140F4B5EA2197F141F
4B5EA219FF143F92B8C8FCA3DA7FC0C712014B5DA2180314FF92C85BA218075B4A5EA218
0F13034A5EA2181F13074A5EA2183F130F4A5EA2187F131F4A5EA2013F16FFA24A93C9FC
D9FFE002037FB6D8E003B67EA351447CC351>72 D<91B712FEF0FFE019F802009039C000
0FFE6F48EB01FF03FF9138007F80F13FC093C8EA1FE0A24AEE0FF0A25D1AF81403A25DA2
1407F11FF05DA2020FEE3FE0A24B16C0197F021F1780F1FF004B4A5A4E5A023F4B5A4E5A
4BEC3FC006FFC7FC027FEC07FC92B612F018800380CAFC14FFA292CBFCA25BA25CA21303
A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CEBFFE0B612E0A345447CC33F>80
D<91B712F018FF19E002009039C0003FF86F48EB07FC03FFEC01FEF0007F93C8EA3F801A
C0F11FE05C5D1AF0A214035DA30207EE3FE05DA2F17FC0020F17804B15FF1A004E5A021F
4B5A4B4A5AF00FE04E5A023F037FC7FC4BEB03FCEF1FF092B612804A4AC8FC923980007F
80EF0FC0EF07F002FF6E7E92C77F1701845B4A1400A2170113035CA2170313075CA24D5A
130F5CA3011F18185CA2013F4C13381A304A6F1370D9FFE0020314E0B600E0ED01C00501
EB0380943900FE0F00CBEA3FFEF007F045467CC34A>82 D<9339FF8001800307EBF00303
3F13FC9239FF007E07DA01F8EB0F0FDA07E09038079F004A486DB4FC4AC77E023E804A5D
187E5C495A183C495AA213074A1538A3130F183080A295C7FC806D7E8014FF6D13E015FC
6DEBFFC06D14FC6E13FF6E14C0020F80020314F8EC003F03077F9238007FFE160F160370
7E8283A283A21206A4000E163EA2120C177E001E167CA25F5F003F15014C5A6D4A5A4C5A
486C4AC8FC6D143ED87CF85CD8787E495A3AF01FC00FE0D8E007B51280010149C9FC39C0
003FF039487BC53C>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmbxti10 12 6
/Fb 6 117 df<EC07FC91383FFF8049B5EAC7C049ECEFE0010F90380FFFF090261FF803
7F49487E49486C5B495A4849137F4815FF4890C75BA2485A5D001F5E5B123F5D007F5E5B
A25D00FF93C7FC5BA25D5E5BEF07C0031FEB0FE004FC13C0A25B171F033F148016F86C6C
017FEB3F0015FF003F0103147E6C6C5A270FFC3FEF5B6CB538C7FFF86C02035BC649C65B
D91FF0EB3F80332E75AC3B>97 D<EB07FC3807FFFE5AA25C7EEA003FA25CA2137FA25CA2
13FFA25CA25AA25CA25AA2EC87FC9138BFFF804890B512E0829138FE1FF89138F007FC48
496C7E02807F1400496D1380121FA25B5D123FA25BA2007F5CA25BA25D12FF491500A25D
5E5B5E153F5EA24B5A5B6D495A5E007F495B4A90C7FC6C6C485A001F495A9038F87FF86C
B512E000035C6C49C8FC38003FF0294675C435>I<EC03E0EC0FF0EC1FF8EC3FFCA2147F
A215F8A2EC3FF0EC1FE0EC0F8091C7FCADEB0FE0EB3FF8EBFFFE487FD803F81380EA07E0
485A01C113C0EA1F81A2EA3F01491380127E5B150012FEEA7C0F00005BA2131F5C133F5C
A2137F5C13FF5CA248147CECC0FE15FC5A1480EC81F8481301EC03F0A2EC07E0EA03FEEC
0FC0EC3F806CB512006C5BEB3FF8EB0FE01F4779C523>105 D<D93F80EB3FF0903AFFE0
01FFFE48D9F8076D7E486D48802807E3FE3FE07F3C0FC3FF7F007FF0018301FE133F001F
14F84B80D83F035B495B127F007E5C92C7FC49157F00FE5F007C5B1200011F15FF605CA2
013F5C605C5E017F5EA24A5BF001F001FF4AEB03F805FE13F05C161F489338FC07E0A24A
ED0FC017F848EF1F80F03F004A5D040F13FE70B45A91C76C5B6C486E13E0D800F8913800
7F803D2E79AC41>110 D<913801FFC0021F13FC027F13FF49B61280010701C113C0903A
0FFE003FE0D91FF8EB1FF0D97FF014F84948EB0FFC485B5C4816FE4890C7FC5A5B121F5B
123F161F127F5BA2163F12FF4915FCA2167F17F85B17F016FF17E05D17C04B1380007F16
005D4B5A6C6C495A001FEC3FF06C6CEBFFE02607FF075B6C90B5C7FC6C14FC6C6C13F001
0790C8FC2F2E75AC3B>I<143FEC7F8014FF4913C0A35B1580A35B1500A35B5CA3131F5C
007FB512FEB7FCA215FE7E39003FF800137F5CA313FF5CA35A5CA35A5CA35A91C7FCA35A
5B153E157F001F147E5B15FE15FC003FEB01F8EBF80315F0001FEB07E0EC0FC0EC1F8000
0FEB7F003807FFFE6C5B6C13F038003FC0204177BF26>116 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmbx12 12 19
/Fc 19 122 df<161E163FB3AF007FBB1280BC12C0A46C1A80C9003FCAFCB3AF161E4A4A
7ABD57>43 D<B9FC18F018FE727E19E0D8001F90C7000F7F05017F716C7E727E727E7213
80A21AC084A21AE0A91AC0A24E1380A21A00604E5A4E5A4D485A050F5B92B712C096C7FC
18FC18C092CBFCB3A7B712E0A543447DC34D>80 D<DAFFE0131C010701FE133C013F9038
FF807C90B6EAE0FC4815F9489038801FFF3907FC00014848EB007F4848143F4848140F49
1407007F15035B1601160012FF177CA27FA26D153C7F7F6D92C7FC6C7EEBFFE014FE6CEB
FFF015FF6C15E016FC6C816C6F7E6C826C826C6C81011F810107811300020F8014000307
7FED007F82040F1380828212F082A282A27EA218007EA26C5D6C5E6D14036D5D6D140701
F84A5A01FFEC3FF002F8EBFFE0486CB65AD8FC1F92C7FCD8F80714FC48C614F048010713
8031467AC43E>83 D<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1F
FC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F
13F19038FFFC01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B
4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC
322F7DAD36>97 D<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF00
03495A48494813805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7E
A3123F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC
03F86DB55A010F14C0010391C7FC9038003FF82A2F7CAD32>99 D<EE03FEED07FFA5ED00
1F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF9039FFF807FF48EBC0014890388000
7F4890C7123F4848141F49140F121F485AA3127F5BA212FFAC127FA37F123FA26C6C141F
A26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F01
0713F89026007FC0EBF80036467CC43E>I<EC3FF80103B57E010F14E0013F8090397FF8
3FF89039FFC007FC48496C7E48496C7E48486D1380485A001FED7FC05B003FED3FE0A212
7F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C
6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A010714F0010114
C09026001FFEC7FC2C2F7DAD33>I<EDFF80020F13E0027F13F049B512F849EB8FFC9039
0FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5
C601E0C7FCB3B0007FEBFFE0A527467DC522>I<DAFFE0137E010F9039FE03FF80013FEB
FF8F90B812C048D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F9238FF
0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07F
F04890B55A1680D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF80
17E06C826C16FC7E000382000F82D81FF0C77ED83FC014074848020113808248C9FC177F
A46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612
C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>I<EB7FC0B5FCA512037EB1ED07FE
92383FFF8092B512E002C114F89139C7F03FFC9138CF801F9139DF000FFE14DE14FC4A6D
7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<137C48B4FC4813804813C0A24813
E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA51846
7CC520>I<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>108
D<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512E002816E4880913D
87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C13
0F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>
I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F00039039
9F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1F
FC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000
078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F1700A46C6C4A
5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB5
5A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90387F807FB53881FFE0028313
F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E0
92C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B51287000314FF120F
381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E090C7FC13FE387F
FFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F020313E0140000
F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F009038F803FE90B55A
00FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A41307A2130FA2131F
A2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302F013C013
7F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE023407EBE2C>I<
B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E
1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378
EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D
14015D001F1303D83F805B387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F0
6CB45A6C5B000790CAFCEA01FC36407EAB3B>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmti12 24.88 5
/Fd 5 121 df[<1A1C1A3E1A7EA21AFC1901190319071AF8190F191F193FF17FF019FF60
604E13E0181F60604DB512C017075F177F4CB61280040F139F0303B55A033F13FC05F014
0017C04CC65A16F0031EC75B92C8FC18FFA261A25FA261A25FA261A25FA261A25FA261A2
5FA261A25FA296C7FCA25FA260A217FFA260A25EA260A25EA260A25EA260A25EA260A25E
A260A25EA295C8FCA25EA25FA216FFA25FA25DA25FA25DA25FA25DA25FA25DA25FA25DA2
5FA25DA294C9FC5DA292B5FC5C4A80027F14F8003FB912F04884A2BAFCA26C60>71
137 105 264 103 49 D<EF0FFF94B512E0040714F8043F14FE9339FFFC03FF03039039
E0007F80030F90C7EA3FC04B48EC1FE0DB7FF8EC0FF0DBFFE014074A4915F80207491403
4A90C8FC4A48ED01FC4A5A4A5A4A5A495B5B495B4B15034918F84990C9FC5B4A1607017F
18F04948160FF11FE05A4AEE3FC048F07F804A923801FF00484D5AF00FFC4849ED3FF894
3801FFE0050F5B484BB5C7FC4A90B512FC91B712E04DC8FC4816E004E0C9FC0280CBFCA2
5A91CCFCA45BA212FFA35BA8127F5BA21A301A781A7C6C6C18FC1901F103F81907001FF0
0FF01AE0000FF01FC06DEF7F80F1FF0000074D5A6D4C5A6CEF0FF86C6D4B5AF07FC06C6D
4B5A6D6C020390C7FC013FED0FFCD91FF8EC7FF06D6C903803FFE0902703FF803F90C8FC
6D90B512FC6D6C14E0021F91C9FC020113E0465D69DA5D>101 D<DA7F80923807FF8090
2603FFF0037F13F04901FC0203B512FE496D020F8090261FC1FF91263FFC077F49C66D90
267FC0007F017E6D6C4848C76C7E01FE9126E003FC8149DB07F06E7E48486E4848810003
023F4948141F496E48C87F177E48485DDB7FF9707E000FEDFBF849ECFFF05F001F5E5B92
B55A003F93C9FC90C7605E5C485D127E5E00FE49495E48635EA24A187FC7FC4C5FA24A18
FF645EA24A5F6493C9FC624A61A25D62027F61A24B5E6414FF624B95C8FCA24960634B16
7F63491CF808FF14014B5FA2494D15035114F05D61494FEB07E0A24B5D51EB0FC05BA292
C94AEB1F806149F33F0098C7FC4A70157EA2017F63654A1901734A5A01FF505A525A4A70
4A5A73D9807FC7FC97387FC1FE4A71B45A6D48715B4A050713E0011FCB000190C8FC655D
6FDA72>110 D<943807FF80057F13F80403B512FE040F6E7E93263FFE0113E0933AFFF0
007FF0030301C0EB1FF84B90C76C7EDB1FFE6E7EDB3FF86E7E4B486E13804B4816C04A49
8002074916E04A90C9EA7FF04A5A4A4817F84A48163FA24A4817FC495B5B494917FEA249
49161F4990CAFC1A3F4919FF495AA2495AA2485BA25A4A5F5AA2485BA2F2FFFE5A5CA261
481AFC5CA261481AF891CAFCA24F13F0A25B1BE000FF60A21BC0495F1B80611B00007F61
197F6219FF624E5BA2003F4D5B624E5B60001F96C7FC6D4C5A000F4D5A4E5A6C6C4C5A61
6C4C5B6C6D4A5BDD0FFEC8FC6C6D4A5A6D6C4A5A6D6CECFFE06D6C01035BD90FFE010F90
C9FC903A03FFC07FFC6D90B512F06D6C14C0021F49CAFC020113E0505D6ADA67>I<DCFF
C0EC03FF030701F8020F13F0033F01FE023F13FC4B6D91B6FC912601FF816D4801031380
913F03FC007FC003F8007FC0DA07F06D6C4848EB1FE0DA0FC090271FF00FC0133FDA3F80
6D6C4848EBFFF092C7D9FC3F5B027E4D5A4A912607FE7E5B494816FE49484C5B0107705A
5C495A011F4D15E05C013F4D15C091C870138049731300017E4DEB01FC01FE96C8FC495D
6112015B5F000395CAFC5BA25FCA5BA3177F60A317FF60A35E60A35E60A35E60A35EA260
A24C177C1CFC95C9FCA24C1601645F1B03047F5F1B07D801F84B5EEA07FCD81FFE02FF4C
5A487E515A484A173F99C7FCB549177E1BFE4B5F4902EF4B5A92260FC7FE4A5A49180749
D91F834B5A6C4890263F01FF4A5A01C0017E4C5A6C48496C6D01FEC8FC9026E003F89039
7FE003FC271FFC0FF090393FF81FF80007B5486DB512E06C4A01075CC691C7000149C9FC
D90FF89138003FF05C5D75DA5D>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmti12 12 5
/Fe 5 121 df<ED1FE0EDFFFC913803E03F91390F000F80023EEB07C00278EB03E05C49
48EB01F0495A495A91C713F85BEB0E0CEB1E0EEB1C061603013C15F01338A2020E130702
0C14E0141CD91C78EB0FC0D90FE0131F6D48148090C8EA3F00167E5E4B5A4B5AED0FE091
383FFF804A48C7FC15F8EC007E151F6F7E6F7E82150382A482A34B5A121FEA7F80A2150F
48C75BA2484A5A12F800E04A5AA24BC7FC007014FE5D0078495A0038495A003CEB0FC06C
495A260780FEC8FC3803FFF038007F802D4477C132>51 D<EC0FE0EC7FF8903801F83E90
3807C00F90391F800780EB3F00017E14C0491303485A48481307000715805B000F140F48
4814005D4848133E15FCEC07F0007FEBFFC0D9FFFEC7FC14C090C9FC5A5AA55AA4ED0180
ED03C0007CEC0780A2007EEC0F00003E141E157C6C14F06CEB03E03907800F802603C07E
C7FC3801FFF838003FC0222D75AB2D>101 D<D801F0EB0FE0D803FCEB7FF83A071E01F0
3E3A0E0F03C01F001ED987001380001C018E130F003C139C003801B814C014F838781FF0
00705BA25C00F049131FD8E03F158091C7FC1200163F491500137EA25E01FE147E5B16FE
5E12014913015E170F00030203130E4914F0A20307131E0007EDE01C5B173CEEC038000F
167849157017E0ED03C1001FEDE3C049903801FF000007C8127C302D78AB37>110
D<EC0FE0EC7FFC903801F83E903907E00F8090390F8007C0EB1F00017EEB03E04914F0A2
48481301484814F81207485AA2485AA2485A1503127F90C7FCA215074815F05AA2150F16
E05AED1FC0A21680153F16005D157E5D007C495A007E495A003E5C4A5A6CEB1F80260F80
3EC7FC3807C0FC3801FFF038003F80252D75AB32>I<02F8133FD907FEEBFFE0903A0F0F
83C0F0903A1C07C780F890393803CF03017013EE01E0EBFC07120101C013F8000316F001
80EC01C000074AC7FC13001407485C120EC7FC140F5DA3141F5DA3143F92C8FCA34AEB03
C01780147EA202FEEB0700121E003F5D267F81FC130E6E5BD8FF83143CD903BE5B26FE07
9E5B3A7C0F1F01E03A3C1E0F83C0271FF803FFC7FC3907E000FC2D2D7CAB2D>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmti7 6 5
/Ff 5 121 df<EB07E0EB1FF8EB383CEB700EEBC00F48487E1388D8030C1380A21206A2
390C180F00A21330EB601E3807C03C495AC75A495AEB0380010FC7FC133C13F0EA01C048
5A38060003485B48130648130E383FE03C387FFFF800605B38C03FE0EB0F8019227BA01E
>50 D<137E3801FF80380781C0EA0E005A5A3878018038700F00EAFFFE13F000F0C7FC5A
A41440007013C0EB0380383C1F00EA1FFCEA07E0121579941B>101
D<381E01F8383F87FC3863DE1EEBF80E38C3F00F13E013C00007131E1380A348485AA2EC
78201530001E146014F015C0EC718048EB7F000018131E1C157B9421>110
D<EB3F80EBFFE03803E0F038078078380E0038001E133C5AA25AA3481378A2147014F000
7013E0EB01C038380380381C0F00EA0FFCEA03F016157A941E>I<3803E078380FF9FC38
1C3F8E38381F0E38301E1E1260140C38003C00A45BA214040070130638F0F00CA200E013
1838E1B870387F1FE0383E0F8017157C941B>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmti12 20.74 6
/Fg 6 121 df<19E0A2180118031807A2F00FC0181F183F187FF0FF805F5F5F051F1300
5F94B5FC5E04075B161FEEFFDF030713BF913A01FFFE3FFC4A13FC16E04AEB807F912603
FC005B91C8FCA217FF60A35E60A35E60A35E60A35E95C7FCA35E5FA3163F5FA3167F5FA3
16FF5FA35D5FA35D5FA35D5FA35D94C8FCA35D5EA3153F5EA3157F5EA315FF5EA35C5EA3
5C5EA25CA25E4A7F5C49B512F8007FB812C084A2B9FC6C5F3B736DF256>49
D<F0FFE0050F13FC053FEBFF8094B612E0040301807F933A07F8001FF8DC0FE0EB07FCDC
1F806D7E047FC76C7E04FE6E1380DB01F816C04B48ED7FE04C153F4B4816F04B5A031FEE
1FF84BC9FC033E17FC5D15FC5D0201D901C015FEEDF003DA03E07F1601EC07C08391380F
8000A2141F92C7FC5C023E0101153F5F147E147C0403157F02FC4A15FC5C16074D14FF01
01020F16F84A91C8FC4C5C041E16F0163E043C4A13E0167C4C4A13C04B484A13804B5ADB
0FC04A1300902700F83F805D91B5C8485A6E484B5ADA3FF84B5ADA0FE05E91C9485B4E5B
4E90C7FC4E5A4E5A4E5AF07FE04E5A05035B4D48C8FC4D5AEF3FF04D5AEFFF80040390C9
FCEE0FFCEE1FF0EE7FE0923801FF804B48CAFCED0FFCED1FF0ED3FC0EDFF804A48CBFC4A
5AEC07F04A5A4A48160E4A48161F4ACAFC02FC5F4948173E13034948177E5C49485F495A
49CA120162017E1703494D5AA248484D5A49171F2603FFFE4C5ADAFFF0157F4802FF4A48
5A04F01307260FF01F9026FFC01F90C7FCD9E00391B55A4848C6FC496D5D48C7001F5D6F
5D003E02035D007E6E5D007C6E5D043F91C8FC040F13FC00FC03035B00789238007FC04F
7773F256>I<EE1FFC4BB57E030714E0033F809239FFF80FF84A9038C001FC020790C77E
DA0FFC147EDA3FF8147F4A48804A481580490180141F5B4990C8FC495A495A133F4A153F
4948160013FF48495D187E484915FE6048160148494A5AEF0FF091C8485A48EE7FC09338
03FF8048DB3FFEC7FC49903807FFF890B712E017804803F8C8FC4BC9FC01FCCBFCA212FF
5BA45BA65BA61803F00780F00FC0007F1880181FF03F006C6C167E604D5A001F4C5A6D4B
5A000FEE1FC04D5A6C6C03FFC7FC6C6C4A5A0001ED07FC6C6CEC3FF0D97FC0EBFFC09026
3FF00F5B6DB548C8FC6D14F0010314809026003FF8C9FC3A4E6DCB4D>101
D<D903FCED3FF0D90FFF913803FFFE4901C0010F6D7E496D013F14E090267E1FF090397F
E07FF0903DFC0FF801FF001FF82601F807D903F86D7E01F06D48481307D803E0DA0FC080
6F485AD807C04AC76C7E167E000F5D01805C6F5A121F01005C4A5B5A003E5D6193C8FC00
7E495A127C5D00FC6048013F5F00785CC7FC191F027F5F5DA2193F02FF5F5D197F625B5D
19FF625B4B5C62A2495E92C85CA2604995380003E04A5D611B07011F041F15C04A5EA206
3F140F013F4D14805CF31F004E5A017F614A183E4F137E1B7C01FF19FC4A60063F495A1A
0348624A031F495AF21F8095260FF07FC7FC4A923807FFFE91C96C5B6C48040013F0017C
EF3FC0534E72CB5F>110 D<EE07FF047F13E04BB512F8030F14FE92391FFE03FF92267F
F00013C0912601FFC0EB3FE04A90C76C7E4A4881DA1FFC140FDA3FF06E7E4A48814A4814
034983495B4990C814804A81130F494817C0133F495A5C13FF5C4819E05A5C5A4A5D5AA2
91C9FC4819C0605A5BA260007F19805BA26000FF19005BA24E5AA25B4E5AA26118FF615F
61495F5F616C6C4B90C7FC5F60003F4C5A4D5A606C6C4B5A4D5A000F4B5B6D4A90C8FC00
074B5A6C6C4A5A6C6CEC3FF86C6DEB7FE0903A7FE003FFC090263FF80F90C9FC6DB512FC
010714F0010114809026001FF8CAFC434E6ECB56>I<DB1FF0EC1FF0DBFFFEECFFFE0203
6D49EBFF804ADAC00314C0913D0FF03FE007F03FE0913D3FC01FF00FC007F0913B7F000F
F81F0002FC0107013EEB1FF849486E48133F4A010301FC137F49486E4813FF010715FF49
485D5C011F4C14F091C7FC013E4C14E0017EF07FC0017CF03F004E90C7FC13FC495C0001
94C9FC5BA25E00035E6C5AC9FC161F5FA3163F5FA3167F5FA316FF5FA35D5FA35D1A3E5F
A24B167E1A7C94C8FC1AFC4B5EA2D807E04A4A5A487E486C011F1503486C60007F023F4B
5A190F624848017F4BC7FC03FD5D49D9F9FF147E9026E001F05D267FC0036E485A902780
07E07F495A003F903B0FC03FC00FE03D1FE03F801FF07FC06CB5486CB55A6C496D49C8FC
000101F8010113F826003FE09038007FC04D4E78CB4D>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmr8 8 7
/Fh 7 56 df<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
>49 D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC
14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A49
5A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FC
A21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F
1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015
C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB
3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01
BE1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E120C
5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB01
80380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F
801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E000
6014C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<
EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091
C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814
E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F0038
03C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A215F05A15E039
700001C000601480140348EB0700140E140CC7121C5C143014705C495AA2495AA249C7FC
A25B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmsy8 8 1
/Fi 1 1 df<B812C0A32A037A9137>0 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmmi10 10.95 2
/Fj 2 116 df<D907C013FE903A0FF003FF80903A1C7C0F07E0903A383C1C03F0903A78
3E7801F80170EBF0009026F03FE013FC01E05B4B13FE0001017F147E01C090C7FC147E17
FF000313FEA2C75AA201015C17FE5CA20103140317FC5CA20107EC07F8A24A14F0160F01
0F15E0161F17C0EE3F80011F15006E137E5E9138B801F890393FBC03E091389E0FC0DA07
FFC7FCEC01F849C9FCA2137EA213FEA25BA21201A25BA21203A2B512E0A3303A84A72E>
112 D<EC1FC0ECFFF8903803E03C903807800E90381E0007168049130F49131F153FA201
F81400A2151C6D90C7FC7FEBFFE014FE90387FFFC06D7F6D13F86D7F13039038001FFE14
031400157E000C143E123F487EA248C7123CA25D12FC00F05C0070495A0078495A6C495A
260F803EC7FC3803FFF838007FC021297CA72B>115 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr10 10.95 14
/Fk 14 84 df<B512FEA617067F961E>45 D<EB01FE90380FFFC090383F03F090387C00
F849137C48487F48487F4848EB0F80A2000F15C04848EB07E0A3003F15F0A290C7120348
15F8A64815FCB3A26C15F8A56C6CEB07F0A3001F15E0A36C6CEB0FC0A26C6CEB1F800003
15006C6C133E6C6C5B017C5B90383F03F090380FFFC0D901FEC7FC263F7DBC2D>48
D<EB01C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B612F8A31D3D
78BC2D>I<EB07FC90383FFF8090B512E03903F01FF83907C007FC390F0001FE001E6D7E
001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07FA56C5A6CC7FC120CC813E0153FA2
16C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A4AC7FC147E147C5C495A495A495A
495A49C71270133E133C5B4914E0485A485A485A48C7120148B6FCA25A4815C0B7FCA324
3D7CBC2D>I<00061403D80780131F01F813FE90B5FC5D5D5D15C092C7FC14FCEB3FE090
C9FCACEB01FE90380FFF8090383E03E090387001F8496C7E49137E497F90C71380000614
1FC813C0A216E0150FA316F0A3120C127F7F12FFA416E090C7121F12FC007015C0127800
38EC3F80123C6CEC7F00001F14FE6C6C485A6C6C485A3903F80FE0C6B55A013F90C7FCEB
07F8243F7CBC2D>53 D<EB03FC90381FFF8090387C07E09038F001F83901E0007C48487F
48487F48C7FCED0F80121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D140001FC13
3E6C6C5B9038FF80786C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F013F13F801
787F48486C7E3903E01FFF48486C1380260F800313C048487E489038007FE0003E143F00
7E141F007CEC0FF01507481403A31501A46C15E0007C1403A2007E15C06C14076CEC0F80
6DEB1F006C6C133ED807F05B3901FC03F86CB512E0011F1380D903FCC7FC243F7CBC2D>
56 D<EB03FCEB1FFF90387E07C09038FC03F048486C7E48486C7E4848137C000F147E48
48137F81003F15805B007F15C0A2151F12FF16E0A516F0A5127F153FA36C7EA2001F147F
120F6C6C13FF6D13DF000313013900F8039F90387E0F1FD91FFE13E0EB07F090C7FCA2ED
3FC0A41680157FD80F801400487E486C13FEA24A5A5D49485AEB8007391E000FE0001F49
5A260FC07FC7FC3803FFFE6C13F838003FC0243F7CBC2D>I<007FB912E0BA12F0A26C18
E0CDFCAE007FB912E0BA12F0A26C18E03C167BA147>61 D<15074B7EA34B7EA34B7EA34B
7EA34B7E15E7A2913801C7FC15C3A291380381FEA34AC67EA3020E6D7EA34A6D7EA34A6D
7EA34A6D7EA34A6D7EA349486D7E91B6FCA249819138800001A249C87EA24982010E157F
A2011E82011C153FA2013C820138151FA2017882170F13FC00034C7ED80FFF4B7EB500F0
010FB512F8A33D417DC044>65 D<B712FCEEFF8017F00001903980000FF86C6CC7EA03FE
707E701380EF7FC0EF3FE0A2EF1FF0A218F8A3170F171FA318F0A2EF3FE0177F18C0EFFF
804C1300EE03FCEE0FF8EE7FE091B6C7FC17E091C7EA07FCEE01FE933800FF80EF7FC0EF
3FE0EF1FF018F8170F18FC1707A218FEA718FC170FA2EF1FF818F0173FEF7FE0EFFFC004
03138048486C90380FFE00B85A17E094C7FC373E7DBD40>I<DB3FF01306912603FFFE13
0E020F9038FF801E913A3FF007E03E9139FF8000F8D903FEC7EA7C7ED907F8EC1EFE4948
140FD93FE0140749481403495A91C812014848150012034848167E5B000F173EA2484816
1EA2123F5B180E127FA349160012FFAC127F7F180EA2123FA27F001F171E181C6C7EA200
07173C6D16386C6C1678000117706C6C16F06EEC01E06D6C15C06D6C1403D90FF0EC0780
6D6CEC1F00D903FE143E902600FF8013F891393FF007F0020FB512C0020391C7FC913800
3FF037427BBF42>I<B712FCEEFF8017E000019039C0001FF86C6C48EB03FEEE00FF717E
717EEF0FE084717E717E170184717EA21980187F19C0A3F03FE0A519F0AB19E0A5F07FC0
A21980A218FF19004D5AA24D5A6017074D5A4D5AEF7FC04DC7FCEE03FE48486CEB1FF8B8
5A178004FCC8FC3C3E7DBD45>I<B712C016FCEEFF800001D9C00013E06C6C48EB1FF0EE
07FCEE01FE707E84717EA2717EA284A760177F606017FF95C7FCEE01FCEE07F8EE1FE0EE
FF8091B500FCC8FC16F091388001FCED003FEE1FC0707E707E83160383160183A383A484
A4F0C004190EA28218E0057F131E2601FFE0161CB600C0EB3FF094381FF83805071370CA
3801FFE09438003F803F407DBD43>82 D<D907FC131890391FFF8038017FEBE0783901FC
03F83A03F0007CF8D807C0133F4848130F001F140748C7FC003E1403007E1401A2007C14
0012FC1678A46C1538A27EA26C6C14007F7FEA3FF8EBFF806C13F86CEBFF806C14F06C14
FC6C14FF6C15C0013F14E0010714F0EB007F020713F89138007FFC150FED07FE15031501
ED00FFA200E0157FA3163FA27EA3163E7E167E6C157C6C15FC6C15F86D13016DEB03F06D
EB07E0D8F9FCEB0FC03AF07F803F8090391FFFFE00D8E00713F839C0007FC028427BBF33
>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop Black Black 3770 5753 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 3770 5753 a Black Black
Black 3770 7888 a
 tx@Dict begin CP CP translate 1.  1.  scale NET  end
 3770 7888 a 30 w @beginspecial @setspecial
 tx@Dict begin STP newpath 8.53581 SLW 0.00 0.80 0.80 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 113.81097 711.31859 0.0 711.31859
 /Lineto /lineto load def false Line  gsave 8.53581 SLW 0.00 0.80 0.80
0.00  setcmykcolor 0 setlinecap stroke  grestore end


@endspecial 3826 1808 121 4 v 3826 1920 4 112 v 3854
1895 a Fk(B)p 3943 1920 V 3826 1923 121 4 v 59 w(-)30
b Fj(s)25 b Fk(=)g(120)32 b Fj(p)25 b Fk(=)g(10)4625
1862 y Fi(\000)p Fh(6)3800 7888 y @beginspecial @setspecial
 tx@Dict begin STP newpath 4.2679 SLW 0.80 0.00 0.80 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 199.1692 682.86584 85.35823
682.86584  /Lineto /lineto load def false Line  gsave 4.2679 SLW 0.80
0.00 0.80 0.00  setcmykcolor 0 setlinecap stroke  grestore end


@endspecial 4555 2044 125 4 v 4555 2156 4 112 v 4583
2131 a Fk(A)p 4676 2156 V 4555 2159 125 4 v 59 w(-)31
b Fj(s)25 b Fk(=)f(90)32 b Fj(p)25 b Fk(=)g(10)5313 2098
y Fi(\000)p Fh(3)3800 7888 y @beginspecial @setspecial
 tx@Dict begin STP newpath 2.84526 SLW 0.80 0.00 0.80 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 369.88567 682.86584 256.07469
682.86584  /Lineto /lineto load def false Line  gsave 2.84526 SLW 0.80
0.00 0.80 0.00  setcmykcolor 0 setlinecap stroke  grestore end


@endspecial 5972 2044 V 5972 2156 4 112 v 6001 2131
a Fk(A)p 6094 2156 V 5972 2159 125 4 v 58 w(-)31 b Fj(s)25
b Fk(=)g(80)31 b Fj(p)25 b Fk(=)g(10)6730 2098 y Fi(\000)p
Fh(2)3800 7888 y @beginspecial @setspecial
 tx@Dict begin STP newpath 5.69054 SLW 0.00 0.00 1.00 0.10  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 227.62195 654.4131 142.26372
654.4131  /Lineto /lineto load def false Line  gsave 5.69054 SLW 0.00
0.00 1.00 0.10  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial
4888 2280 123 4 v 4888 2392 4 112 v 4916 2367 a Fk(C)p
5007 2392 V 4888 2395 123 4 v 58 w(-)31 b Fj(s)25 b Fk(=)g(110)31
b Fj(p)25 b Fk(=)g(10)5688 2334 y Fi(\000)p Fh(5)3800
7888 y @beginspecial @setspecial
 tx@Dict begin STP newpath 2.84526 SLW 0.00 0.00 1.00 0.10  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 426.79115 654.4131 284.52744
654.4131  /Lineto /lineto load def false Line  gsave 2.84526 SLW 0.00
0.00 1.00 0.10  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 6446 2280
V 6446 2392 4 112 v 6474 2367 a Fk(C)p 6565 2392 V 6446
2395 123 4 v 59 w(-)30 b Fj(s)25 b Fk(=)g(90)31 b Fj(p)25
b Fk(=)g(10)7201 2334 y Fi(\000)p Fh(2)3800 7888 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 8.53581 SLW 0.75 0.75 0.00 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 398.33841 625.96036 312.98018
625.96036  /Lineto /lineto load def false Line  gsave 8.53581 SLW 0.75
0.75 0.00 0.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 6303 2517 126 4 v 6303 2629
4 112 v 6332 2604 a Fk(D)p 6426 2629 V 6303 2632 126
4 v 59 w(-)30 b Fj(s)25 b Fk(=)g(150)32 b Fj(p)25 b Fk(=)g(10)7108
2571 y Fi(\000)p Fh(7)3800 7888 y @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 569.05487 597.50761 0.0 597.50761
 /Lineto /lineto load def false Line  gsave 1.42262 SLW 0.00 0.00 0.00
1.00  setcmykcolor 0 setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 8.53581 SLW 0.00 0.80 0.80 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 113.81097 540.60213 0.0 540.60213
 /Lineto /lineto load def false Line  gsave 8.53581 SLW 0.00 0.80 0.80
0.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 4166
3218 214 4 v 4166 3344 4 126 v 4194 3306 a Fk(SR)4312
3320 y Fh(1)p 4376 3344 V 4166 3347 214 4 v 3800 7888
a @beginspecial @setspecial
 tx@Dict begin STP newpath 4.2679 SLW 0.80 0.00 0.80 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 142.26372 540.60213 113.81097
540.60213  /Lineto /lineto load def false Line  gsave 4.2679 SLW 0.80
0.00 0.80 0.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 4757 3218 V
4757 3344 4 126 v 4785 3306 a Fk(SR)4903 3320 y Fh(2)p
4967 3344 V 4757 3347 214 4 v 3800 7888 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 5.69054 SLW 0.00 0.00 1.00 0.10  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 227.62195 540.60213 142.26372
540.60213  /Lineto /lineto load def false Line  gsave 5.69054 SLW 0.00
0.00 1.00 0.10  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 5229 3218 V 5229 3344 4 126
v 5257 3306 a Fk(SR)5375 3320 y Fh(3)p 5439 3344 V 5229
3347 214 4 v 3800 7888 a @beginspecial @setspecial
 tx@Dict begin STP newpath 2.84526 SLW 0.80 0.00 0.80 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 284.52744 540.60213 256.07469
540.60213  /Lineto /lineto load def false Line  gsave 2.84526 SLW 0.80
0.00 0.80 0.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial
5938 3218 V 5938 3344 4 126 v 5966 3306 a Fk(SR)6084
3320 y Fh(4)p 6148 3344 V 5938 3347 214 4 v 3800 7888
a @beginspecial @setspecial
 tx@Dict begin STP newpath 2.84526 SLW 0.00 0.00 1.00 0.10  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 312.98018 540.60213 284.52744
540.60213  /Lineto /lineto load def false Line  gsave 2.84526 SLW 0.00
0.00 1.00 0.10  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 6174 3218 V
6174 3344 4 126 v 6202 3306 a Fk(SR)6320 3320 y Fh(5)p
6384 3344 V 6174 3347 214 4 v 3800 7888 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 8.53581 SLW 0.75 0.75 0.00 0.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 398.33841 540.60213 312.98018
540.60213  /Lineto /lineto load def false Line  gsave 8.53581 SLW 0.75
0.75 0.00 0.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 6646 3218 V 6646 3344 4 126
v 6675 3306 a Fk(SR)6793 3320 y Fh(6)p 6856 3344 V 6646
3347 214 4 v 3800 7888 a @beginspecial @setspecial
 tx@Dict begin STP newpath 2.84526 SLW 0.00 0.00 1.00 0.10  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 426.79115 540.60213 398.33841
540.60213  /Lineto /lineto load def false Line  gsave 2.84526 SLW 0.00
0.00 1.00 0.10  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial
7119 3218 V 7119 3344 4 126 v 7147 3306 a Fk(SR)7265
3320 y Fh(7)p 7329 3344 V 7119 3347 214 4 v 3800 7888
a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 569.05487 512.14938 0.0 512.14938
 /Lineto /lineto load def false Line  gsave 1.42262 SLW 0.00 0.00 0.00
1.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 3800 4400 a
 tx@Dict begin tx@NodeDict begin {24.86797 11.42262 227.70499 113.8525
6.72267 } false /N@E1 16 {InitRnode } NewNode end end

3800 4400 a 95 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 0. true 11.42262 neg 11.42262 neg 216.28236 24.86797 .5 Frame  gsave
gsave 0.00 0.00 1.00 0.00  setcmykcolor currentrgbcolor grestore gsave
0.00 0.40 0.75 0.00  setcmykcolor currentrgbcolor grestore 300 0.9
30. tx@GradientDict begin GradientFill end grestore gsave 1.42262 SLW
0.00 0.00 0.00 1.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial
597 w Fg(exon)62 b(1)6021 4360 y @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 0. true 11.42262 neg 11.42262 neg 159.37686 15.28928 .5 Frame  gsave
gsave 0.00 0.00 1.00 0.00  setcmykcolor currentrgbcolor grestore gsave
0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor grestore 300 0.9
30. tx@GradientDict begin GradientFill end grestore gsave 1.42262 SLW
0.00 0.00 0.00 1.00  setcmykcolor 0 setlinecap stroke  grestore end


@endspecial 526 w Ff(exon)22 b(2)7580 4377 y
 tx@Dict begin tx@NodeDict begin {19.202 11.42262 113.89397 56.94698
3.88968 } false /N@E3 16 {InitRnode } NewNode end end
 7580 4377
a 94 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 0. true 11.42262 neg 11.42262 neg 102.47134 19.202 .5 Frame  gsave
gsave 0.00 0.00 1.00 0.00  setcmykcolor currentrgbcolor grestore gsave
0.00 0.40 0.75 0.00  setcmykcolor currentrgbcolor grestore 300 0.9
30. tx@GradientDict begin GradientFill end grestore gsave 1.42262 SLW
0.00 0.00 0.00 1.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 232 w Fe(exon)34
b(3)5690 4179 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 0.0 } false /N@X
16 {InitRnode } NewNode end end
 5690 4179 a 6635 3872 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 0.0 } false /N@Y
16 {InitRnode } NewNode end end
 6635 3872 a 7580
4203 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 0.0 } false /N@Z
16 {InitRnode } NewNode end end
 7580 4203 a 3800 7888 a
 tx@Dict begin gsave STV newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { BeginArrow 1.  1.  scale {1  setgray true} false /DS 1.8
1.8 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@X
/N@Y InitNC { NCLine  } if end gsave 1.42262 SLW 0.00 0.00 0.00 1.00
 setcmykcolor 0 setlinecap stroke  grestore  grestore end
 3800 7888 a 3800 7888
a
 tx@Dict begin gsave STV newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale {1  setgray
true} false /DS 1.8 1.8 CLW mul add 2 div def EndDot  EndArrow  } def
/NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Y /N@Z InitNC
{ NCLine  } if end gsave 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
0 setlinecap stroke  grestore  grestore end
 3800 7888 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 569.05487 369.88567 0.0 369.88567
 /Lineto /lineto load def false Line  gsave 1.42262 SLW 0.00 0.00 0.00
1.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial
3800 5592 a
 tx@Dict begin tx@NodeDict begin {27.55185 11.42262 227.70499 113.8525
8.0646 } false /N@E1 16 {InitRnode } NewNode end end
 3800 5592 a 95 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 0. true 11.42262 neg 11.42262 neg 216.28236 27.55185 .5 Frame  gsave
gsave 0.00 0.00 1.00 0.00  setcmykcolor currentrgbcolor grestore gsave
0.00 0.40 0.75 0.00  setcmykcolor currentrgbcolor grestore 300 0.9
30. tx@GradientDict begin GradientFill end grestore gsave 1.42262 SLW
0.00 0.00 0.00 1.00  setcmykcolor 0 setlinecap stroke  grestore end


@endspecial 547 w Fd(exon)72 b(1)6021 5581 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 0. true 11.42262 neg 11.42262 neg 159.37686 24.86797 .5 Frame  gsave
gsave 0.00 0.00 1.00 0.00  setcmykcolor currentrgbcolor grestore gsave
0.00 0.40 0.75 0.00  setcmykcolor currentrgbcolor grestore 300 0.9
30. tx@GradientDict begin GradientFill end grestore gsave 1.42262 SLW
0.00 0.00 0.00 1.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial 361 w Fg(exon)61 b(2)7580 5558
y
 tx@Dict begin tx@NodeDict begin {19.202 11.42262 113.89397 56.94698
3.88968 } false /N@E3 16 {InitRnode } NewNode end end
 7580 5558 a 94 w @beginspecial @setspecial
 tx@Dict begin STP newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 0. true 11.42262 neg 11.42262 neg 102.47134 19.202 .5 Frame  gsave
gsave 0.00 0.00 1.00 0.00  setcmykcolor currentrgbcolor grestore gsave
0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor grestore 300 0.9
30. tx@GradientDict begin GradientFill end grestore gsave 1.42262 SLW
0.00 0.00 0.00 1.00  setcmykcolor 0 setlinecap stroke  grestore end
 
@endspecial
232 w Fe(exon)34 b(3)5690 5353 y
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 0.0 } false /N@X
16 {InitRnode } NewNode end end
 5690 5353 a 5808 5053
a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 0.0 } false /N@Y
16 {InitRnode } NewNode end end
 5808 5053 a 5926 5372 a
 tx@Dict begin tx@NodeDict begin {0.0 0.0 0.0 0.0 0.0 } false /N@Z
16 {InitRnode } NewNode end end
 5926 5372 a 3800 7888 a
 tx@Dict begin gsave STV newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { BeginArrow 1.  1.  scale {1  setgray true} false /DS 1.8
1.8 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@X
/N@Y InitNC { NCLine  } if end gsave 1.42262 SLW 0.00 0.00 0.00 1.00
 setcmykcolor 0 setlinecap stroke  grestore  grestore end
 3800
7888 a 3800 7888 a
 tx@Dict begin gsave STV newpath 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale {1  setgray
true} false /DS 1.8 1.8 CLW mul add 2 div def EndDot  EndArrow  } def
/NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Y /N@Z InitNC
{ NCLine  } if end gsave 1.42262 SLW 0.00 0.00 0.00 1.00  setcmykcolor
0 setlinecap stroke  grestore  grestore end
 3800 7888 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 0.0 540.60213 0.0 711.31859
 /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00 0.00 0.00
0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 85.35823 540.60213 85.35823
682.86584  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 142.26372 540.60213 142.26372
654.4131  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 113.81097 540.60213 113.81097
711.31859  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 227.62195 540.60213 227.62195
654.4131  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 199.1692 540.60213 199.1692
682.86584  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 256.07469 540.60213 256.07469
682.86584  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 284.52744 540.60213 284.52744
654.4131  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 312.98018 540.60213 312.98018
625.96036  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 398.33841 540.60213 398.33841
625.96036  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 369.88567 540.60213 369.88567
682.86584  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.28453 SLW 0.00 0.00 0.00 0.40  setcmykcolor
 /ArrowA { moveto } def /ArrowB { } def [ 426.79115 540.60213 426.79115
654.4131  /Lineto /lineto load def false Line  gsave 0.28453 SLW 0.00
0.00 0.00 0.40  setcmykcolor 5.0 3.0 0 0 add DashLine  grestore end
 
@endspecial 4089 5233 125 4 v 4089 5345
4 112 v 4117 5320 a Fk(A)p 4210 5345 V 4089 5348 125
4 v 4214 5233 121 4 v 4214 5345 4 112 v 57 w(B)p 4331
5345 V 4214 5348 121 4 v 4335 5233 123 4 v 4335 5345
4 112 v 57 w(C)p 4453 5345 V 4335 5348 123 4 v 6803 5233
125 4 v 6803 5345 4 112 v 2402 w(A)p 6924 5345 V 6803
5348 125 4 v 6928 5233 123 4 v 6928 5345 4 112 v 57 w(C)p
7046 5345 V 6928 5348 123 4 v 7050 5233 126 4 v 7050
5345 4 112 v 56 w(D)p 7172 5345 V 7050 5348 126 4 v 7971
5025 a Fc(Prediction)i(+)7750 5131 y(homology)g(information)7800
3906 y(Prediction)f Fb(ab)42 b(initio)7840 3188 y Fa(S)6
b Fc(imilarit)m(y)33 b Fa(R)q Fc(egions)7969 2186 y Fa(H)8
b Fc(igh)37 b(Scoring)7934 2300 y Fa(S)6 b Fc(egmen)m(t)36
b Fa(P)14 b Fc(airs)3770 7888 y
 tx@Dict begin CP CP translate 1 1. div 1 1. div scale NET  end
 3770 7888 a Black 9048
5753 a
 currentpoint grestore moveto
 9048 5753 a Black Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
