%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: SR.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o SR.ps SR.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.07.13:1539
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro
%!
% PostScript prologue for pst-grad.tex.
% Version 97, 93/05/12
% For distribution, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.
%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).
%
% Syntax:
%   R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill

/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBlue ED
  /LastGreen ED
  /LastRed ED
  /FirstBlue ED
  /FirstGreen ED
  /FirstRed ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastRed FirstRed add 2 div
  LastGreen FirstGreen add 2 div
  LastBlue FirstBlue add 2 div
  setrgbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
    MidLine { GradientLoop } repeat
  } if
  MidLine NumLines lt
  {
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoop } repeat
  } if
} def
/GradientLoop {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Red Green Blue setrgbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Blue Blue BlueIncrement add def
  /Green Green GreenIncrement add def
  /Red Red RedIncrement add def
} def

end
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (SR.dvi)
@start
%DVIPSBitmapFont: Fa cmtt10 10.95 11
/Fa 11 121 df<EB7FF80003B5FC4814C04880488048809038E01FFC9038C003FE14016E
7E6C487F6CC77FC8123FA491B5FC130F137F48B6FC12075A48EB803F383FF800EA7FE013
8048C7FC5AA4157F7E6C6C13FFEBC003263FF01FEBFF8090B712C07E6C14EF000314876C
D9FE01138026003FE0C8FC2A2A7BA830>97 D<EA3FFC487E12FFA2127F123F1200AAEC03
FE91381FFF80027F13E091B57E90B612FC82ECFE079138F001FF4A6C13804A137F4AEB3F
C091C7121F17E049140FA217F01607A8160FA217E07F161F6EEB3FC0A26EEB7F806E13FF
DAF00313009138FC0FFE91B55A5E495CD97E7F13C0D93C1F90C7FC90380003FC2C3980B7
30>I<913801FFE04A7F5CA28080EC0007AAEB03FE90381FFF874913E790B6FC5A5A4813
03380FFC00D81FF0133F49131F485A150F4848130790C7FCA25AA25AA87E6C140FA27F00
3F141F6D133F6C7E6D137F390FF801FF2607FE07EBFFC06CB712E06C16F06C14F76D01C7
13E0011F010313C0D907FCC8FC2C397DB730>100 D<49B4FC010713E0011F13F8017F7F
90B57E488048018113803A07FC007FC04848133FD81FE0EB1FE0150F484814F049130712
7F90C7FCED03F85A5AB7FCA516F048C9FC7E7EA27F003FEC01F06DEB03F86C7E6C7E6D13
07D807FEEB1FF03A03FFC07FE06C90B5FC6C15C0013F14806DEBFE00010713F8010013C0
252A7CA830>I<D903FC13FF90261FFF8713C04913DF90B712E05A5A2607FE07138F903A
F801FE07C048486C6CC7FCA2497F001F8149133FA56D137F000F92C7FC6D5BA26C6C485A
EBFE0790B55A5D485C15C001DF5BD9C3FCC8FC01C0C9FCA37F7F6CB512F015FF6C15C048
15F0488148813A3FE0001FFE0180130148C8127F007E8100FE168048151FA56C153F007F
ED7F006D5C6C6C495A01F013076CB4EB7FFC6C90B55A6C5D000115C06C6C91C7FC011F13
FC010113C02B3E7DA730>103 D<14E0EB03F8A2497EA36D5AA2EB00E091C8FCA9381FFF
F8487F5AA27E7EEA0001B3A9003FB612C04815E0B7FCA27E6C15C023397AB830>105
D<387FFFF8B57EA47EEA0001B3B3A8007FB612F0B712F8A46C15F025387BB730>108
D<EC01FE3A3FFC0FFF80267FFE3F13E000FF90B57E90B67E7E6C9038FE07FCC6EBF80391
38E001FE14C0EC8000A291C7FCA25BB3A23B3FFFF81FFFF8486D4813FCB500FE14FEA26C
01FC14FC6C496C13F82F2880A730>110 D<90381FFC1E48B5129F000714FF5A5A5A387F
F007EB800100FEC7FC4880A46C143E007F91C7FC13E06CB4FC6C13FC6CEBFF806C14E000
0114F86C6C7F01037F9038000FFF02001380007C147F00FEEC1FC0A2150F7EA27F151F6D
EB3F806D137F9039FC03FF0090B6FC5D5D00FC14F0D8F83F13C026780FFEC7FC222A79A8
30>115 D<EB0780497E131FA9003FB612E04815F0B7FCA36C15E026001FC0C7FCB216F8
ED01FCA5ECE003010FEB07F814F09138FC1FF06DB512E06D14C016806D14009038007FFC
EC1FF026337EB130>I<3A3FFF81FFFC4801C37FB580A26C5D6C01815BC648C66CC7FC13
7FEC80FE90383F81FC90381FC3F8EB0FE3ECE7F06DB45A6D5B7F6D5B92C8FC147E147F5C
497F81903803F7E0EB07E790380FE3F0ECC1F890381F81FC90383F80FE90387F007E017E
137F01FE6D7E48486D7E267FFF80B5FCB500C1148014E3A214C16C0180140029277DA630
>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmex10 10 1
/Fb 1 89 df<BF12E08AA38A6C90CCFC0900806C6D19076C6D07007F6C6D1A1F1D076C6D
F201FF6C6D747E6C6DF33F801E0F6C6D1B076D6CF303C06D6D1A01F600E06D7F6D6D1B70
6D1D30816D6D1B186D6D1B007F816E7E6E7FA26E7F6E7F6E7FA26E7F6E7F6E7FA26F7E6F
7F6F7FA26F7F6F7F81836F7F6F7F167F83707F707F8284707F707FA2707F82715A60173F
715A604D5A4DCDFC17FEA24C5A4C5A4C5A4C5A4C5A5F163F4CCEFC16FE4B5A4B5A4B5AA2
4B5A4B5A4B5A4BCFFC15FEA24A5A4A5A4A481B184A481B304A5A4B1B70023F1C604ACF12
E002FE1B014948F303C049481B074948F30F801E1F49481B7F4948F3FF0049481A0349CE
120F01FEF37FFEF403FF48481A7F4848077FB55A48BEFC48655AA248655ABFFC666D747B
7F78>88 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr6 6 1
/Fc 1 54 df<00101330381E01F0381FFFE014C01480EBFE00EA1BF00018C7FCA513FE38
1BFF80381F03C0381C01E0381800F014F8C71278A2147CA21230127812F8A214784813F8
006013F0387001E01238381E07803807FF00EA01F816227CA01E>53
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmmi6 6 1
/Fd 1 106 df<1338137CA2137813701300A7EA0780EA1FC0EA38E01230EA60F0EAC1E0
A3EA03C0A3EA0780A2EA0F0013041306EA1E0CA21318121CEA1E70EA0FE0EA07800F237D
A116>105 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmsy8 8 5
/Fe 5 107 df<91B512C01307131FD97F80C7FC01FCC8FCEA01F0EA03C0485A48C9FC12
0E121E5A123812781270A212F05AA3B712C0A300E0C9FCA37E1270A212781238123C7E12
0E120F6C7E6C7EEA01F0EA00FCEB7F80011FB512C013071300222B7AA52F>50
D<EB03FF013F13F090B512FC3903FE01FF3A07E0001F80D80F80EB07C0001EC7EA01E048
EC00F048157800701538A200F0153C48151CB3AA0060150C26297CA72F>92
D<141F14FFEB03F0EB0FC0EB1F8014005B133EB3A2137E137C13FC485A485AEA7FC048C7
FCEA7FC0EA03F06C7E6C7E137C137E133EB3A2133F7F1480EB0FC0EB03F0EB00FF141F18
437BB123>102 D<12FCB47EEA0FE0EA01F0EA00FC137C137E133EB3A37F1480130FEB07
E0EB01FEEB007FEB01FEEB07E0EB0F80131F1400133EB3A3137E137C13FCEA01F0EA0FE0
EAFF8000FCC7FC18437BB123>I<12E0B3B3B3AD034378B114>106
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi8 8 6
/Ff 6 121 df<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A
5A126009157A8714>59 D<EB03F8EB0FFE90383E0780EBF803D801F013C03803E001EA07
C0000F1303D81F8013801407393F000F00141E387F01FCEBFFF091C7FC007EC8FC12FE5A
A4127C156015E0EC01C06CEB0380EC0F006C131C380F81F83803FFE0C648C7FC1B1F7D9D
21>101 D<14FCEB03FF90380F839C90381F01BC013E13FCEB7C005B1201485A15F8485A
1401120F01C013F0A21403121F018013E0A21407A215C0A2000F130F141F0007EB3F80EB
C07F3803E1FF3800FF9F90383E1F0013005CA2143EA2147E0038137C00FC13FC5C495A38
F807E038F00F80D87FFEC7FCEA1FF81E2C7E9D22>103 D<1307EB0F80EB1FC0A2EB0F80
EB070090C7FCA9EA01E0EA07F8EA0E3CEA1C3E123812301270EA607EEAE07C12C013FC48
5A120012015B12035BA21207EBC04014C0120F13801381381F01801303EB0700EA0F0613
1EEA07F8EA01F0122E7EAC18>105 D<130E131FA25BA2133EA2137EA2137CA213FCA2B5
12F8A23801F800A25BA21203A25BA21207A25BA2120FA25BA2001F131014301300147014
6014E0381E01C0EB0380381F0700EA0F0EEA07FCEA01F0152B7EA919>116
D<013F137C9038FFC1FF3A01C1E383803A0380F703C0390700F60F000E13FE4813FC1218
0038EC0700003049C7FCA2EA200100005BA313035CA301075B5D14C000385CD87C0F1306
00FC140E011F130C011B131C39F03BE038D8707113F0393FE0FFC0260F803FC7FC221F7E
9D28>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmsy10 10.95 2
/Fg 2 107 df<EC1FFE49B512E0010714F8011F14FE903A7FF003FF804848C7EA3FE0D8
03FCEC0FF0D807F0EC03F8D80FC0EC00FC4848157E48C97E003E8248EE0F80A200781607
00F817C0A2481603B3B3A30060EE018032397BB63D>92 D<126012F0B3B3B3B3B1126004
5B76C319>106 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmr8 8 7
/Fh 7 56 df<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
>49 D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC
14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A49
5A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FC
A21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F
1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015
C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB
3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01
BE1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E120C
5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB01
80380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F
801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E000
6014C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<
EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091
C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814
E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F0038
03C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB512F8A215F05A15E039
700001C000601480140348EB0700140E140CC7121C5C143014705C495AA2495AA249C7FC
A25B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi10 10.95 5
/Fi 5 121 df<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A3120113
80120313005A120E5A1218123812300B1C798919>59 D<EC1FE0ECFFFC903803F01E9038
0FC00F90393F800780D97E0013C0491303EA03F8120749130748481480121F49130F003F
EC1F00153E397F8001FCEC1FF090B51280B500F8C7FC90C9FCA45AA616C01501007E1403
ED07806CEC0F00151E6C5C6C6C13F83907C003E03903E03F802600FFFEC7FCEB3FE02229
7CA72A>101 D<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133F
A291C9FC15FE90397F07FFC091381F03E090397E3801F09138F000F8EBFFE04A7F5C91C7
FC485AA25BA2484813015E5BA2000714035E5B1507120F5E49130F5E121F031F13704914
80A2003F023F13F0EE00E090C7FC160148023E13C01603007E1680EE070000FE5DED1F1E
48EC0FF80038EC03E02C407CBE34>104 D<EC1FC0ECFFF8903803E03C903807800E9038
1E0007168049130F49131F153FA201F81400A2151C6D90C7FC7FEBFFE014FE90387FFFC0
6D7F6D13F86D7F13039038001FFE14031400157E000C143E123F487EA248C7123CA25D12
FC00F05C0070495A0078495A6C495A260F803EC7FC3803FFF838007FC021297CA72B>
115 D<D901F8133FD907FEEBFFE0903A1E0F83C0F0903A3807C780F890397003CF0301E0
13FED801C0EBFC071203018013F8D8070015F0EE01C0000E4AC7FCA2001E1307A2C75BA2
140F5DA3141F5DA3143F92380001C0A34A1303001E1680003F017E1307267F80FE14005E
D8FF81141ED901DF131CD8FE035C3A7C078F80F03A3C0F07C1E03A1FFC03FF802707F000
7EC7FC2D297EA734>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmbx10 10.95 36
/Fj 36 121 df<903803FF80013F13F890B512FE00036E7E4881260FF80F7F261FC0037F
4848C67F486C6D7E6D6D7E487E6D6D7EA26F1380A46C5A6C5A6C5A0007C7FCC8FC4B1300
A25E153F5E4B5AA24B5A5E4A5B4A5B4A48C7FC5D4A5AEC1FE04A5A4A5A9139FF000F80EB
01FC495A4948EB1F00495AEB1F8049C7FC017E5C5B48B7FC485D5A5A5A5A5AB7FC5EA429
3C7BBB34>50 D<00071538D80FE0EB01F801FE133F90B6FC5E5E5E5E93C7FC5D15F85D15
C04AC8FC0180C9FCA9ECFFC0018713FC019F13FF90B67E020113E09039F8007FF0496D7E
01C06D7E5B6CC77FC8120F82A31780A21207EA1FC0487E487E12FF7FA21700A25B4B5A6C
5A01805C6CC7123F6D495AD81FE0495A260FFC075B6CB65A6C92C7FCC614FC013F13F001
0790C8FC293D7BBB34>53 D<EC07FF023F13C049B512F001078049EB03FC90383FF80090
397FE001FE9038FFC0034849487E48495AA2485A120FA2485A6F5A003F6E5A6F5A92C8FC
485AA21402EC3FFE00FF496C7E01F9B512E001FB809138E03FF89039FF800FFC4A6C7E82
5B6F13804915C0A317E05BA4127FA5123FA26D15C0121FA2000F4A13806D150012076C6C
495A6C6D485A6C9038E07FF86DB55A6D5C6D1480010749C7FC010013F02B3D7CBB34>I<
922607FFC0130E92B500FC131E020702FF133E023FEDC07E91B7EAE1FE01039138803FFB
499039F80003FF4901C01300013F90C8127F4948151FD9FFF8150F48491507485B4A1503
481701485B18004890CAFC197E5A5B193E127FA349170012FFAC127F7F193EA2123FA27F
6C187E197C6C7F19FC6C6D16F86C6D150119F06C6D15036C6DED07E0D97FFEED0FC06D6C
ED3F80010F01C0ECFF006D01F8EB03FE6D9039FF801FFC010091B55A023F15E002071580
020002FCC7FC030713C03F407ABE4C>67 D<B812F8EFFF8018F018FC18FF26003FFCC76C
13C005077F05017F716C7E727E727E727E721380A27213C0A27213E0A21AF084A21AF8A4
1AFCA5197FA319FFA51AF8A41AF0A2601AE0A24E13C0A24E13804E1300604E5A4E5A4D48
5A050713E0057F5BBA5A4EC7FC18F818C005F8C8FC463E7DBD50>I<BAFCA4198026003F
FEC7123F1707170183183FA2181FF00FC0A31807EE07C0A3F003E0A3160F95C7FC161F16
3F16FF91B6FCA54AC6FC163F161F040F147CA2160719F8A593C71201A219F01803A21807
A2180FF01FE0183F18FF1703173FBAFCA219C0A33E3D7DBC45>I<922607FFC0130E92B5
00FC131E020702FF133E023FEDC07E91B7EAE1FE01039138803FFB499039F80003FF4901
C01300013F90C8127F4948151FD9FFF8150F48491507485B4A1503481701485B18004890
CAFC197E5A5B193E127FA34994C7FC12FFAB0407B612FC127F7FA3003F92C7383FFE00A2
7F7EA26C7FA26C7F6C7FA26C7F6C7FD97FFE157F6D6C7E010F01E014FF6D01F813036D90
38FF801F010091B512F3023F15C00207ED803E02009138FE000E030701E090C7FC46407A
BE52>71 D<B7D8803FB612E0A526003FFEC8000FEB8000B3A491B9FCA54AC8120FB3A7B7
D8803FB612E0A54B3E7DBD52>I<B71280A526003FFEC7FCB3B3B0B71280A5213E7DBD28>
I<B6051FB512C06F5EA26F5EA2D8003F97C7FC6F16F7A26E6CED01E7A26E6CED03C7A36E
6CED0787A26E6CED0F07A26E6C151EA36E6D143CA26E6D1478A26E6D14F0A26F6CEB01E0
A36F6CEB03C0A26F6CEB0780A26F6CEB0F00A36F6C131EA26F6D5AA26F6D5AA26F6D5AA3
93387FF1E0A293383FFBC0A270B45AA37090C7FCA2705AA2705AB600C0031FB612C0A270
5AA2705A5A3E7CBD63>77 D<B6037FB512E0A2818181D8003F6D9139001F800081A28181
6E7E6E7F6E7F80826E7F6E7F6E7F6E7F157F826F7F6F7F6F7F6F7F81836F7F6F7F707E70
1380A27013C07013E07013F07013F87013FCA27013FEEF7FFF71139F7113DF8319FF8383
838384A28484848484A284B600C080197F193F191FA24B3E7DBD52>I<ED3FFF0203B512
F0021F14FE027F6E7E902701FFF80713E00107D9C00013F84990C7EA3FFCD93FFCEC0FFF
49486E7F49486E7F48496E7F4A80488448496F7EA24890C96C7E4884A249161F003F84A3
4848701380A400FF19C0AD007F19806D5EA3003F1900A26D5E6C60A26C6D4B5AA26C6D4B
5A6C6D4A5BA26C6D4A5B6C6D4A5B6D6C4A5B6DB4023F90C7FC6D01C0EBFFFE0107D9F807
13F8010190B612E06D5E021F4AC8FC020314F0DA003F90C9FC42407ABE4F>I<B812F017
FF18C018F018FC26003FFCC77FEF1FFF7113807113C07113E0A27113F0A319F8A819F0A3
4D13E019C05F4D1380053F1300EFFFFE91B712F860188005FCC7FC4ACAFCB3A4B77EA53D
3E7DBD47>I<B87E17FCEFFF8018F08428003FFC000113FE9338003FFF050F7F717F717F
A2858385A761A25F61614D5B4D90C8FCEF3FFE4CB45A91B712F018C04DC9FC717E9126FC
000F7F040113F0707F717EA2717EA2717EA685A6F207C019C0A271140F07E01380B76DEB
F01F719038FC3F007190B5FC716C5B061F13F8CB000113E04A3F7DBD4E>82
D<903A03FFC001C0011FEBF803017FEBFE0748B6128F4815DF48010013FFD80FF8130F48
481303497F4848EB007F127F49143F161F12FF160FA27F1607A27F7F01FC91C7FCEBFF80
6C13F8ECFFC06C14FCEDFF806C15E016F86C816C816C816C16806C6C15C07F010715E0EB
007F020714F0EC003F1503030013F8167F163F127800F8151FA2160FA27EA217F07E161F
6C16E06D143F01E015C001F8EC7F8001FEEB01FF9026FFE00713004890B55A486C14F8D8
F81F5CD8F00314C027E0003FFEC7FC2D407ABE3A>I<007FB6013FB512F0A5D8001F01C0
D9003FC7FC6D6D147E18FE6D6D5C6D6D495A6D4B5A6F13076D6D5C6E6C495A4D5A6EEB80
3F6E01C090C8FC6E147E705A6E13F16EEBF9F86EEBFBF0EEFFE0806F5B5F816F7F81836F
7F81834B7F4B7F5D83DB3F3F7FED7E1F03FE804B6C7F4A486C7F4A487E0207814B6C7F4A
487E4A4880023F6E7E92C76C7F027E804A8201016F7F4A6E7F495A49486E7F010F6F7F4A
80B600C0017F90B5FCA5483E7DBD4F>88 D<903807FFC0013F13F848B6FC48812607FE03
7F260FF8007F6DEB3FF0486C806F7EA36F7EA26C5A6C5AEA01E0C8FC153F91B5FC130F13
7F3901FFFE0F4813E0000F1380381FFE00485A5B485A12FF5BA4151F7F007F143F6D9038
7BFF806C6C01FB13FE391FFF07F36CEBFFE100031480C6EC003FD91FF890C7FC2F2B7DA9
33>97 D<13FFB5FCA512077EAFEDFFE0020713FC021FEBFF80027F80DAFF8113F09139FC
003FF802F06D7E4A6D7E4A13074A80701380A218C082A318E0AA18C0A25E1880A218005E
6E5C6E495A6E495A02FCEB7FF0903AFCFF01FFE0496CB55AD9F01F91C7FCD9E00713FCC7
000113C033407DBE3A>I<EC7FF00107B5FC011F14C0017F14E09039FFF01FF048903880
0FF848EB001F4848EB3FFC120F485AA2485AA2007FEC1FF849EB0FF0ED03C000FF91C7FC
AB127F7FA3003F153E7F001F157E6C6C147C6C6C14FC91388001F86C9038C003F0C69038
F81FE06DB512C0011F14800107EBFE009038007FF0272B7DA92E>I<EE07F8ED07FFA5ED
003F161FAFEC7FF0903807FFFE011FEBFF9F017F14DF9039FFF01FFF48EBC00348EB0001
4848EB007F485A001F153F5B123FA2127F5BA212FFAA127FA37F123FA26C6C147F120F6D
14FF6C6C01037F6C6D48EBFFE06CEBF03F6C6CB512BF6D143F010713FC010001E0EBE000
33407DBE3A>I<ECFFF0010713FE011F6D7E017F809039FFE07FE0489038801FF048496C
7E48486D7E48486D7E121F491301003F81A2485A6F1380A212FFA290B7FCA401F0C9FCA5
127FA27F123FEE0F806C7E161F6C6C15006C6C5C6C6D137E6C9038E001FC6C9038F80FF8
013FB55A6D14C0010391C7FC9038007FF8292B7DA930>I<EC07FE91387FFF8049B512C0
010714E090390FFE3FF0EB1FF090393FE07FF8EB7FC013FF1480A2489038003FF0ED1FE0
ED0FC092C7FCAAB612E0A500010180C7FCB3AC007FEBFF80A525407DBF20>I<903A03FF
8007F0013F9038F83FF8499038FCFFFC48B712FE48018313F93A07FC007FC34848EB3FE1
001FEDF1FC4990381FF0F81700003F81A7001F5DA26D133F000F5D6C6C495A3A03FF83FF
8091B5C7FC4814FC01BF5BD80F03138090CAFCA2487EA27F13F06CB6FC16F016FC6C15FF
17806C16C06C16E01207001F16F0393FE000034848EB003F49EC1FF800FF150F90C81207
A56C6CEC0FF06D141F003F16E001F0147FD81FFC903801FFC02707FF800F13006C90B55A
C615F8013F14E0010101FCC7FC2F3D7DA834>I<13FFB5FCA512077EAFED1FF8EDFFFE02
036D7E4A80DA0FE07F91381F007F023C805C4A6D7E5CA25CA35CB3A4B5D8FE0FB512E0A5
333F7CBE3A>I<EA01F8487E487E487E481380A66C13006C5A6C5A6C5AC8FCA913FFB5FC
A512077EB3ABB512F8A515407CBF1D>I<EC0FC0EC1FE0EC3FF0EC7FF8ECFFFCA6EC7FF8
EC3FF0EC1FE0EC0FC091C7FCA9EC03FCEB07FFA5EB001F140FB3B3A2EA1F80EA3FC0EA7F
E0EAFFF0EC1FF8A3EC3FF015E0397FE07FC0393FC1FF806CB512006C5B6C13F8C613801E
5386BF20>I<13FFB5FCA512077EB3B3AFB512FCA5163F7CBE1D>108
D<01FFD91FF8ECFFC0B590B5010713F80203DAC01F13FE4A6E487FDA0FE09026F07F077F
91261F003FEBF8010007013EDAF9F0806C0178ECFBC04A6DB4486C7FA24A92C7FC4A5CA3
4A5CB3A4B5D8FE07B5D8F03FEBFF80A551297CA858>I<01FFEB1FF8B5EBFFFE02036D7E
4A80DA0FE07F91381F007F0007013C806C5B4A6D7E5CA25CA35CB3A4B5D8FE0FB512E0A5
33297CA83A>I<EC7FF0903803FFFE011FEBFFC0017F14F09039FFE03FF8489038800FFC
3A03FE0003FE48486D7E000F168048486D13C0A2003F16E049147F007F16F0A400FF16F8
AA007F16F0A46C6CECFFE0A2001F16C06C6C491380A26C6C4913003A03FF800FFE6C9038
E03FFC6C6CB512F0011F14C0010791C7FC9038007FF02D2B7DA934>I<01FFEBFFE0B500
0713FC021FEBFF80027F80DAFF8113F09139FC007FF8000701F06D7E6C496D7E4A130F4A
6D7E1880A27013C0A38218E0AA4C13C0A318805E18005E6E5C6E495A6E495A02FCEBFFF0
DAFF035B92B55A029F91C7FC028713FC028113C00280C9FCACB512FEA5333B7DA83A>I<
3901FE01FE00FF903807FF804A13E04A13F0EC3F1F91387C3FF8000713F8000313F0EBFF
E0A29138C01FF0ED0FE091388007C092C7FCA391C8FCB3A2B6FCA525297DA82B>114
D<90383FFC1E48B512BE000714FE5A381FF00F383F800148C7FC007E147EA200FE143EA2
7E7F6D90C7FC13F8EBFFE06C13FF15C06C14F06C806C806C806C80C61580131F13000207
13C014000078147F00F8143F151F7EA27E16806C143F6D140001E013FF9038F803FE90B5
5A15F0D8F87F13C026E00FFEC7FC222B7DA929>I<EB07C0A5130FA4131FA3133F137FA2
13FF5A1207001FEBFFFEB6FCA40001EBC000B3151FA96CEBE03EA2017F137EECF8FC9038
3FFFF86D13F0010713E001001380203B7EB929>I<D9FF80EB0FF8B5EB0FFFA50007EC00
7F6C153FB3A5167FA316FF6C5C4B7F6C903AC007DFFFE09138F01F9F6DB5121F6D13FE01
0F13F8010101E0EBE000332A7CA83A>I<B5D8FC03B51280A5C69026E0007FC7FC6E13FE
6D6C5B6D6C485A6D6C485A010F13076D6C485AED9FC06DEBFF806D91C8FC6D5B6E5AA214
3F6E7E140F814A7F4A7F4A7F02FE7F903801FC7F49486C7E02F07F49486C7E49486C7E01
1F7F49486C7FD97F008001FE6D7FB5D8C007EBFFC0A532287EA737>120
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmr10 10.95 41
/Fk 41 122 df<1430147014E0EB01C0EB03801307EB0F00131E133E133C5B13F85B1201
5B1203A2485AA2120F5BA2121F90C7FCA25AA3123E127EA6127C12FCB2127C127EA6123E
123FA37EA27F120FA27F1207A26C7EA212017F12007F13787F133E131E7FEB07801303EB
01C0EB00E014701430145A77C323>40 D<12C07E12707E7E121E7E6C7E7F12036C7E7F12
007F1378137CA27FA2133F7FA21480130FA214C0A3130714E0A6130314F0B214E01307A6
14C0130FA31480A2131F1400A25B133EA25BA2137813F85B12015B485A12075B48C7FC12
1E121C5A5A5A5A145A7BC323>I<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413
E013C0A312011380120313005A120E5A1218123812300B1C798919>44
D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>46 D<EB01FE90380FFFC09038
3F03F090387C00F849137C48487F48487F4848EB0F80A2000F15C04848EB07E0A3003F15
F0A290C712034815F8A64815FCB3A26C15F8A56C6CEB07F0A3001F15E0A36C6CEB0FC0A2
6C6CEB1F80000315006C6C133E6C6C5B017C5B90383F03F090380FFFC0D901FEC7FC263F
7DBC2D>48 D<EB01C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B6
12F8A31D3D78BC2D>I<EB07FC90383FFF8090B512E03903F01FF83907C007FC390F0001
FE001E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07FA56C5A6CC7FC120CC8
13E0153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A4AC7FC147E147C5C49
5A495A495A495A49C71270133E133C5B4914E0485A485A485A48C7120148B6FCA25A4815
C0B7FCA3243D7CBC2D>I<EB07FC90383FFF809038F80FE03901E003F839078001FCD80F
007F000E6D7E001E1580D81F80137F486C14C07FA27F5BA2121F6C5AC8138015FF1600A2
4A5AA24A5A5DEC07E04A5A023FC7FCEB1FFCECFF809038000FE0EC07F86E7E6E7E6E7E16
80ED7FC0A216E0153FA216F0A2120C123F487E487EA316E0A249137F6CC713C01278EDFF
807E6C4913006C495A3907C007FC3903F80FF0C6B55A013F1380D907F8C7FC243F7CBC2D
>I<150E151E153EA2157EA215FE1401A21403EC077E1406140E141CA214381470A214E0
EB01C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A90C7FC5A120E120C121C5AA2
5A5AB8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<00061403D80780131F01F813FE
90B5FC5D5D5D15C092C7FC14FCEB3FE090C9FCACEB01FE90380FFF8090383E03E0903870
01F8496C7E49137E497F90C713800006141FC813C0A216E0150FA316F0A3120C127F7F12
FFA416E090C7121F12FC007015C012780038EC3F80123C6CEC7F00001F14FE6C6C485A6C
6C485A3903F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>I<EC1FE0ECFFF8903803F0
3E90380FC00F90391F000780133E017EEB1FC049133F4848137F12035B12074848EB3F80
ED1F00001F91C7FC5BA2123FA3485AA214FE903887FF8039FF8F07E090389C01F09038B8
00FC01B0137E13F0497F16804914C0A2ED1FE0A34914F0A5127FA6123F6D14E0A2121FED
3FC0A26C6C1480A20007EC7F006C6C137E6C6C5B6C6C485A90387E07F06DB45A010F1380
D903FCC7FC243F7CBC2D>I<EB03FC90381FFF8090387C07E09038F001F83901E0007C48
487F48487F48C7FCED0F80121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D140001
FC133E6C6C5B9038FF80786C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F013F13
F801787F48486C7E3903E01FFF48486C1380260F800313C048487E489038007FE0003E14
3F007E141F007CEC0FF01507481403A31501A46C15E0007C1403A2007E15C06C14076CEC
0F806DEB1F006C6C133ED807F05B3901FC03F86CB512E0011F1380D903FCC7FC243F7CBC
2D>56 D<EB03FCEB1FFF90387E07C09038FC03F048486C7E48486C7E4848137C000F147E
4848137F81003F15805B007F15C0A2151F12FF16E0A516F0A5127F153FA36C7EA2001F14
7F120F6C6C13FF6D13DF000313013900F8039F90387E0F1FD91FFE13E0EB07F090C7FCA2
ED3FC0A41680157FD80F801400487E486C13FEA24A5A5D49485AEB8007391E000FE0001F
495A260FC07FC7FC3803FFFE6C13F838003FC0243F7CBC2D>I<121EEA7F80A2EAFFC0A4
EA7F80A2EA1E00C7FCB3121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2779A619>I<007F
B912E0BA12F0A26C18E0CDFCAE007FB912E0BA12F0A26C18E03C167BA147>61
D<B912E0A300019038C000016C6C48EB001FEF0FF01703A217011700A31870A418381638
A41800A21678A216F81501150791B5FCA3EC8007150115001678A21638A2180EA3181C93
C7FCA4183C1838A21878A318F8EF01F0A21707170F173F48486CEB03FFB912E0A3373E7D
BD3E>69 D<B91280A300019038C000036C6C48EB007FEF1FC0170F1707A21703A31701A4
EF00E0A21638A31800A31678A216F81501150791B5FCA3EC8007150115001678A21638A6
93C8FCAF3801FFE0B612F0A3333E7DBD3B>I<B712C016FCEEFF800001D9C00013E06C6C
48EB1FF0EE07FCEE01FE707E84717EA2717EA284A760177F606017FF95C7FCEE01FCEE07
F8EE1FE0EEFF8091B500FCC8FC16F091388001FCED003FEE1FC0707E707E831603831601
83A383A484A4F0C004190EA28218E0057F131E2601FFE0161CB600C0EB3FF094381FF838
05071370CA3801FFE09438003F803F407DBD43>82 D<EB0FF8EBFFFE3903F01F80390780
07E0000F6D7E9038E001F8D81FF07F6E7EA3157F6C5AEA0380C8FCA4EC1FFF0103B5FC90
381FF87FEB7F803801FC00EA07F8EA0FE0485A485AA248C7FCEE038012FEA315FFA3007F
5BEC03BF3B3F80071F8700261FC00E13CF3A07F03C0FFE3A01FFF807FC3A003FC001F029
2A7DA82D>97 D<EA01FC12FFA3120712031201B1EC03FC91381FFF8091387C07E09039FD
E001F09039FFC000FC4A137E91C77E49158049141F17C0EE0FE0A217F0A2160717F8AA17
F0A2160FA217E0161F17C06D1580EE3F006D5C6E13FE9039F3C001F89039F1E003F09039
E0780FC09026C03FFFC7FCC7EA07F82D407EBE33>I<49B4FC010F13E090383F00F8017C
131E4848131F4848137F0007ECFF80485A5B121FA24848EB7F00151C007F91C7FCA290C9
FC5AAB6C7EA3003FEC01C07F001F140316806C6C13076C6C14000003140E6C6C131E6C6C
137890383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01FC15FFA3150715031501
B114FF010713E190381F80F990387E003D49131FD803F81307485A49130348481301121F
123F5B127FA290C7FCA25AAA7E7FA2123FA26C7E000F14037F000714076C6C497E6C6C49
7ED8007C017913F890383F01F190380FFFC1903A01FE01FC002D407DBE33>I<EB01FE90
380FFFC090383F03F09038FC01F848486C7E4848137E48487F000F158049131F001F15C0
4848130FA2127F16E090C7FCA25AA290B6FCA290C9FCA67EA27F123F16E06C7E1501000F
15C06C6C13036DEB07806C6C1400C66C131E017E5B90381F80F8903807FFE0010090C7FC
232A7EA828>I<EC1FC0EC7FF8903801F83C903807E07E90380FC0FFEB1FC1EB3F811401
137FEC00FE01FE137C1500AEB6FCA3C648C7FCB3AE487E007F13FFA320407EBF1C>I<16
7C903903F801FF903A1FFF078F8090397E0FDE1F9038F803F83803F001A23B07E000FC06
00000F6EC7FC49137E001F147FA8000F147E6D13FE00075C6C6C485AA23901F803E03903
FE0FC026071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512E015FE6C6E7E6C15E0
6C810003813A0FC0001FFC48C7EA01FE003E140048157E825A82A46C5D007C153E007E15
7E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313C0293D7E
A82D>I<EA01FC12FFA3120712031201B1EC01FE913807FFC091381E07E091387803F091
38E001F8D9FDC07F148001FF6D7E91C7FCA25BA25BB3A6486C497EB5D8F87F13FCA32E3F
7DBE33>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC127FA3120712031201
B3AC487EB512F0A3143E7DBD1A>I<EA01FC12FFA3120712031201B3B3B1487EB512F8A3
153F7DBE1A>108 D<2701F801FE14FF00FF902707FFC00313E0913B1E07E00F03F0913B
7803F03C01F80007903BE001F87000FC2603F9C06D487F000101805C01FBD900FF147F91
C75B13FF4992C7FCA2495CB3A6486C496CECFF80B5D8F87FD9FC3F13FEA347287DA74C>
I<3901F801FE00FF903807FFC091381E07E091387803F000079038E001F82603F9C07F00
01138001FB6D7E91C7FC13FF5BA25BB3A6486C497EB5D8F87F13FCA32E287DA733>I<14
FF010713E090381F81F890387E007E01F8131F4848EB0F804848EB07C04848EB03E0000F
15F04848EB01F8A2003F15FCA248C812FEA44815FFA96C15FEA36C6CEB01FCA3001F15F8
6C6CEB03F0A26C6CEB07E06C6CEB0FC06C6CEB1F80D8007EEB7E0090383F81FC90380FFF
F0010090C7FC282A7EA82D>I<3901FC03FC00FF90381FFF8091387C0FE09039FDE003F0
3A07FFC001FC6C496C7E6C90C7127F49EC3F805BEE1FC017E0A2EE0FF0A3EE07F8AAEE0F
F0A4EE1FE0A2EE3FC06D1580EE7F007F6E13FE9138C001F89039FDE007F09039FC780FC0
DA3FFFC7FCEC07F891C9FCAD487EB512F8A32D3A7EA733>I<02FF131C0107EBC03C9038
1F80F090397F00387C01FC131CD803F8130E4848EB0FFC150748481303121F485A150148
5AA448C7FCAA6C7EA36C7EA2001F14036C7E15076C6C130F6C7E6C6C133DD8007E137990
383F81F190380FFFC1903801FE0190C7FCAD4B7E92B512F8A32D3A7DA730>I<3901F807
E000FFEB1FF8EC787CECE1FE3807F9C100031381EA01FB1401EC00FC01FF1330491300A3
5BB3A5487EB512FEA31F287EA724>I<90383FC0603901FFF8E03807C03F381F000F003E
1307003C1303127C0078130112F81400A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE6C
7F6C1480000114C0D8003F13E0010313F0EB001FEC0FF800E01303A214017E1400A27E15
F07E14016C14E06CEB03C0903880078039F3E01F0038E0FFFC38C01FE01D2A7DA824>I<
131CA6133CA4137CA213FCA2120112031207001FB512C0B6FCA2D801FCC7FCB3A215E0A9
12009038FE01C0A2EB7F03013F138090381F8700EB07FEEB01F81B397EB723>I<D801FC
14FE00FF147FA3000714030003140100011400B3A51501A31503120015076DEB06FF017E
010E13806D4913FC90381FC078903807FFE00100903880FE002E297DA733>I<B539E00F
FFE0A32707FE000313006C48EB00FC5E00015D7F00005DA26D13016D5CA26D6C485AA2EC
C007011F91C7FCA290380FE00EA2ECF01E0107131CA26D6C5AA2ECFC7801011370A2ECFE
F001005BA2EC7FC0A36E5AA26EC8FCA3140E2B287EA630>I<B53BC3FFFE03FFF8A3290F
FE003FE00013C06C486D48EB3F806C4817006D010F141E00016F131C15076D163C00004A
6C1338A2017F5E4B7E151DD93F805DED3DFC1538D91FC04A5AED78FE9238707E03D90FE0
017F5BEDE03F02F0140701070387C7FC9138F1C01F02F9148F010315CE9138FB800F02FF
14DE6D15FCED00076D5DA24A1303027E5CA2027C1301023C5C023813003D287EA642>I<
B539F01FFFE0A30003D9C00F1300C690388007F8D97F0013E002805BD93FC05B011F49C7
FC90380FE00EECF01E6D6C5A01035B6D6C5A6E5AEB00FF6E5A6E5A81141F814A7E81147B
ECF1FC903801E1FEECC0FF01037F49486C7ED90F007F011E6D7E013E130F496D7E01FC80
486C80000F4A7EB539803FFFF8A32D277FA630>I<B539E00FFFE0A32707FE000313006C
48EB01FC6F5A00015D7F00005DA2017F495AA2EC8003013F5CA26D6C48C7FCA26E5A010F
130EA26D6C5AA2ECF83C01031338A26D6C5AA2ECFEF001005BA2EC7FC0A36E5AA36EC8FC
A2140EA2141E141C143C1438A2147800181370127EB45BA2495AA248485AD87E07C9FCEA
780EEA3C3CEA1FF8EA07E02B3A7EA630>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop Black Black Black 1880 5774 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 1880 5774 a Black
1880 7356 a
 currentpoint currentpoint translate 0.7659 0.68657 scale neg exch
neg exch translate
 1880 7356 a 1880 2371 6478 4 v 1880 7381
4 5011 v 3338 4522 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 2 setlinecap 0 0 moveto 0 CLW 2 div L stroke 0 0 moveto
EndArrow  moveto } def /ArrowB { } def 597.50761  0  0.0  0  ArrowA
CP 4 2 roll ArrowB L pop pop gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 2 setlinecap 0 0 moveto 0 CLW 2 div L stroke 0 0 moveto
EndArrow  moveto } def /ArrowB { } def 85.35823  0 exch 0.0  0 exch
ArrowA CP 4 2 roll ArrowB L pop pop gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 rotate /n 4 def /dx
142.26378  def n 0 lt { /dx dx neg def /n n neg def } if /y2 3.0 CLW
2 div add def /y1 y2 neg def /y2 0 def /x dx def n { x y1 moveto x
y2 lineto stroke /x x dx add def } repeat end
 
@endspecial 3315 4650 a Fk(0)1091 b(500)1024
b(1000)1001 b(1500)g(2000)3338 4522 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  90 rotate /n 3 def /dx
28.45274  def n 0 lt { /dx dx neg def /n n neg def } if /y2 3.0 CLW
2 div add def /y1 y2 neg def /y1 0 def /x dx def n { x y1 moveto x
y2 lineto stroke /x x dx add def } repeat end


@endspecial 3223 4551 a(0)3178 4315 y(50)3132 4078 y(100)3132
3842 y(150)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 711.31859 355.65929 113.81097 355.65929  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 711.31859 369.88565 113.81097 369.88565  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 711.31859 384.11201 113.81097 384.11201  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 711.31859 398.33838 113.81097 398.33838  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 711.31859 412.56474 113.81097 412.56474  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 711.31859 426.7911 113.81097 426.7911  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 142.26372 426.79115 142.26372 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 170.71646 426.79115 170.71646 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 199.1692 426.79115 199.1692 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 227.62195 426.79115 227.62195 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 256.07469 426.79115 256.07469 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 284.52744 426.79115 284.52744 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 312.98018 426.79115 312.98018 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 341.43292 426.79115 341.43292 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 369.88567 426.79115 369.88567 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 398.33841 426.79115 398.33841 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 426.79115 426.79115 426.79115 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 455.2439 426.79115 455.2439 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 483.69664 426.79115 483.69664 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 512.14938 426.79115 512.14938 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 540.60213 426.79115 540.60213 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 569.05487 426.79115 569.05487 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 597.50761 426.79115 597.50761 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 625.96036 426.79115 625.96036 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 654.4131 426.79115 654.4131 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW .75  setgray  /ArrowA { moveto }
def /ArrowB { } def [ 682.86584 426.79115 682.86584 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW .75  setgray 0 setlinecap
stroke  grestore end
 
@endspecial -4724 x Fj(HSPs)2452
2868 y Fk(dbseq)30 b(1)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 711.31859 540.60213 113.81097 540.60213  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine
 grestore end


@endspecial 2452 3104 a(dbseq)g(2)2393 7356 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 711.31859 512.14938 113.81097 512.14938  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine
 grestore end
 
@endspecial 2452 3340 a(dbseq)g(3)2393 7356
y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 711.31859 483.69664 113.81097 483.69664  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine
 grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 170.71646 512.14938
227.62195 517.83984 .5 Frame  gsave .75  setgray fill grestore gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 170.71646 341.43292 170.71646 512.14938  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 227.62195 341.43292 227.62195 512.14938  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 3883 3200 a Fi(h)3935
3214 y Fh(1)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 213.39557 483.69664
241.84831 489.3871 .5 Frame  gsave .5  setgray fill grestore gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 213.39557 341.43292 213.39557 483.69664  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 241.84831 341.43292 241.84831 483.69664  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 4237 3436 a Fi(h)4289 3450 y
Fh(2)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 341.43292 483.69664
483.69664 489.3871 .5 Frame  gsave .75  setgray fill grestore gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 341.43292 341.43292 341.43292 483.69664  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 483.69664 341.43292 483.69664 483.69664  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 5300 3436 a Fi(h)5352 3450 y
Fh(3)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 398.33841 540.60213
441.01752 546.29259 .5 Frame  gsave 0.00 0.00 0.00 1.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 398.33841 341.43292 398.33841 540.60213  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 441.01752 341.43292 441.01752 540.60213  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 5773 2964 a Fi(h)5825 2978 y
Fh(4)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 583.28123 512.14938
654.4131 517.83984 .5 Frame  gsave .75  setgray fill grestore gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 583.28123 341.43292 583.28123 512.14938  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 654.4131 341.43292 654.4131 512.14938  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add DashLine
 grestore end
 
@endspecial 7308 3200 a Fi(h)7360 3214 y
Fh(5)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 569.05487 540.60213
597.50761 546.29259 .5 Frame  gsave .5  setgray fill grestore gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 569.05487 341.43292 569.05487 540.60213  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 597.50761 341.43292 597.50761 540.60213  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 7190 2964 a Fi(h)7242 2978 y
Fh(6)2393 3813 y Fj(Max)35 b(score)2393 3919 y(of)g(pro)6
b(jected)2393 4025 y(HSPs)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 170.71646 341.43292
213.39557 369.88567 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 170.71646 284.52744 170.71646 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 213.39557 284.52744 213.39557 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 3883 4464 a Fi(x)3935 4478 y
Fh(1)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 213.39557 341.43292
241.84831 398.33841 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 213.39557 284.52744 213.39557 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 241.84831 284.52744 241.84831 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 4237 4464 a Fi(x)4289 4478 y
Fh(2)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 341.43292 341.43292
398.33841 369.88567 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 341.43292 284.52744 341.43292 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 398.33841 284.52744 398.33841 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 5300 4464 a Fi(x)5352 4478 y
Fh(3)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 398.33841 341.43292
441.01752 426.79115 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 398.33841 284.52744 398.33841 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 441.01752 284.52744 441.01752 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 5773 4464 a Fi(x)5825 4478 y
Fh(4)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 441.01752 341.43292
483.69664 369.88567 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 441.01752 284.52744 441.01752 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 483.69664 284.52744 483.69664 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 6127 4464 a Fi(x)6179 4478 y
Fh(5)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 569.05487 341.43292
597.50761 398.33841 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 569.05487 284.52744 569.05487 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 597.50761 284.52744 597.50761 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial 7190 4464 a Fi(x)7242 4478 y
Fh(6)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 597.50761 341.43292
654.4131 369.88567 .5 Frame  gsave 0.00 0.00 1.00 0.00  setcmykcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 597.50761 284.52744 597.50761 341.43292  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add
DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 654.4131 284.52744 654.4131 341.43292  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0  setgray 5.0 3.0 0 0 add DashLine
 grestore end
 
@endspecial 7426 4464 a Fi(x)7478 4478 y
Fh(7)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 711.31859 284.52744 113.81097 284.52744  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine
 grestore end
 
@endspecial
-2362 x Fj(EX)m(ONS)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 184.94283 284.52744
241.84831 295.90836 .5 Frame  gsave gsave 0.75 0.75 0.00 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end


@endspecial 2393 7356 a
 tx@Dict begin tx@NodeDict begin {241.84831 295.90836 } false /N@A
10 {InitPnode } NewNode end end
 2393 7356 a 4006 5078 a Fi(e)4048
5092 y Fh(1)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 312.98018 284.52744
355.65929 290.2179 .5 Frame  gsave gsave 0.00 0.40 0.75 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.00 0.60 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
5069 5078 a Fi(e)5111 5092 y Fh(4)2393 7356 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 369.88567 284.52744
497.923 290.2179 .5 Frame  gsave gsave 0.00 0.40 0.75 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.00 0.60 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 5541 5078 a Fi(e)5583 5092 y
Fh(5)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 526.37575 284.52744
554.82849 295.90836 .5 Frame  gsave gsave 0.75 0.75 0.00 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
2393 7356 a
 tx@Dict begin tx@NodeDict begin {526.37575 295.90836 } false /N@B
10 {InitPnode } NewNode end end
 2393 7356 a 6841 5078 a Fi(e)6883 5092 y
Fh(6)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 597.50761 284.52744
654.4131 290.2179 .5 Frame  gsave gsave 0.00 0.40 0.75 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.00 0.60 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
7431 5078 a Fi(e)7473 5092 y Fh(7)2424 5348 y Fj(RESCORED)2424
5461 y(EX)m(ONS)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 711.31859 227.62196 113.81097 227.62196  /Lineto
/lineto load def false Line  gsave 0.8 SLW 0  setgray 3.0 0 0 add DotLine
 grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 184.94283 227.62195
241.84831 244.69376 .5 Frame  gsave gsave 0.75 0.75 0.00 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 2393
7356 a
 tx@Dict begin tx@NodeDict begin {241.84831 244.69376 } false /N@C
10 {InitPnode } NewNode end end
 2393 7356 a 4006 5550 a Fi(e)4048 5564 y Fh(1)2393
7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 312.98018 227.62195
355.65929 239.00287 .5 Frame  gsave gsave 0.00 0.40 0.75 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.00 0.60 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 5069 5550
a Fi(e)5111 5564 y Fh(4)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 369.88567 227.62195
497.923 250.38422 .5 Frame  gsave gsave 0.75 0.75 0.00 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end


@endspecial 2393 7356 a
 tx@Dict begin tx@NodeDict begin {369.88567 250.38422 } false /N@D
10 {InitPnode } NewNode end end
 2393 7356 a 2393 7356 a
 tx@Dict begin tx@NodeDict begin {497.923 250.38422 } false /N@E 10
{InitPnode } NewNode end end
 2393
7356 a 5541 5550 a Fi(e)5583 5564 y Fh(5)2393 7356 y
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 526.37575 227.62195
554.82849 239.00287 .5 Frame  gsave gsave 0.00 0.40 0.75 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.00 0.60 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 6841 5550 a Fi(e)6883
5564 y Fh(6)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 597.50761 227.62195
654.4131 244.69376 .5 Frame  gsave gsave 0.75 0.75 0.00 0.00  setcmykcolor
currentrgbcolor grestore gsave 0.60 0.00 0.60 0.00  setcmykcolor currentrgbcolor
grestore 300 0.9 30. tx@GradientDict begin GradientFill end grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
2393 7356 a
 tx@Dict begin tx@NodeDict begin {597.50761 244.69376 } false /N@F
10 {InitPnode } NewNode end end
 2393 7356 a 7431 5550 a Fi(e)7473 5564 y
Fh(7)2393 7356 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def [ 711.31859 199.1692 0.0 199.1692  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0  setgray 0 setlinecap stroke 
grestore end
 
@endspecial
2424 6057 a Fj(RESCORING)2424 6170 y(of)35 b(EX)m(ONS)3429
6057 y(Computing)f(the)h(con)m(tribution)g(of)g(the)g(tblastx)f(searc)m
(h)i(to)f(the)f(score)i(of)f(exon)g Fi(e)6709 6071 y
Fh(5)6774 6057 y Fk(=)25 b(\(910)p Fi(;)15 b Fk(1350\))3459
6170 y(Exon)31 b Fi(e)3738 6184 y Fh(5)3808 6170 y Fk(o)m(v)m(erlaps)f
(maxim)m(um)g(scoring)g(segmen)m(ts)h Fi(x)5332 6184
y Fh(3)5371 6170 y Fk(,)g Fi(x)5479 6184 y Fh(4)5518
6170 y Fk(,)g(and)f Fi(x)5803 6184 y Fh(5)5842 6170 y
Fk(.)p Black Black 4985 6405 2164 4 v 4983 6545 4 143
v 5038 6496 a Fg(j)p Fi(x)5115 6510 y Ff(i)5143 6496
y Fg(j)103 b Fi(s)5314 6510 y Ff(t)5343 6496 y Fk(\()p
Fi(x)5430 6510 y Ff(i)5459 6496 y Fk(\))c Fg(j)p Fi(x)5670
6510 y Ff(i)5719 6496 y Fg(\\)20 b Fi(e)5842 6510 y Fh(5)5882
6496 y Fg(j)p 5955 6545 V 100 w Fi(s)6050 6510 y Ff(t)6079
6496 y Fk(\()p Fi(x)6166 6510 y Ff(i)6194 6496 y Fk(\))6239
6452 y Fe(j)p Ff(x)6299 6462 y Fd(i)6325 6452 y Fe(\\)p
Ff(e)6405 6461 y Fc(5)6440 6452 y Fe(j)p 6239 6475 220
4 v 6293 6528 a(j)p Ff(x)6353 6537 y Fc(5)6387 6528 y
Fe(j)p 6517 6545 4 143 v 6569 6496 a Fi(s)6612 6510 y
Ff(g)6652 6496 y Fk(\()p Fi(e)6729 6510 y Fh(5)6769 6496
y Fk(\))p 6852 6545 V 100 w Fi(s)p Fk(\()p Fi(e)7024
6510 y Fh(5)7063 6496 y Fk(\))p 7147 6545 V 4198 6548
2951 4 v 4196 6661 4 113 v 4248 6627 a Fi(x)4300 6641
y Fh(3)4364 6627 y Fk(=)25 b(\(801)p Fi(;)15 b Fk(1000\))p
4983 6661 V 150 w(200)233 b(50)189 b(100)p 5955 6661
V 561 w(25)p 6517 6661 V 6852 6661 V 7147 6661 V 4196
6774 V 4248 6740 a Fi(x)4300 6754 y Fh(4)4364 6740 y
Fk(=)25 b(\(1001)p Fi(;)15 b Fk(1150\))p 4983 6774 V
105 w(150)188 b(150)h(150)p 5955 6774 V 516 w(150)p 6517
6774 V 6852 6774 V 7147 6774 V 4196 6887 V 4248 6853
a Fi(x)4300 6867 y Fh(5)4364 6853 y Fk(=)25 b(\(1161)p
Fi(;)15 b Fk(1300\))p 4983 6887 V 105 w(150)233 b(50)189
b(150)p 5955 6887 V 561 w(50)p 6517 6887 V 6852 6887
V 7147 6887 V 4198 6890 2951 4 v 4196 7152 4 262 v 4490
7020 a Fi(s)p Fk(\()p Fi(e)4610 7034 y Fh(5)4650 7020
y Fk(\))25 b(=)4890 6939 y Fb(X)4806 7127 y Ff(i)p Fe(2f)p
Fh(3)p Ff(;)p Fh(4)p Ff(;)p Fh(5)p Fe(g)5108 7020 y Fi(s)5151
7034 y Ff(t)5180 7020 y Fk(\()p Fi(x)5267 7034 y Ff(i)5296
7020 y Fk(\))5341 6958 y Fg(j)p Fi(x)5418 6972 y Ff(i)5467
6958 y Fg(\\)20 b Fi(e)5590 6972 y Fh(5)5629 6958 y Fg(j)p
5341 6999 314 4 v 5433 7082 a(j)p Fi(x)5510 7096 y Ff(i)5538
7082 y Fg(j)p 5955 7152 4 262 v 6312 7020 a Fj(225)p
6517 7152 V 245 w Fk(40)p 6852 7152 V 139 w Fj(265)p
7147 7152 V 4198 7155 2951 4 v 2393 7356 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@A /N@B InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 7.5 def /AngleB 0. def /ArmA 142.26372 def /ArmB 10.0
def /ArmTypeA 0 def /ArmTypeB 0 def NCDiagg  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2393 7356
a 2393 7356 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@C /N@D InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 15. def /AngleB 0. def /ArmA 64.01866 def /ArmB 10.0
def /ArmTypeA 0 def /ArmTypeB 0 def NCDiagg  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2393 7356 a 2393 7356 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@E /N@F InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 15. def /AngleB 0. def /ArmA 51.21501 def /ArmB 10.0
def /ArmTypeA 0 def /ArmTypeB 0 def NCDiagg  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 2393 7356 a 8354
7381 4 5011 v 1880 7384 6478 4 v 1880 7356 a
 currentpoint currentpoint translate 1 0.7659 div 1 0.68657 div scale
neg exch neg exch translate
 1880 7356
a Black 2545 7552 a Fk(Figura)30 b(1:)h(Rescoring)f(of)g(the)h(exons)f
(predicted)g(b)m(y)g Fa(geneid)f Fk(according)h(with)f(the)h(results)g
(of)g(a)h Fa(tblastx)d Fk(searc)m(h)p Black Black 1880
5774 a
 currentpoint grestore moveto
 1880 5774 a Black Black Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
